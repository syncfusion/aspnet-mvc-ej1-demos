<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Licensing</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.CoreAssembly">
            <summary>
            This class holds the name of the Syncfusion.Core assembly and provides a helper 
            routine that helps with resolving types when loading a serialization stream and when 
            the framework probes for assemblies by reflection. 
            </summary>
        </member>
        <member name="F:Syncfusion.CoreAssembly.StudioCoreVersion">
            <summary>
            The full name of this assembly without version information: "Syncfusion.Core"
            </summary>
        </member>
        <member name="T:Syncfusion.Licensing.Platform">
            <summary>
            List of platform used in components
            </summary>
        </member>
        <member name="T:Syncfusion.Licensing.SyncfusionLicenseProvider">
            <summary>
            Getting the license key from application
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.FusionLicenseProvider.ValidateCallingFromSyncfusion">
            <summary>
            Getting the Syncfusion calling assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Licensing.FusionLicenseProvider.GetModeOfLicense(Syncfusion.Licensing.Platform)">
             <summary>
             When a runtime context is detected, the license check will attempt to
             retrieve the stored key entry from the manifest of the assembly using
             the Syncfusion control. This method examines the assemblies loaded
             in the domain, looking for a Syncfusion.lic resource.
            
             If this resource is found, checks are done on the resource (a HashTable)
             to detect if there is a valid entry for the platform
             found in the version of Core. If the entry is valid, the stored key will
             be returned.
             </summary>
             <param name="type">Syncfusion.Core.Licensing.LicensedComponent</param>
             <returns>License type found in the key</returns>
        </member>
        <member name="M:Syncfusion.Licensing.FusionLicenseProvider.IsSyncfusionPFXSigned">
            <summary>
            Make sure the Syncfusion Pfx signed, sf.snk singed or Xamarin SampleBrowser to ignore the licensing. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Licensing.FusionLicenseProvider.IsAssemblySignedWithSfKey(System.Reflection.Assembly)">
            <summary>
            Make sure the Syncfusion Pfx signed, sf.snk singed or Xamarin SampleBrowser to ignore the licensing. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Licensing.FusionLicenseProvider.IsSampleBrowser(System.Reflection.Assembly)">
            <summary>
            Make sure the Syncfusion Pfx signed, sf.snk singed or Xamarin SampleBrowser to ignore the licensing. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Licensing.FusionLicenseProvider.GetProjectKeyType(System.String,System.String)">
            <summary>
            Read the key applied in SYncfusion.lic file and validate with Version and Platform. Based on the result the License Type (enum) will return
            </summary>
            <param name="key">decrepted key from project file</param>
            <param name="version">Syncfusion.Licensing assembly version</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Licensing.FusionLicenseProvider.Base64Encode(System.String)">
            <summary>
            Encode the key with UTF8.
            </summary>
            <param name="plainText">combined Project key and application id</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Licensing.FusionLicenseProvider.Base64Decode(System.String)">
            <summary>
            Encrypt the key second time
            </summary>
            <param name="base64EncodedData">License key</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Licensing.SyncfusionLicenseProvider.RegisterLicense(System.String)">
            <summary>
            Assign the value for valid the license key.
            </summary>
            <param name="licenseKey">Key passed from application</param>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.LicenseMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Licensing.LicenseMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.crypto.AsymmetricBlockCipher.init(System.Boolean,Syncfusion.Licensing.crypto.CipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for 
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.AsymmetricBlockCipher.getInputBlockSize">
             returns the largest size an input block can be.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.AsymmetricBlockCipher.getOutputBlockSize">
             returns the maximum size of the block produced by this cipher.
            
             @return maximum size of the output block produced by the cipher.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.AsymmetricBlockCipher.processBlock(System.Byte[],System.Int32,System.Int32)">
             process the block of len bytes stored in in from offset inOff.
            
             @param in the input data
             @param inOff offset into the in array where the data starts
             @param len the length of the block to be processed.
             @return the resulting byte array of the encryption/decryption process.
             @exception InvalidCipherTextException data decrypts improperly.
             @exception DataLengthException the input data is too large for the cipher.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.CryptoException.#ctor">
            base constructor.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.CryptoException.#ctor(System.String)">
             create a CryptoException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.RuntimeCryptoException.#ctor">
            base constructor.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.RuntimeCryptoException.#ctor(System.String)">
             create a RuntimeCryptoException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.DataLengthException.#ctor">
            base constructor.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.DataLengthException.#ctor(System.String)">
             create a DataLengthException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.Digest.getAlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="M:Syncfusion.Licensing.crypto.Digest.getDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.Digest.update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.Digest.update(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param inBytes the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.Digest.doFinal(System.Byte[],System.Int32)">
             close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param outBytes the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.Digest.reset">
            reset the digest back to it's initial state.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.digests.SHA1Digest.reset">
            reset the chaining variables
        </member>
        <member name="M:Syncfusion.Licensing.crypto.encodings.PKCS1Encoding.decodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not in PKCS1 format.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.engines.RSAEngine.init(System.Boolean,Syncfusion.Licensing.crypto.CipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.engines.RSAEngine.getInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.engines.RSAEngine.getOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.engines.RSAEngine.processBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param in the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.InvalidCipherTextException.#ctor">
            base constructor.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.InvalidCipherTextException.#ctor(System.String)">
             create a InvalidCipherTextException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="M:Syncfusion.Licensing.crypto.parameters.RSAPrivateCrtKeyParameters.#ctor(Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger)">
            
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.nextRndBytes(System.Random,System.Byte[])">
            strictly speaking this is a little dodgey from a compliance
            point of view as it forces people to be using SecureRandom as
            well, that being said - this implementation is for a crypto
            library and you do have the source!
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.add(System.Int32[],System.Int32[])">
            return a = a + b - b preserved.
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.compareTo(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            unsigned comparison on two arrays - note the arrays may
            start with leading zeros.
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.divide(System.Int32[],System.Int32[])">
            return z = x / y - done in place (z value preserved, x contains the
            remainder)
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Licensing.math.BigInteger.isProbablePrime(System.Int32)" -->
        <member name="M:Syncfusion.Licensing.math.BigInteger.extEuclid(Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger,Syncfusion.Licensing.math.BigInteger)">
             Calculate the numbers u1, u2, and u3 such that:
            
             u1 * a + u2 * b = u3
            
             where u3 is the greatest common divider of a and b.
             a and b using the extended Euclid algorithm (refer p. 323
             of The Art of Computer Programming vol 2, 2nd ed).
             This also seems to have the side effect of calculating
             some form of multiplicative inverse.
            
             @param a    First number to calculate gcd for
             @param b    Second number to calculate gcd for
             @param u1Out      the return object for the u1 value
             @param u2Out      the return object for the u2 value
             @return     The greatest common divisor of a and b
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.zero(System.Int32[])">
            zero out the array x
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.square(System.Int32[],System.Int32[])">
            return w with w = x * x - w is assumed to have enough space.
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.multiply(System.Int32[],System.Int32[],System.Int32[])">
            return x with x = y * z - x is assumed to have enough space.
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.getMQuote">
            Calculate mQuote = -m^(-1) mod b with b = 2^32 (32 = word size)
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Licensing.math.BigInteger.multiplyMonty(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int64)" -->
        <member name="M:Syncfusion.Licensing.math.BigInteger.remainder(System.Int32[],System.Int32[])">
            return x = x % y - done in place (y value preserved)
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.shiftLeft(System.Int32[],System.Int32)">
            do a left shift - this returns a new array.
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.shiftRight(System.Int32,System.Int32[],System.Int32)">
            do a right shift - this does it in place.
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.shiftRightOne(System.Int32,System.Int32[])">
            do a right shift by one - this does it in place.
        </member>
        <member name="M:Syncfusion.Licensing.math.BigInteger.subtract(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            returns x = x - y - we assume x is >= y
        </member>
        <member name="T:Syncfusion.Licensing.security.SecureRandom">
            An implementation of SecureRandom specifically for the
            light-weight API, JDK 1.0, and the J2ME. Random generation is 
            based on the traditional SHA1 with counter. Calling setSeed
            will always increase the entropy of the hash.
        </member>
        <member name="T:Syncfusion.Lic.util.encoders.Hex">
            <summary>
            Class to decode and encode Hex.
            </summary>
        </member>
        <member name="M:Syncfusion.Lic.util.encoders.Hex.decode(System.String)">
            <summary>
            Decode a string containing base 16 encoded data.
            </summary>
            <param name="data">The base 16 encoded data.</param>
            <returns>The decoded data.</returns>
        </member>
        <member name="T:Syncfusion.Lic.util.encoders.HexTranslator">
            <summary>
            A hex translator.
            </summary>
        </member>
        <member name="M:Syncfusion.Lic.util.encoders.HexTranslator.getEncodedBlockSize">
            <summary>
            Return encoded block size.
            </summary>
            <returns>2</returns>
        </member>
        <member name="T:Syncfusion.Licensing.PublicKeyDecryptProxy">
            <summary>
            A proxy class that invokes the SyncfusionDecode method on the PublicKeyDecrypt class
            provided by the Syncfusion.Licensing.Dll
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.PublicKeyDecryptProxy.SyncfusionDecode(System.String)">
            <summary>
            Decodes the syncfusion licensing key 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.None">
            <summary>
            Everything is fine.
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.DesigntimeNoKey">
            <summary>
             No valid key is installed in the registry for this version of Studio
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.DesigntimeKeyExpired">
            <summary>
            Evaluation is installed but has expired
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.DesigntimeNotLicensedControl">
            <summary>
            Keys found in registry for this version of Studio but the control that was checked was not licensed
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.RuntimeKeyExpired">
            <summary>
            Licx is present but evalulation perioed that was encoded into the licx has expired
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.RuntimeNotLicensedControl">
            <summary>
            Licx is present but the control that was checked was not licensed 
            At the moment this will never be returned since there is only a dummy guid embedded in the
            licx and no information about which controls were licensed. But in future we can add support
            for detecting this. 
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.RuntimeLicensedComponentEntryMissing">
            <summary>
            Licx is present but no entry for Syncfusion.Core.LicensedComponent was found.
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.RuntimeNoLicx">
            <summary>
            no Licx found in any assembly
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.LicenseError.Unknown">
            <summary>
            Failed - but unknown reason
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.UnlockKeyInfo.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="filterVersion">Must end with '.*', Example: 3.2.1.*</param>
        </member>
        <member name="F:Syncfusion.Licensing.BitVector64.vectorData">
            <summary>
            Contains the vector integer data
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the BitVector64 struct
            </summary>
            <param name="initialValue">The initial value as a signed 64-bit integer</param>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the BitVector64 struct
            </summary>
            <param name="initialValue">The initial value as a signed 32-bit integer</param>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.#ctor(System.Collections.Specialized.BitVector32)">
            <summary>
            Initializes a new instance of the BitVector64 struct
            </summary>
            <param name="initialValue">The initial value as a BitVector32 32-bit vector object</param>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.#ctor(Syncfusion.Licensing.BitVector64)">
            <summary>
            Initializes a new instance of the BitVector64 struct
            </summary>
            <param name="initialValue">The initial value as a BitVector64 64-bit vector object</param>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.CreateMask">
            <summary>
            Creates a series of masks that can be used to retrieve individual bits in a BitVector64 that is set up as bit flags.
            </summary>
            <returns>A mask that isolates the first bit flag in the BitVector64</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.CreateMask(System.UInt64)">
            <summary>
            Creates an additional mask following the specified mask in a series of masks that can be used to retrieve individual bits in a BitVector64 
            that is set up as bit flags.
            </summary>
            <param name="previous">The mask that indicates the previous bit flag.</param>
            <returns>A mask that isolates the bit flag following the one that previous points to in BitVector64</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.CreateSection(System.Int16)">
            <summary>
            Creates the first BitVector64.Section in a series of sections that contain small integers.
            </summary>
            <param name="maxValue">A 16-bit signed integer that specifies the maximum value for the new BitVector64.Section</param>
            <returns>A BitVector64.Section that can hold a number from zero to maxValue.</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.CreateSection(System.Int16,Syncfusion.Licensing.BitVector64.Section)">
            <summary>
            Creates a new BitVector64.Section following the specified BitVector64.Section in a series of sections that contain small integers.
            </summary>
            <param name="maxValue">A 16-bit signed integer that specifies the maximum value for the new BitVector64.Section.</param>
            <param name="previous">The previous BitVector64.Section in the BitVector64.</param>
            <returns>A BitVector64.Section that can hold a number from zero to maxValue.</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.ToString(Syncfusion.Licensing.BitVector64)">
            <summary>
            Converts a BitVector64 object to a string value.
            </summary>
            <param name="value">The BitVector64 object to convert</param>
            <returns>Returns a string format of the BitVector64 value</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.ToString">
            <summary>
            Overloaded. Overridden. See ValueType.ToString.
            </summary>
            <returns>Returns a string representation of the BitVector64.Section value</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Equals(System.Object)">
            <summary>
            Overridden. Determines whether the specified object is equal to the BitVector64.
            </summary>
            <param name="objectValue">The object to compare with the current BitVector64.</param>
            <returns>true if the specified object is equal to the BitVector64; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.GetHashCode">
            <summary>
            Serves as a hash function for the BitVector64.
            </summary>
            <returns>A hash code for the BitVector64.</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.CreateMaskFromHighValue(System.Int32)">
            <summary>
            Creates a mask using the high end of the integer
            </summary>
            <param name="highValue">The high end value to build a mask from</param>
            <returns>Returns a 16-bit mask</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.CreateSectionHelper(System.Int16,System.UInt16,System.UInt16)">
            <summary>
            Creates a new section using a specified max value and mask
            </summary>
            <param name="maxValue">The maximum value in vector</param>
            <param name="priorMask">The prior mask used</param>
            <param name="priorOffset">The prior offset used</param>
            <returns>Returns a new BitVector64.Section struct</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.CountBitsSet(System.UInt16)">
            <summary>
            Returns the number of bits set using a specified mask
            </summary>
            <param name="mask">The mask to search the vector data</param>
            <returns>Returns a 16-bit count of bits set</returns>
        </member>
        <member name="P:Syncfusion.Licensing.BitVector64.Data">
            <summary>
            Gets the vector data 64-bit integer
            </summary>
        </member>
        <member name="P:Syncfusion.Licensing.BitVector64.Item(System.UInt32)">
            <summary>
            Gets a value indicating whether a specific bit is switched on within the 64 bit vector
            </summary>
            <param name="bit">The bit index to find. 0-63</param>
            <returns>Returns true if the specified bit is switched on</returns>
        </member>
        <member name="P:Syncfusion.Licensing.BitVector64.Item(Syncfusion.Licensing.BitVector64.Section)">
            <summary>
            Gets a specific section of the 64-bit vector value
            </summary>
            <param name="section">The section object to pass to retrieve a value for</param>
            <returns>Returns a 64-bit integer containing the bits specified in the section struct</returns>
        </member>
        <member name="T:Syncfusion.Licensing.BitVector64.Section">
            <summary>
            This structure represents an section of the vector that can contain a integer number.
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.BitVector64.Section.mask">
            <summary>
            Contains a read only mask value of the section
            </summary>
        </member>
        <member name="F:Syncfusion.Licensing.BitVector64.Section.offset">
            <summary>
            Contains a read only offset value of the section
            </summary>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Section.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the Section struct
            </summary>
            <param name="mask">Contains the initial mask value</param>
            <param name="offset">Contains the initial offset value</param>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Section.op_Equality(Syncfusion.Licensing.BitVector64.Section,Syncfusion.Licensing.BitVector64.Section)">
            <summary>
            The equals operator method for the BitVector64.Section struct
            </summary>
            <param name="a">Contains a value to compare</param>
            <param name="b">Contains a secondary value to compare</param>
            <returns>True if values are equal</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Section.op_Inequality(Syncfusion.Licensing.BitVector64.Section,Syncfusion.Licensing.BitVector64.Section)">
            <summary>
            The not equals operator method for the BitVector64.Section struct
            </summary>
            <param name="a">Contains a value to compare</param>
            <param name="b">Contains a secondary value to compare</param>
            <returns>True if values are not equal</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Section.ToString(Syncfusion.Licensing.BitVector64.Section)">
            <summary>
            Returns the section value as string
            </summary>
            <param name="value">The BitVector64.Section value to convert to string</param>
            <returns>Returns a string representation of the BitVector64.Section value</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Section.ToString">
            <summary>
            Returns the section value as string
            </summary>
            <returns>Returns a string representation of the BitVector64.Section value</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Section.Equals(System.Object)">
            <summary>
            Compares an object value with the BitVector64.Section value
            </summary>
            <param name="objectValue">The BitVector64.Section value to compare</param>
            <returns>Returns true if the value is equal to the Section</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Section.Equals(Syncfusion.Licensing.BitVector64.Section)">
            <summary>
            Compares an object value with the BitVector64.Section value
            </summary>
            <param name="section">The BitVector64.Section value to compare</param>
            <returns>Returns true if the value is equal to the Section</returns>
        </member>
        <member name="M:Syncfusion.Licensing.BitVector64.Section.GetHashCode">
            <summary>
            Serves as a hash function for the BitVector64.Section
            </summary>
            <returns>A hash code for the BitVector64.Section</returns>
        </member>
        <member name="P:Syncfusion.Licensing.BitVector64.Section.Mask">
            <summary>
            Gets the Section Mask value
            </summary>
        </member>
        <member name="P:Syncfusion.Licensing.BitVector64.Section.Offset">
            <summary>
            Gets the Section Offset value
            </summary>
        </member>
    </members>
</doc>

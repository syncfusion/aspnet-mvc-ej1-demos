@using MVCSampleBrowser.Models
@using Syncfusion.JavaScript
@using Syncfusion.JavaScript.DataVisualization
@using Syncfusion.MVC.EJ

@{
    Layout = "~/Areas/WeatherAnalysis/Views/Shared/_Layout.cshtml";
}

@{
    ViewBag.Title = "Essential Studio for ASP.NET MVC : Weather Analysis";
}
    
        <div class="top-section">
            <div class="topbox"></div>
            <img src="@Url.Content("~/Images/WeatherAnalysis/WeatherIcon.png")" id="WeatherIcon" alt="Weather" />
            <div class="top-inner-section container">
                <div class="row boxcompress">
                    <div id="Circle1" class="col-sm-4">
                        <div id="Circle_Temperature">
                        </div>
                        <div id="Circle_SkyCondition">
                        </div>
                    </div>
                    <div id="Circle2" class="col-sm-4">
                        <div id="Circle_City">
                            New York
                        </div>
                        <div id="Circle_Time">
                        </div>
                        <div id="Circle_Day">
                        </div>
                    </div>
                    <div id="Circle3" class="col-sm-4">
                        <div id="tophalf">
                            <div id="Circle_Humidity">
                            </div>
                            <div id="HumidityCaption">
                                Humidity
                            </div>
                        </div>
                        <div id="bottomhalf">
                            <div id="Circle_DewPoint">
                            </div>
                            <div id="DewPointCaption">
                                Dew Point
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="weather-samples container">
            <div id="ScreenLeft" class="row">
                <div id="HeaderBar1">
                    <div>
                        <label id="CurrentDay"></label>
                        <div class="buttons">
                            <a class="signal inactive" id="ChartHour"></a>
                            <a class="square active" id="GridHour"></a>
                        </div>
                    </div>
                </div>
                <div id="HourData">
                    @(Html.EJ().Grid<OrdersView>("HourGrid")
    .Datasource((IEnumerable<object>)ViewBag.datasource)
    .Columns(co =>
        {
            co.Field("Date").HeaderText("Time").TextAlign(TextAlign.Center).Width(125).Format("{0:hh:mm tt}").Add();
            co.Field("SkyCondition").HeaderText("Sky Condition").TextAlign(TextAlign.Center).Width(120).Format("<div class= {SkyCondition}> </div>").Add();
            co.Field("Temperature").HeaderText("Temperature").TextAlign(TextAlign.Center).Width(100).Format("<label>{Temperature}&deg;c</label>").Add();
            co.Field("SkyCondition").HeaderText("Weather Description").TextAlign(TextAlign.Center).Width(150).Add();
        })
      
      
          )
                    @(Html.EJ().Chart("HourChart")
      .IsResponsive(true)
      .RowDefinitions(rd =>
          {
              rd.RowHeight(25).LineColor("transparent").Unit("percentage");
              rd.RowHeight(25).LineColor("transparent").Unit("percentage");
              rd.RowHeight(25).LineColor("transparent").Unit("percentage");
              rd.RowHeight(25).LineColor("transparent").Unit("percentage");
          })
      .PrimaryXAxis(pr => pr.MajorGridLines(mr=>mr.Visible(false)).MinorGridLines(mr => mr.Visible(false)).AxisLine(al => al.Visible(false)).ValueType(AxisValueType.Datetime).LabelFormat("hh:mm tt").IntervalType(ChartIntervalType.Hours)
         .Range(ra=>ra.Interval(6))                       
      )
      .PrimaryYAxis(pr => pr.LabelFormat("{value}").MajorTickLines(mr => mr.Visible(false)).RangePadding(ChartRangePadding.None).AxisLine(ax => ax.Visible(false))
                            .MajorGridLines(mr => mr.Visible(false)).HidePartialLabels(true).Font(fn => fn.Color("transparent")).Range(ra => ra.Min(-10).Max(45).Interval(15)))
      .Axes(ax =>
          {
              ax.MajorGridLines(ma => ma.Visible(false)).MajorTickLines(ma => ma.Visible(false)).Orientation("vertical").RowIndex(1).OpposedPosition(false)
                .Name("yAxis1").HidePartialLabels(true).Font(fn => fn.Color("transparent")).Range(ra => ra.Min(-10).Max(50).Interval(15)).AxisLine(al=>al.Visible(false)).Add();
              ax.MajorGridLines(ma => ma.Visible(false)).MajorTickLines(ma => ma.Visible(false)).Orientation("vertical").RowIndex(2).OpposedPosition(false)
                .Name("yAxis2").HidePartialLabels(true).Font(fn => fn.Color("transparent")).Range(ra => ra.Min(-10).Max(80).Interval(15)).AxisLine(al => al.Visible(false)).Add();
              ax.MajorGridLines(ma => ma.Visible(false)).MajorTickLines(ma => ma.Visible(false)).Orientation("vertical").RowIndex(2).OpposedPosition(false)
                .Name("yAxis3").HidePartialLabels(true).Font(fn => fn.Color("transparent")).Range(ra => ra.Min(-10).Max(50).Interval(5)).AxisLine(al => al.Visible(false)).Add();
              ax.MajorGridLines(ma => ma.Visible(false)).MajorTickLines(ma => ma.Visible(false)).Orientation("vertical").RowIndex(2).OpposedPosition(false)
                .Name("yAxis4").HidePartialLabels(true).Font(fn => fn.Color("transparent")).Range(ra => ra.Min(-10).Max(50).Interval(5)).AxisLine(al => al.Visible(false)).Add();
          })
      .CommonSeriesOptions(cm => cm.Type(SeriesType.Line).EnableAnimation(true).Marker(mr => mr.Shape(ChartShape.Circle).Size(sz => sz.Height(6).Width(6)).Border(br => br.Color("white").Width(3))))
      .Series(sr =>
          {
              sr.Name("Temperature").Fill("#A0C037").Tooltip(tl => tl.Visible(true).Format("#series.name#: #point.y# c")).Marker(mr=>mr.Visible(true)).Add();
              sr.Name("FeelsLike").Fill("#369E45").Tooltip(tl => tl.Visible(true).Format("#series.name#: #point.y# c")).Marker(mr => mr.Visible(true)).YAxisName("yAxis1").Add();
              sr.Name("Humidity").Fill("#9F5123").Tooltip(tl => tl.Visible(true).Format("#series.name#: #point.y# %")).Marker(mr => mr.Visible(true)).YAxisName("yAxis2").Add();
              sr.Name("Wind").Fill("#2DA2D8").Tooltip(tl => tl.Visible(true).Format("#series.name#: #point.y# mph")).Marker(mr => mr.Visible(true)).YAxisName("yAxis3").Add();
          })
                                  
      .Crosshair(cr=>cr.Visible(true).Type(CrosshairType.Trackball).Line(ln=>ln.Width(2).Color("#F4B16D")).Marker(mr=>mr.Shape(ChartShape.Circle).Size(sz=>sz.Height(9).Width(9)).Visible(true)))
      .Load("hourChartLoad").SeriesRendering("renderSeries")
      .Background("white")
      .Size(sz => sz.Height("500"))
      .ChartArea(ca => ca.Border(br => br.Color("transparent")))
      .Margin(mr => mr.Left(20).Top(20))
      .Legend(lg => lg.Visible(true).Shape(ChartShape.Circle).Position(LegendPosition.Bottom).ItemStyle(it => it.Width(10).Height(10))))

                </div>
            </div>
            <div id="ScreenRight" class="row">
                <div id="HeaderBar2">
                    <div>
                        Average Conditions
                        <div class="buttons">
                            <a class="signal active" id="ChartAverage"></a>
                            <a class="square inactive" id="GridAverage"></a>
                        </div>
                    </div>
                </div>
                <div id="AverageData">
                    @(Html.EJ().Chart("AverageChart")
                              .IsResponsive(true)
                              .PrimaryXAxis(pr => pr.ValueType(AxisValueType.Category).OpposedPosition(true).AxisLine(ax => ax.Visible(false)).MajorGridLines(mr => mr.Visible(false)).MajorTickLines(mr => mr.Visible(false)))
                              .PrimaryYAxis(pr => pr.ValueType(AxisValueType.Double).Range(ra => ra.Min(0).Max(150).Interval(25)).RangePadding(ChartRangePadding.None).LabelFormat("{value} mm").AxisLine(ax => ax.Visible(false)))
                              .Axes(ae =>
                                  {
                                      ae.ValueType(AxisValueType.Double).MajorGridLines(mr => mr.Visible(false)).Orientation("vertical").RowIndex(0).OpposedPosition(true).AxisLine(ax => ax.Visible(false))
                                        .Range(ra => ra.Max(15).Min(0).Interval(2.5)).RangePadding(ChartRangePadding.None).Name("yAxis").LabelFormat("{value} hrs");
                                  })
                              .Series(se =>
                                  {
                                      se.Name("Average Precipitation").Type(SeriesType.Column).Tooltip(t => t.Visible(true).Template("precipitationTooltip")).EnableAnimation(true).Fill("#84c865").Add();
                                      se.Name("Average Sunlight").Type(SeriesType.Column).Tooltip(t => t.Visible(true).Template("sunlightTooltip")).EnableAnimation(true).Fill("#E94649").Add();
                                  })
                              .Load("averageChartLoad")
                              .Background("white")
                              .Size(sz => sz.Height("500"))
                              .Legend(lg => lg.Visible(true).Shape(ChartShape.Circle).Position(LegendPosition.Bottom).ItemStyle(it => it.Height(10).Width(10))))
                    <div class="averagegridwrapper"> @(Html.EJ().Grid<OrdersView>("AverageGrid")
    .Datasource((IEnumerable<object>)ViewBag.datasource1)
    .EnableAltRow(false)
    .AllowGrouping(true)
     .Columns(co =>
        {
            
            co.Field("Average").HeaderText("Average").TextAlign(TextAlign.Center).Width(200).Add();
            co.Field("Jan").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Feb").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Mar").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Apl").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Mar").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Jun").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Jul").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Aug").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Sep").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Oct").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Nov").TextAlign(TextAlign.Center).Width(50).Add();
            co.Field("Dec").TextAlign(TextAlign.Center).Width(50).Add();
        })
)      </div>
                </div>
            </div>
            <div id="precipitationTooltip" style="display: none;">
                <div class="value">
                    <div>
                        <label class="month">#point.x#</label><br />
                        <label class="precipitation">Avg Precipitation (mm) : <b>#point.y#</b></label>
                    </div>
                </div>
            </div>
            <div id="sunlightTooltip" style="display: none;">
                <div class="value">
                    <div>
                        <label class="month">#point.x#</label><br />
                        <label class="sunlight">Avg Sunlight (Hrs): <b>#point.y#</b></label>
                    </div>
                </div>

            </div>
        </div>
        <div id="footer">
        				<div class="bottom-links">
            				<div class="left">
                				<div class="sync-text">
                    				Copyright © 2001-2019 Syncfusion Inc.
                				</div>
            				</div>  
            				<div class="right">
                				<a href="https://www.syncfusion.com">
                    				<div class="syncfusion-image"></div>
                				</a>
            				</div>
        				</div>
    				</div>
        <div class="frame">
                             
                    
        </div>     

<script  type="text/javascript">
    var flag = false;
    var currentDate = new Date();
    var skyCondition = ["Snow", "Rain Storm", "Thunder", "Rainy", "Cloudy", "Partly Cloudy", "Sunny", "Partly Sunny"];
    var currentSkyCondition = Math.floor((Math.random() * 7));
    var WeatherData = [];
    WeatherData.push({
        "Date": new Date(currentDate.setHours(currentDate.getHours())),
        "SkyCondition": skyCondition[currentSkyCondition],
        "Humidity": Math.floor(Math.random() * 40 + 35),
        "Wind": Math.floor(Math.random() * 10 + 1),
        "Pressure": Math.floor(Math.random() * 30 + 70),
        "Temperature": currentSkyCondition * 5 + Math.floor(Math.random() * 5),
        "FeelsLike": currentSkyCondition * 5 + Math.floor(Math.random() * 15)
    });

            $("#CurrentDay").text(ej.format(currentDate, "dddd"));
            $("#Circle_Temperature").html(WeatherData[0].Temperature + "&deg;c");
            $("#Circle_SkyCondition").html(WeatherData[0].SkyCondition);
            $("#Circle_Time").html(ej.format(WeatherData[0].Date, "hh:mm tt"));
            $("#Circle_Day").html(ej.format(WeatherData[0].Date, "dddd"));
            $("#Circle_Humidity").html(WeatherData[0].Humidity + "%");
            $("#Circle_DewPoint").html(Math.floor((Math.random() * 10 + 10)) + "&deg;c");

            for (var i = 1; i < 24; i++) {
                var skyRandom = Math.floor((Math.random() * 7));
                WeatherData.push({
                    "Date": new Date(currentDate.setHours(currentDate.getHours() + 1)),
                    "SkyCondition": skyCondition[skyRandom],
                    "Humidity": Math.floor(Math.random() * 40 + 35),
                    "Wind": Math.floor(Math.random() * 10 + 1),
                    "Pressure": Math.floor(Math.random() * 30 + 70),
                    "Temperature": skyRandom * 5 + Math.floor(Math.random() * 5),
                    "FeelsLike": skyRandom * 5 + Math.floor(Math.random() * 15)
                });
            }

            window.WeatherDataObject = WeatherData;

            var data = ej.DataManager(window.WeatherDataObject).executeLocal(ej.Query());

    $("#AverageGrid").find(".groupdroparea").hide();
    $("#AverageGrid").hide();

            $('.buttons > a').bind('click', function () { weatherSelection(this) });

    function renderSeries(sender) {
        if (!flag)
            {
            $("#HourChart").hide();
                flag = true;
            }
    }

            //It is used to perform navigation between Chart and Grid

            function weatherSelection(target) {
                switch (target.id) {
                    case "ChartHour":
                        if ($(target).hasClass("inactive")) {
                            $(target).removeClass("inactive").addClass("active");
                            $("#GridHour").removeClass("active").addClass("inactive");
                            $("#HourGrid").hide();
                            $("#HourChart").show();
                            var chartobj = $("#HourChart").data("ejChart");
                            chartobj.chartResize();
                        }
                        break;
                    case "GridHour":
                        if ($(target).hasClass("inactive")) {
                            $(target).removeClass("inactive").addClass("active");
                            $("#ChartHour").removeClass("active").addClass("inactive");
                            $("#HourChart").hide();
                            $("#HourGrid").show();
                        }
                        break;
                    case "ChartAverage":
                        if ($(target).hasClass("inactive")) {
                            $(target).removeClass("inactive").addClass("active");
                            $("#GridAverage").removeClass("active").addClass("inactive");
                            $("#AverageGrid").hide();
                            $("#AverageChart").show();
                            var chartobj = $("#AverageChart").data("ejChart");
                            chartobj.chartResize();
                        }
                        break;
                    case "GridAverage":
                        if ($(target).hasClass("inactive")) {
                            $(target).removeClass("inactive").addClass("active");
                            $("#ChartAverage").removeClass("active").addClass("inactive");
                            $("#AverageChart").hide();
                            $("#AverageGrid").show();
                        }
                        break;
                }
            }


            //It is used to set data source for the chart to series in model

            function hourChartLoad(sender) {
                var data = getHourData();
                sender.model.primaryXAxis.range.min = window.WeatherData[0].Date;
                sender.model.primaryXAxis.range.max = window.WeatherData[window.WeatherData.length-1].Date;
                sender.model.series[0].dataSource = data.Temperature;
                sender.model.series[0].xName= "XValue";
                sender.model.series[0].yName= "YValue";
                sender.model.series[1].dataSource = data.FeelsLike;
                sender.model.series[1].xName= "XValue";
                sender.model.series[1].yName= "YValue";
                sender.model.series[2].dataSource =  data.Humidity;
                sender.model.series[2].xName= "XValue";
                sender.model.series[2].yName= "YValue";
                sender.model.series[3].dataSource =data.Wind;
                sender.model.series[3].xName= "XValue";
                sender.model.series[3].yName= "YValue";
            }

            //It is used to retrieve data for binding chart to display hour details for the day

            function getHourData() {
                var series1 = [];
                var series2 = [];
                var series3 = [];
                var series4 = [];
                $.each(window.WeatherDataObject, function (index, value) {
                    var point1 = { XValue: value.Date, YValue: value.Temperature };
                    var point2 = { XValue: value.Date, YValue: value.FeelsLike };
                    var point3 = { XValue: value.Date, YValue: value.Humidity };
                    var point4 = { XValue: value.Date, YValue: value.Wind };
                    series1.push(point1);
                    series2.push(point2);
                    series3.push(point3);
                    series4.push(point4);
                });
                var data = { Temperature: series1, FeelsLike: series2, Humidity: series3, Wind: series4 };
                return data;
            }

            //It is used to set data source for the chart to series in model

            function averageChartLoad(sender) {
                var data = getAverageData();
                sender.model.series[0].dataSource = data.Precipitation;
                sender.model.series[0].xName= "XValue";
                sender.model.series[0].yName= "YValue";
                sender.model.series[1].dataSource = data.Sunlight;
                sender.model.series[1].xName="XValue";
                sender.model.series[1].yName= "YValue";
            }

            //It is used to retrieve data for binding chart to display average record details for the year
            function onchartload(sender) {
                var data = getData(5);
                sender.model.series[0].dataSource = data.Open;
                sender.model.series[0].xName= "XValue";
                sender.model.series[0].yName= "YValue";
                sender.model.series[1].dataSource = data.Close;
                sender.model.series[1].xName= "XValue";
                sender.model.series[1].yName= "YValue";
            }
            var Average = ["Average Precipitation", "Average Sunlight", "Average Minimum Temperature", "Average Maximum Temperature", "Average Wind"];
            var AverageData = [];
            var months = ["Jan", "Feb", "Mar", "Apl", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var d = {};
            d["Average"] = "Precipitation";
            for (var i = 0; i < 12; i++) {
                var date = new Date();
                var monthValue = date.getMonth() + i;
                if (monthValue < 12)
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 100 + 20));
                else {
                    monthValue = monthValue - 12;
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 100 + 20));
                }
            }
            AverageData.push(d);

            var d = {};
            d["Average"] = "Sunlight";
            for (var i = 0; i < 12; i++) {
                var date = new Date();
                var monthValue = date.getMonth() + i;
                if (monthValue < 12)
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 12 + 2));
                else {
                    monthValue = monthValue - 12;
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 12 + 2));
                }
            }
            AverageData.push(d);

            var d = {};
            d["Average"] = "Minimum Temperature";
            for (var i = 0; i < 12; i++) {
                var date = new Date();
                var monthValue = date.getMonth() + i;
                if (monthValue < 12)
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 15 - 5));
                else {
                    monthValue = monthValue - 12;
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 15 - 5));
                }
            }
            AverageData.push(d);

            var d = {};
            d["Average"] = "Maximum Temperature";
            for (var i = 0; i < 12; i++) {
                var date = new Date();
                var monthValue = date.getMonth() + i;
                if (monthValue < 12)
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 20 + 25));
                else {
                    monthValue = monthValue - 12;
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 20 + 25));
                }
            }
            AverageData.push(d);

            var d = {};
            d["Average"] = "Wind";
            for (var i = 0; i < 12; i++) {
                var date = new Date();
                var monthValue = date.getMonth() + i;
                if (monthValue < 12)
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 15));
                else {
                    monthValue = monthValue - 12;
                    d[months[new Date(date.setMonth(monthValue)).getMonth()]] = Math.floor((Math.random() * 15));
                }
            }
            AverageData.push(d);

            window.AverageData = AverageData;



            var averageData = ej.DataManager(window.AverageData).executeLocal(ej.Query());
            var columnNames = [];
            $.each(averageData[0], function (index, value) {
                if (index == "Average") {
                    var column = { field: index, textAlign: ej.TextAlign.Center }
                    columnNames.push(column);
                }
                else {
                    var column = { field: index, textAlign: ej.TextAlign.Center, width: 50, customAttributes: { "class": "e-rowcell average" } }
                    columnNames.push(column);
                }
            });
            //Set Data entry for Column chart
            function getData(year) {
                var series1 = [];
                var series2 = [];
                var value = 100;
                var value1 = 150;

                for (var i = 1; i <= 64; i++) {
                    if (Math.random() > 5) {
                        value = getRandomNum(700, 800);
                    } else {
                        value = getRandomNum(350, 700);
                    }
                    var point = { XValue: new Date(2008, 01 + i, 15), YValue: value };
                    series1.push(point);
                    if (value > 400)
                        value1 = value - 100;
                    else
                        value1 = value + 200;
                    var point1 = { XValue: new Date(2008, 01 + i, 15), YValue: value1 };
                    series2.push(point1);
                }
                var data = { Open: series1, Close: series2 };
                return data;
            }

            function getRandomNum(ubound, lbound) {

                return (Math.floor(Math.random() * (ubound - lbound)) + lbound);
            }
            function getAverageData() {
                var series1 = [];
                var series2 = [];
                $.each(window.AverageData[0], function (index, value) {
                    if (index != "Average") {
                        var point1 = { XValue: index, YValue: value };
                        series1.push(point1);
                    }
                });
                $.each(window.AverageData[1], function (index, value) {
                    if (index != "Average") {
                        var point1 = { XValue: index, YValue: value };
                        series2.push(point1);
                    }
                });
                var data = { Precipitation: series1, Sunlight: series2 };
                return data;
            }
        </script>



    

        
         
   


    
          
    


    
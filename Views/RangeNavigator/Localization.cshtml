@using Syncfusion.JavaScript.DataVisualization

@section ScriptReferenceSection{
    <script src="~/Scripts/cultures/ej.culture.en-US.min.js"></script>
    <script src="~/Scripts/cultures/ej.culture.fr-FR.min.js"></script>
    <script src="~/Scripts/cultures/ej.culture.vi-VN.min.js"></script>
}

@section SampleHeading{<span class="sampleName">RangeNavigator-Localization-ASP.NET MVC-SYNCFUSION</span>}

@section ControlsSection{
    <div id="target1">
        <ul>
            <li>English</li>
            <li>French</li>
        </ul>
    </div>
    <div id="target">
        <ul>
            <li>quarters</li>
            <li>weeks</li>
        </ul>
    </div>
    <div>
            @(Html.EJ().RangeNavigator("scrollcontent")
                  .EnableDeferredUpdate(true)
                  .Padding("15px")
                  .SelectedRangeSettings(ra => ra.Start("2010/4/1").End("2010/9/30"))
                  .AllowSnapping(true)
                  .IsResponsive(true)
                  .ValueType(RangeNavigatorValueType.Datetime)
                  .EnableRTL(false)
                  .TooltipSettings(tl => tl.Visible(true).LabelFormat("dd/MM/yyyy").BackgroundColor("gray")
                  .TooltipDisplayMode("ondemand").Font(fn => fn.Color("white").Family("Segoe UI").Style(RangeNavigatorFontStyle.Normal)
                  .Size("12px").Opacity(1).Weight(RangeNavigatorFontWeight.Regular)))
                  .Series(sr =>
                              {
                                  sr.Name("Product A").EnableAnimation(false).Type(SeriesType.Line).Opacity(0.5).Fill("#69D2E7").Add();
                              })
                  .NavigatorStyleSettings(ns => ns.Border(br => br.Color("transparent").Width(2)).Background("transparent")
                  .SelectedRegionColor("lightgray").UnselectedRegionColor("gray").ThumbColor("black").ThumbRadius(13)
                  .MajorGridLineStyle(mr => mr.Color("black").Visible(true)).MinorGridLineStyle(mi => mi.Color("black").Visible(true)))
                  .Load("loadingdata")
                  .RangeChanged("onchartloaded")
                  )

        @(Html.EJ().Chart("container")
              .PrimaryXAxis(pr => pr.Title(tl => tl.Text("Date")).MajorGridLines(mr => mr.Visible(false))
              .ValueType(AxisValueType.Datetime).LabelFormat("MMM/dd"))
              .PrimaryYAxis(pr => pr.Title(tl => tl.Text("Price ($)")).LabelFormat("${value}"))
              .Crosshair(cr => cr.Visible(true).Type(CrosshairType.Trackball)
              .Marker(mr => mr.Shape(ChartShape.Circle)
              .Size(sz => sz.Height(9).Width(9)).Visible(true))
              .Line(l => l.Color("transparent")))
              .Series(sr =>
              {
                  sr.Type(SeriesType.Line).Name("Product X").EnableAnimation(true)
                    .Tooltip(to => to.Visible(true).Format("#point.x#  : ej.format(#point.y#,n2)")).Width(2).Add();
                  sr.Type(SeriesType.Line).Name("Product Y").EnableAnimation(true)
                    .Tooltip(to => to.Visible(true).Format("#point.x#  : ej.format(#point.y#,n2)")).Width(2).Add();
              })
              .Load("onchartload")
              .Title(title => title.Text("Stock Price Analysis"))
              .Size(sz => sz.Height("400"))
              .Legend(lg => lg.Visible(true))
              )
    </div>
}
@section PropertiesSection
{
    <label>
        Locale
    </label>
    @Html.EJ().DropDownList("opt1").TargetID("target1").SelectedItemIndex(0).ClientSideEvents(s => s.Change("Locale"))
    <br />
    <label>
        Interval Type</label>
    @Html.EJ().DropDownList("opt").TargetID("target").SelectedItemIndex(0).ClientSideEvents(s => s.Change("IntervalType"))
    <br />
}
@section ScriptSection
{
    <script>
        var data;
		var localizedText = {};
        localizedText["en-US"] = { title: "Stock Price Analysis", xAxisTitle: "Date", yAxisTitle: "Price ($)", series: [{ name: "Product X" }, { name: "Product Y" }] };
        localizedText["fr-FR"] = { title: "Stock Prix Analyse", xAxisTitle: "Date", yAxisTitle: "Prix ​​($)", series: [{ name: "Le produit X" }, {name:"Le produit Y"}] };
        function onchartload(sender) {
            loadTheme(sender);
            sender.model.series[0].dataSource = data.Open;
            sender.model.series[0].xName = "XValue";
            sender.model.series[0].yName = "YValue";
            sender.model.series[1].dataSource = data.Close;
            sender.model.series[1].xName = "XValue";
            sender.model.series[1].yName = "YValue";
        }
        function GetData1() {
            var series1 = [];
            var series2 = [];
            var value = 100;
            var value1 = 120;
            for (var i = 1; i < 90; i++) {

                if (Math.random() > .5) {
                    value += Math.random();
                    value1 += Math.random();
                } else {
                    value -= Math.random();
                    value1 -= Math.random();
                }
                var point1 = { XValue: new Date(2010, 0, i), YValue: value };
                var point2 = { XValue: new Date(2010, 0, i), YValue: value1 };
                series1.push(point1);
                series2.push(point2);
            }
            data = { Open: series1, Close: series2 };
            return data;
        }
        function GetData() {
            var series1 = [];
            var series2 = [];
            var value = 100;
            var value1 = 120;
            for (var i = 1; i < 360; i++) {

                if (Math.random() > .5) {
                    value += Math.random();
                    value1 += Math.random();
                } else {
                    value -= Math.random();
                    value1 -= Math.random();
                }
                var point1 = { XValue: new Date(2010, 0, i), YValue: value };
                var point2 = { XValue: new Date(2010, 0, i), YValue: value1 };
                series1.push(point1);
                series2.push(point2);
            }
            data = { Open: series1, Close: series2 };
            return data;
        }
        function loadingdata(sender) {
            loadTheme(sender);
            data = GetData();
            sender.model.series[0].dataSource = data.Open;
            sender.model.series[0].xName = "XValue";
            sender.model.series[0].yName = "YValue";
        }
        var flag = false;
        function onchartloaded(sender) {
            if (!flag) {
                flag = true;
            } else {
                var chartobj = $("#container").data("ejChart");

                if (chartobj != null) {
                    chartobj.model.primaryXAxis.zoomPosition = sender.zoomPosition;
                    chartobj.model.primaryXAxis.zoomFactor = sender.zoomFactor;
                }
                $("#container").ejChart("redraw");
            }
        }
        function Locale(sender) {
            if (sender.selectedText == "English")
                var culture = "en-US";
            else
                culture = "fr-FR";
            var slideobj = $("#scrollcontent").data("ejRangeNavigator");

            slideobj.model.locale = culture;
			$("#container").ejChart("option", {
                locale: culture, title: { text: localizedText[culture].title },
                primaryXAxis: { title: { text: localizedText[culture].xAxisTitle } },
                primaryYAxis: { title: { text: localizedText[culture].yAxisTitle } },
                series: localizedText[culture].series
            });
            $("#scrollcontent").ejRangeNavigator("renderNavigator");
        }
        function IntervalType(sender) {
            var Interval = sender.selectedText;
            var slideobj = $("#scrollcontent").data("ejRangeNavigator");

            if (slideobj.model.series[0].dataSource.length == 359) {
                var data = GetData1();

                slideobj.model.series[0].dataSource = data.Open;
                slideobj.model.selectedRangeSettings.start = "2010/2/1";
                slideobj.model.selectedRangeSettings.end = "2010/3/1";
            } else {
                var data = GetData();
                slideobj.model.series[0].dataSource = data.Open;
                slideobj.model.selectedRangeSettings.start = "2010/4/1";
                slideobj.model.selectedRangeSettings.end = "2010/6/30";
            }
            slideobj.model.labelSettings.lowerLevel.intervalType = Interval;
            $("#scrollcontent").ejRangeNavigator("renderNavigator");
        }
        $("#controlarea").css("visibility", "visible");
        $("#sampleProperties").ejPropertiesPanel();
    </script>
}


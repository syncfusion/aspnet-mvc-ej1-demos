@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">RangeNavigator-Highlight-ASP.NET MVC-SYNCFUSION</span>}

@section ScriptSection
{
    <script type="text/javascript" language="javascript">
        var  data = GetData();
        function onchartload(sender) {
            loadTheme(sender);
            sender.model.series[0].dataSource = data.Open;
            sender.model.series[0].xName = "XValue";
            sender.model.series[0].yName = "YValue";
        }
        function GetData() {
            var series1 = [];
            var value = 100;
            for (var i = 1; i < 365; i++) {
                if (Math.random() > .5) {
                    value += Math.random();
                } else {
                    value -= Math.random();
                }
                var point1 = { XValue: new Date(2010, 0, i), YValue: value };
                series1.push(point1);
            }
            data = { Open: series1 };
            return data;
        }
        function loadingdata(sender) {
            loadTheme(sender);
            sender.model.series[0].dataSource = data.Open;
            sender.model.series[0].xName = "XValue";
            sender.model.series[0].yName = "YValue";
        }
        var flag = false;
        function onchartloaded(sender) {
            if (!flag) {
                flag = true;
            } else {
                var chartobj = $("#container").data("ejChart");

                if (chartobj != null) {
                    chartobj.model.primaryXAxis.zoomPosition = sender.zoomPosition;
                    chartobj.model.primaryXAxis.zoomFactor = sender.zoomFactor;
                }
                $("#container").ejChart("redraw");
            }
        }
        $("#controlarea").css("visibility", "visible");

        $('#enablehigh').change(function () {
            $("#scrollcontent").ejRangeNavigator("option", { "navigatorStyleSettings": { highlightSettings: { enable: $('#enablehigh').is(":checked") } } });

        });
        $('#enablesel').change(function () {
            $("#scrollcontent").ejRangeNavigator("option", { "navigatorStyleSettings": { selectionSettings: { enable: $('#enablesel').is(":checked") } } });

        });
        function onChange(args) {
            $("#scrollcontent").ejRangeNavigator("option", { "navigatorStyleSettings": { highlightSettings: { color: args.value } } });
        }
        function onChange1(args) {
            $("#scrollcontent").ejRangeNavigator("option", { "navigatorStyleSettings": { selectionSettings: { color: args.value } } });
        }
        $("#sampleProperties").ejPropertiesPanel();

    </script>
}
@section ControlsSection{
    <div>
        
        @(Html.EJ().Chart("container")
              .PrimaryXAxis(pr => pr.Title(tl => tl.Text("Date")).MajorGridLines(mr => mr.Visible(false))
              .ValueType(AxisValueType.Datetime).LabelFormat("MMM/dd"))
              .PrimaryYAxis(pr => pr.Title(tl => tl.Text("Price ($)")).LabelFormat("${value}"))
              .Crosshair(cr => cr.Visible(true).Type(CrosshairType.Trackball)
              .Marker(mr => mr.Shape(ChartShape.Circle)
              .Size(sz => sz.Height(9).Width(9)).Visible(true))
              .Line(l => l.Color("transparent")))
              .Series(sr =>
                          {
                              sr.Type(SeriesType.Line).Fill("#4EC9DD").Name("Product X").EnableAnimation(true)
                                .Tooltip(to => to.Visible(true).Format("#point.x#  : ej.format(#point.y#,n2)")).Width(2).Add();
                          })
              .Load("onchartload")
              .Title(title => title.Text("Stock Price Analysis"))
              .Size(sz => sz.Height("400"))
              .Legend(lg => lg.Visible(true))
        )
		
		@(Html.EJ().RangeNavigator("scrollcontent")
                  .EnableDeferredUpdate(true)
                  .Padding("15px")
				  .Border(ba => ba.Color("#f2f3f4").Width(2))
                  .SelectedRangeSettings(ra => ra.Start("2010/4/1").End("2010/9/1"))
                  .AllowSnapping(true)
                  .IsResponsive(true)
                  .ValueType(RangeNavigatorValueType.Datetime)
                  .TooltipSettings(tl => tl.Visible(true).LabelFormat("dd/MM/yyyy").BackgroundColor("#434344")
                  .TooltipDisplayMode("ondemand").Font(fn => fn.Color("white").Family("Segoe UI").Style(RangeNavigatorFontStyle.Normal)
                  .Size("12px").Opacity(1).Weight(RangeNavigatorFontWeight.Regular)))
                  .Series(sr =>
                              {
                                  sr.Name("Product A").EnableAnimation(false).Type(SeriesType.Line).Opacity(0.5).Fill("#4EC9DD").Add();
                              })
                  .NavigatorStyleSettings(ns => ns.Background("whitesmoke").Background("#f2f3f4").UnselectedRegionColor("#2d8ec4").
                          ThumbColor("gray").ThumbStroke("black").ThumbRadius(13)
                          .HighlightSettings(hs => hs.Enable(true).Color("#006fa0").Border(b=>b.Color("gray").Width(1)))
                          .SelectionSettings(hs => hs.Enable(true).Color("#0e4a7c").Border(b => b.Color("gray").Width(1)))
                   )
                   .LabelSettings(ls => ls.HigherLevel(hl => hl.LabelPlacement(RangeNavigatorLabelPlacement.Inside)
                                                                .Style(lst => lst.HorizontalAlignment(HorizontalAlignment.Left)
                                                                .Font(f => f.Color("black").Style(RangeNavigatorFontStyle.Normal)
                                                                .Opacity(1).Weight(RangeNavigatorFontWeight.Regular)
                                                                .Family("Segoe UI").Size("13px"))))
										.LowerLevel(ll => ll.LabelPlacement(RangeNavigatorLabelPlacement.Inside))
                  )
                  .Load("loadingdata")
                  .RangeChanged("onchartloaded")
        )
    </div>
}
@section PropertiesSection
{
    <div class="prop-grid">
        <div class="row">
            <div class="col-md-3">
                Enable Highlight
            </div>
            <div class="col-md-3 aligntop">
                <input type="checkbox" checked="checked" id="enablehigh" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Enable Selection
            </div>
            <div class="col-md-3 aligntop">
                <input type="checkbox" checked="checked" id="enablesel" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Highlight Color
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().ColorPicker("colorPicker").Value("#006fa0").ClientSideEvents(events => events.Select("onChange"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Selection Color
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().ColorPicker("colorPicker1").Value("#0e4a7c").ClientSideEvents(events => events.Select("onChange1"))
            </div>
        </div>
    </div>
}


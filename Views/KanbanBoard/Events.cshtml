@section SampleHeading{
    <span class="sampleName">KanbanBoard-Events-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
   <meta name="description" content="This example demonstrates client-side events and triggered events when particular operations are performed in the Syncfusion ASP.NET MVC Kanban component.">
}
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>

}
@using Syncfusion.JavaScript.Models;
    @section ControlsSection{
    @(Html.EJ().Kanban("Kanban")
                   .DataSource((IEnumerable<object>)ViewBag.datasource)
                   .Columns(col =>
                   {
                       col.HeaderText("Backlog").Key("Open").Add();
                       col.HeaderText("In Progress").Key("InProgress").Add();
                       col.HeaderText("Testing").Key("Testing").Add();
                       col.HeaderText("Done").Key("Close").Add();
                   })
                            .AllowScrolling(true)
                            .ScrollSettings(sSettings => { sSettings.Width(700).Height(800); })         
                                    .EditSettings(edit =>
                                  {
                                      edit.AllowAdding(true)
                                          .AllowEditing(true)                                          
                                          .EditItems(e =>
                                          {
                                              e.Field("Id").ValidationRules(rule => { rule.AddRule("required", true).AddRule("number", true); }).Add();
                                              e.Field("Status").EditType(KanbanEditingType.Dropdown).Add();
                                              e.Field("Assignee").EditType(KanbanEditingType.Dropdown).Add();
                                              e.Field("Estimate").EditType(KanbanEditingType.Numeric).NumericEditOptions(new EditorProperties() { DecimalPlaces = 2 }).ValidationRules(rule => { rule.AddRule("range", "[0,1000]"); }).Add();
                                              e.Field("Summary").EditType(KanbanEditingType.TextArea).ValidationRules(rule => { rule.AddRule("required", true); }).Add();
                                          }).EditMode(KanbanEditMode.Dialog);
                                  })
                  .AllowTitle(true)
                  .KeyField("Status")
                  .Fields(field =>
                  {
                      field.Color("Type")
                           .Content("Summary")
                           .ImageUrl("ImgUrl")
                           .PrimaryKey("Id");
                  })

                           .ClientSideEvents(eve =>
                {
                    eve.Create("create");
                    eve.ActionBegin("actionBegin");
                    eve.ActionComplete("actionComplete");
                    eve.BeginEdit("beginEdit");
                    eve.EndEdit("endEdit");
                    eve.EndAdd("endAdd");
                    eve.CardClick("cardClick");
                    eve.BeforeCardSelect("beforeCardSelect");
                    eve.CardSelect("cardSelect");
                    eve.CardDoubleClick("cardDoubleClick");
                    eve.CardDrop("cardDrop");
                    eve.CardDragStop("cardDragStop");
                    eve.CardDragStart("cardDragStart");
                    eve.CardDrag("cardDrag");
                    eve.QueryCellInfo("queryCellInfo");
                })
    )

}
@section EventsDropDown{


    <div id="ddl">
        <ul>
            <li>create</li>
            <li>actionBegin</li>
            <li>actionComplete</li>
            <li>beginEdit</li>
            <li>endEdit</li>
            <li>endAdd</li>
            <li>cardClick</li>
            <li>beforeCardSelect</li>
            <li>cardSelect</li>
            <li>cardDoubleClick</li>
            <li>cardDrop</li>
            <li>cardDragStop</li>
            <li>cardDragStart</li>
            <li>cardDrag</li>
            <li>queryCellInfo</li>
        </ul>
    </div>

   @(Html.EJ().DropDownList("selectControls_input")
          .TargetID("ddl")
           .ClientSideEvents(eve => { eve.Change("evtpropscheckedevent").PopupShown("adjustpopupposition"); })
          .ShowCheckbox()
          .CheckAll()
)
}
@section ScriptSection{
    <script type="text/javascript">
        //function evtpropscheckedevent(args) {
        //    var kanbanObj = $("#Events").data("ejKanban");
        //    if (args.isChecked && kanbanObj != undefined)
        //        kanbanObj.option(args.value, args.value);
        //    else
        //        kanbanObj.option(args.value, null);
        //}
        function evtpropscheckedevent(args) {
            var kanbanObj = $("#Kanban").data("ejKanban");
            if (args.isChecked && kanbanObj != undefined) {
                switch (args.value) {
                    case "create":
                        kanbanObj.option(args.value, "create");
                        break;
                    case "actionBegin":
                        kanbanObj.option(args.value, "actionBegin");
                        break;
                    case "actionComplete":
                        kanbanObj.option(args.value, "actionComplete");
                        break;
                    case "beginEdit":
                        kanbanObj.option(args.value, "beginEdit");
                        break;
                    case "endEdit":
                        kanbanObj.option(args.value, "endEdit");
                        break;
                    case "endAdd":
                        kanbanObj.option(args.value, "endAdd");
                        break;
                    case "cardClick":
                        kanbanObj.option(args.value, "cardClick");
                        break;
                    case "beforeCardSelect":
                        kanbanObj.option(args.value, "beforeCardSelect");
                        break;
                    case "cardSelect":
                        kanbanObj.option(args.value, "cardSelect");
                        break;
                    case "cardDoubleClick":
                        kanbanObj.option(args.value, "cardDoubleClick");
                        break;
                    case "cardDrop":
                        kanbanObj.option(args.value, "cardDrop");
                        break;
                    case "cardDragStop":
                        kanbanObj.option(args.value, "cardDragStop");
                        break;
                    case "cardDragStart":
                        kanbanObj.option(args.value, "cardDragStart");
                        break;
                    case "cardDrag":
                        kanbanObj.option(args.value, "cardDrag");
                        break;
                    case "queryCellInfo":
                        kanbanObj.option(args.value, "queryCellInfo");
                        break;
                }
            } else kanbanObj.option(args.value, '');
        }
        function create(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>create</span> event called");
        }
        function actionBegin(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>actionBegin</span> event called");
        }
        function actionComplete(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>actionComplete</span> event called");
        }
        function beginEdit(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>beginEdit</span> event called");
        }
        function endEdit(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>endEdit</span> event called");
        }
        function endAdd(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>endAdd</span> event called");
        }
        function cardClick(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>cardClick</span> event called");
        }
        function beforeCardSelect(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>beforeCardSelect</span> event called");
        }
        function cardSelect(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>cardSelect</span> event called");
        }
        function cardDoubleClick(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>cardDoubleClick</span> event called");
        }
        function cardDrop(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>cardDrop</span> event called");
        }
        function cardDragStop(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>cardDragStop</span> event called");
        }
        function cardDragStart(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>cardDragStart</span> event called");
        }
        function cardDrag(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>cardDrag</span> event called");
        }
        function queryCellInfo(args) {
            jQuery.addEventLog("Kanban <span class='eventTitle'>queryCellInfo</span> event called");
        }
        function onClear() {
            $("#EventLog").html("");
        }
    </script>
}


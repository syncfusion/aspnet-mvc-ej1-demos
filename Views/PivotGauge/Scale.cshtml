@section SampleHeading{
    <span class="sampleName">PivotGauge-Scale Options-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo for Syncfusion Essential JS1 for ASP.NET MVC pivot gauge control describes the various properties to customize scale">
}
@using Syncfusion.JavaScript;
@section StyleSection{
     <style>
       
        .row .cols-prop-area {
            min-height: 220px !important;
        }
        .drop-down {
            line-height:20px !important;
        }         
        .row .cols-sample-area {
            width:67% !important;
            height:460px;
            overflow: auto;
        }
        .row .cols-prop-area {
        width:31%;     
        }  
        #scaledirection_wrapper {
        width: 136px !important;
        }
        #PivotGauge1 {
            height: 360px;
            width: 100%;
            float: left;
            overflow: auto;
        }  
        .circulardarkgradient, .circularlightgradient
        {
            width: 360px;
            position: relative;
        }
           #CodeViewTab ul > li:first-child + li{
            display:none;
        }
    </style>
}
<script>
    var directions = [{ option: "Clockwise", value: "clockwise" }, { option: "CounterClockwise", value: "counterClockwise"}];
    $(function () {
        $('#scaledirection').ejDropDownList({
            dataSource: directions,
            fields: { text: "option", value: "value" },
            select: "onchange", width: "110px", selectedIndices : [0]
        });
    });
    function onchange(args) {
        pivotGauges = $("#PivotGauge1").find(".e-circulargauge");
        if (args.id == "scalesize") {
            $.each(pivotGauges, function (index, value) {
                gaugeval = $("#" + value.id).data("ejCircularGauge");
                for (var i = 0; i <= 2; i++)
                    gaugeval.setScaleBarSize(0, args.value);
            });

        }
        else if (args.id == "scaleradius") {
            $.each(pivotGauges, function (index, value) {
                gaugeval = $("#" + value.id).data("ejCircularGauge");
                for (var i = 0; i <= 2; i++)
                    gaugeval.setScaleRadius(0, args.value);
            });
        }
        else if (args.id == "borderwidth") {
            $.each(pivotGauges, function (index, value) {
                gaugeval = $("#" + value.id).data("ejCircularGauge");
                for (var i = 0; i <= 2; i++)
                    gaugeval.setScaleBorderWidth(0, args.value);
            });
        }
        else if (args.text) {
            $.each(pivotGauges, function (index, value) {
                gaugeval = $("#" + value.id).data("ejCircularGauge");
                for (var i = 0; i <= 2; i++)
                    gaugeval.setScaleDirection(0, args.value);
            });
        }
    }
</script>
@section ScriptReferenceSection{
<script src="@Url.Content("~/Scripts/excanvas.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/ej.web.all.min.js")" type="text/javascript"></script>
}
@section ScriptSection{
    <script type="text/javascript">
        $(function () {
            $("#sampleProperties").ejPropertiesPanel();
        });
        function onLoad(args) {
            args.model.dataSource.rows[0].filterItems = { values: ["[Date].[Fiscal].[Fiscal Year].&amp;[2004]"] };
        }
</script>}
@section ControlsSection{
@Html.EJ().Pivot().PivotGauge("PivotGauge1").DataSource(dataSource => dataSource.Rows(rows => { rows.FieldName("[Date].[Fiscal]").Add(); }).Columns(columns => { columns.FieldName("[Customer].[Customer Geography]").Add(); }).Values(values => { values.Measures(measures => { measures.FieldName("[Measures].[Internet Sales Amount]").Add(); measures.FieldName("[Measures].[Internet Revenue Status]").Add(); measures.FieldName("[Measures].[Internet Revenue Trend]").Add(); measures.FieldName("[Measures].[Internet Revenue Goal]").Add(); }).Axis(AxisName.Column).Add(); })
    .Data("//bi.syncfusion.com/olap/msmdpump.dll").Catalog("Adventure Works DW 2008 SE").Cube("Adventure Works")).IsResponsive(true).BackgroundColor("transparent").ClientSideEvents(oCli => { oCli.RenderSuccess("loadPivotGaugeTheme"); oCli.Load("onLoad"); }).EnableTooltip(true).Scales(scale =>
{
    scale.ShowRanges(true).Radius(150).ShowScaleBar(true).Size(1).Border(bor => bor.Width(0.5)).ShowIndicators(true).ShowLabels(true).
        Pointers(pointer =>
        {
            pointer.ShowBackNeedle(true).BackNeedleLength(20).Length(120).Width(7).Add();
			pointer.Type(PointerType.Marker).DistanceFromScale(5).Placement(PointerPlacement.Center).BackgroundColor("#29A4D9").Length(25).Width(15).MarkerType(MarkerType.Diamond).Add();
        }).
    Ticks(ticks =>
    {
        ticks.Type(CircularTickTypes.Major).DistanceFromScale(2).Height(16).Width(1).Color("#8c8c8c").Add();
        ticks.Type(CircularTickTypes.Minor).Height(6).Width(1).DistanceFromScale(2).Color("#8c8c8c").Add();
    })
    .Labels(labels => { labels.Color("#8c8c8c").Add(); })
    .Ranges(ranges =>
    {
        ranges.DistanceFromScale(-5).BackgroundColor("#fc0606").Border(bor => bor.Color("#fc0606")).Add();
        ranges.DistanceFromScale(-5).Add();
    })
    .CustomLabels(customLabel =>
    {
        customLabel.Position(location => location.X(180).Y(290)).Font(font => font.Size("10px").FontFamily("Segoe UI").FontStyle("Normal")).Color("#666666").Add();
        customLabel.Position(location => location.X(180).Y(320)).Font(font => font.Size("10px").FontFamily("Segoe UI").FontStyle("Normal")).Color("#666666").Add();
        customLabel.Position(location => location.X(180).Y(150)).Font(font => font.Size("12px").FontFamily("Segoe UI").FontStyle("Normal")).Color("#666666").Add();
    }).Add();
}).ClientSideEvents(oCli => { oCli.RenderSuccess("loadPivotGaugeTheme"); }).IsResponsive(true).LabelFormatSettings(labelFormatSettings => labelFormatSettings.DecimalPlaces(2))
}
@section PropertiesSection{
    <div>
                <div class="row">
                    <div class="col-md-3">
                        ScaleBar Size
                    </div>
                    <div class="col-md-3 aligntop">
                        @Html.EJ().Slider("scalesize").SliderType(SlideType.MinRange).Value("1").Height("10").MinValue(0).MaxValue(10).Width("110").EnableAnimation(true).ClientSideEvents(events => { events.Change("onchange"); })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        Scale Radius
                    </div>
                    <div class="col-md-3 aligntop">
                        @Html.EJ().Slider("scaleradius").SliderType(SlideType.MinRange).Value("170").Height("10").Width("110").MinValue(120).MaxValue(170).EnableAnimation(true).ClientSideEvents(events => { events.Change("onchange").Slide("onchange"); })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        Border Width
                    </div>
                    <div class="col-md-3 aligntop">
                        @Html.EJ().Slider("borderwidth").SliderType(SlideType.MinRange).Value("0.5").Height("10").MinValue(0).MaxValue(5).Width("110").EnableAnimation(true).ClientSideEvents(events => { events.Slide("onchange").Change("onchange"); })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3" style="line-height:2">
                        Scale Direction
                    </div>
                    <div class="col-md-3">
                        <input type="text" class="drop-down" id="scaledirection" />
                    </div>
                </div>          
        </div>
}
    



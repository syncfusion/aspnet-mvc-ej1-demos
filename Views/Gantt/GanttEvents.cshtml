@section MetaTags{
   <meta name="description" content="This example illustrates the client-side events available in the Syncfusion Gantt chart control for various user interactions.">
}
@section SampleHeading{<span class="sampleName">Gantt-Events-ASP.NET MVC-SYNCFUSION</span>}


@section ControlsSection{
    <div id="ganttsample4" style="width: 100%; height: 450px;">
        @(Html.EJ().Gantt("ganttsample4")
                      .TaskIdMapping("Id")
                      .TaskNameMapping("Name")
                      .StartDateMapping("StartDate")
                      .DurationMapping("Duration")
                      .ProgressMapping("PercentDone")
                      .ScheduleStartDate("02/23/2017")
                      .ScheduleEndDate("03/30/2017")
                      .HighlightWeekends(true)
                      .ChildMapping("Children")
                      .AllowGanttChartEditing(true)
                      .AllowSelection(true)
                      .TreeColumnIndex(1)
                      .AllowColumnResize(true)
                      .IsResponsive(true)
                      .EnableContextMenu(true)
                      .AllowDragAndDrop(true)
                      .ToolbarSettings(toolbar =>
                      {
                        toolbar.ShowToolbar(true);
                        toolbar.ToolbarItems(new List<GanttToolBarItems>()
                        {
                           GanttToolBarItems.Add,
                           GanttToolBarItems.Edit,
                           GanttToolBarItems.Delete,
                           GanttToolBarItems.Update,
                           GanttToolBarItems.Cancel,
                           GanttToolBarItems.Indent,
                           GanttToolBarItems.Outdent,
                           GanttToolBarItems.ExpandAll,
                           GanttToolBarItems.CollapseAll,
                        });
                      })
                      .ClientSideEvents(eve =>
                      {
                          eve.Create("create");
                          eve.Load("load");
                          eve.ContextMenuOpen("contextMenuOpen");
                          eve.RowDrag("rowDrag");
                          eve.RowDragStart("rowDragStart");
                          eve.RowDragStop("rowDragStop");
                          eve.TaskbarClick("taskbarClick");
                          eve.ActionBegin("actionBegin");
                          eve.ActionComplete("actionComplete");
                          eve.BeginEdit("beginEdit");
                          eve.EndEdit("endEdit");
                          eve.QueryCellInfo("queryCellInfo");
                          eve.RowDataBound("rowDataBound");
                          eve.RowSelecting("rowSelecting");
                          eve.RowSelected("rowSelected");
                          eve.TaskbarEditing("taskbarEditing");
                          eve.TaskbarEdited("taskbarEdited");
                          eve.SplitterResized("splitterResized");
                          eve.QueryTaskbarInfo("queryTaskbarInfo");
                          eve.Collapsing("collapsing");
                          eve.Collapsed("collapsed");
                          eve.Expanding("expanding");
                          eve.Expanded("expanded");
                          eve.ToolbarClick("toolbarClick");

                      })
                      .EditSettings(edit =>
                      {
                         edit.AllowEditing(true);
                         edit.AllowAdding(true);
                         edit.AllowDeleting(true);
                         edit.AllowIndent(true);
                         edit.EditMode("cellEditing");

                      })
                     .Datasource(ViewBag.datasource)
        )
    </div>
}

@section EventsDropDown{
    <div id="ddl">
        <ul>
            <li>load</li>
            <li>contextMenuOpen</li>
            <li>rowDrag</li>
            <li>rowDragStart</li>
            <li>rowDragStop</li>
            <li>taskbarClick</li>
            <li>create</li>
            <li>actionBegin</li>
            <li>actionComplete</li>
            <li>queryCellInfo</li>
            <li>beginEdit</li>
            <li>endEdit</li>
            <li>rowDataBound</li>
            <li>rowSelecting</li>
            <li>rowSelected</li>
            <li>taskbarEditing</li>
            <li>taskbarEdited</li>
            <li>splitterResized</li>
            <li>queryTaskbarInfo</li>
            <li>collapsing</li>
            <li>collapsed</li>
            <li>expanding</li>
            <li>expanded</li>
            <li>toolbarClick</li>
        </ul>
    </div>
    @(Html.EJ().DropDownList("selectControls_input")
          .TargetID("ddl")
          .ClientSideEvents(eve => { eve.Change("evtpropscheckedevent"); })
          .ShowCheckbox()
          .CheckAll()
    )
}

@section ScriptSection{
    <script type="text/javascript">

        function evtpropscheckedevent(args) {
            var ganttObj = $("#ganttsample4").data("ejGantt");
            var value = args.value;
            if (args.isChecked && ganttObj != undefined) {
                switch (args.value) {
                    case "load":
                        ganttObj.option(value, "load");
                        break;
                    case "contextMenuOpen":
                        ganttObj.option(value, "contextMenuOpen");
                        break;
                    case "rowDrag":
                        ganttObj.option(value, "rowDrag");
                        break;
                    case "rowDragStart":
                        ganttObj.option(value, "rowDragStart");
                        break;
                    case "rowDragStop":
                        ganttObj.option(value, "rowDragStop");
                        break;
                    case "taskbarClick":
                        ganttObj.option(value, "taskbarClick");
                        break;
                    case "create":
                        ganttObj.option(value, "create");
                        break;
                    case "actionBegin":
                        ganttObj.option(value, "actionBegin");
                        break;
                    case "actionComplete":
                        ganttObj.option(value, "actionComplete");
                        break;
                    case "queryCellInfo":
                        ganttObj.option(value, "queryCellInfo");
                        break;
                    case "beginEdit":
                        ganttObj.option(value, "beginEdit");
                        break;
                    case "endEdit":
                        ganttObj.option(value, "endEdit");
                        break;
                    case "rowDataBound":
                        ganttObj.option(value, "rowDataBound");
                        break;
                    case "rowSelecting":
                        ganttObj.option(value, "rowSelecting");
                        break;
                    case "rowSelected":
                        ganttObj.option(value, "rowSelected");
                        break;
                    case "taskbarEditing":
                        ganttObj.option(value, "taskbarEditing");
                        break;
                    case "taskbarEdited":
                        ganttObj.option(value, "taskbarEdited");
                        break;
                    case "splitterResized":
                        ganttObj.option(value, "splitterResized");
                        break;
                    case "queryTaskbarInfo":
                        ganttObj.option(value, "queryTaskbarInfo");
                        break;
                    case "collapsing":
                        ganttObj.option(value, "collapsing");
                        break;

                    case "collapsed":
                        ganttObj.option(value, "collapsed");
                        break;

                    case "expanding":
                        ganttObj.option(value, "expanding");
                        break;

                    case "expanded":
                        ganttObj.option(value, "expanded");
                        break;
                    case "toolbarClick":
                        ganttObj.option(value, "toolbarClick");
                        break;

                }
            } else ganttObj.option(value, "");
        }

        function create(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>create</span> event called");
        }

        function actionBegin(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>actionBegin</span> event called");
        }

        function actionComplete(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>actionComplete</span> event called");
        }

        function beginEdit(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>beginEdit</span> event called");
        }

        function endEdit(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>endEdit</span> event called");
        }

        function queryCellInfo(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>queryCellInfo</span> event called");
        }

        function queryTaskbarInfo(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>queryTaskbarInfo</span> event called");
        }

        function taskbarEditing(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>taskbarEditing</span> event called");
        }

        function taskbarEdited(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>taskbarEdited</span> event called");
        }
        function splitterResized(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>splitterResized</span> event called");
        }
        function rowDataBound(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>rowDataBound</span> event called");
        }

        function rowSelecting(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>rowSelecting</span> event called");
        }

        function rowSelected(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>rowSelected</span> event called");
        }

        function collapsing(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>collapsing</span> event called");
        }

        function collapsed(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>collapsed</span> event called");
        }

        function expanding(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>expanding</span> event called");
        }

        function expanded(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>expanded</span> event called");
        }

        function toolbarClick(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>toolbarClick</span> event called");
        }
        function load(args) {
            var columns = this.getColumns();
            columns[0].width = 60;
            jQuery.addEventLog("Gantt <span class='eventTitle'>load</span> event called");
        }
        function contextMenuOpen(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>contextMenuOpen</span> event called");
        }
        function rowDrag(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>rowDrag</span> event called");
        }
        function rowDragStart(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>rowDragStart</span> event called");
        }
        function rowDragStop(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>rowDragStop</span> event called");
        }
        function taskbarClick(args) {
            jQuery.addEventLog("Gantt <span class='eventTitle'>taskbarClick</span> event called");
        }
        function onClear() {
            $("#EventLog").html("");
        }
    </script>

}


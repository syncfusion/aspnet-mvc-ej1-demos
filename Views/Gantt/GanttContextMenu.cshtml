@section MetaTags{
   <meta name="description" content="This example illustrates how to display custom menu items in the context menu in the Syncfusion Gantt chart control.">
}
@section SampleHeading{<span class="sampleName">Gantt-Custom Context Menu-ASP.NET MVC-SYNCFUSION</span>}

@section ScriptReferenceSection
{
  <style>
         .e-expandIcon:before {
             content: "\e703";
         }
         .e-collapseIcon:before {
             content: "\e707";
         }
         
        .e-aboveIcon:before {
            content: "\e7e5";
        }

        .e-belowIcon:before {
            content: "\e7e4";
        }

        .e-topIcon:before {
            content: "\e7e2";
        }

        .e-bottomIcon:before {
            content: "\e7e1";
        }

        .e-childIcon:before {
            content: "\e7e3";
        }
    </style>
}

@section ControlsSection{
        @(Html.EJ().Gantt("ganttsample15")
                   .TaskIdMapping("Id")
                   .TaskNameMapping("Name")
                   .StartDateMapping("StartDate")
                   .DurationMapping("Duration")
                   .ProgressMapping("PercentDone")
                   .ScheduleStartDate("02/23/2017")
                   .ScheduleEndDate("03/30/2017")
                   .HighlightWeekends(true)
                   .ChildMapping("Children")
                   .AllowGanttChartEditing(true)
                   .TreeColumnIndex(1)
                   .IsResponsive(true)
                   .ClientSideEvents(ev=> ev.ContextMenuOpen("contextMenuOpen").Load("load"))
                   .EnableContextMenu(true)
                   .EditSettings(edit =>
                   {
                       edit.AllowEditing(true);
                       edit.AllowAdding(true);
                       edit.AllowDeleting(true);
                       edit.AllowIndent(true);
                       edit.EditMode("cellEditing");

                   })
                   .Datasource(ViewBag.datasource)
        )
}
@section ScriptSection{
   
    <script>
        function contextMenuOpen(args) {

            var isExpandable = true, isCollapsable = true, data;
            data = args.item;
            if (data && data.hasChildRecords) {
                if (data.expanded)
                    isExpandable = false;
                else
                    isCollapsable = false;
            } else {
                isExpandable = false;
                isCollapsable = false;
            }
            if (data) {
                var aboveMenu = args.contextMenuItems.filter(function (val) { return val.menuId == "Above" }),
              belowMenu = args.contextMenuItems.filter(function (val) { return val.menuId == "Below" });
                aboveMenu[0].iconClass = "e-aboveIcon";
                belowMenu[0].iconClass = "e-belowIcon";
                var contextMenuItems = [{
                    headerText: "Top",
                    eventHandler: customMenuAddHandler,
                    menuId: "Top",
                    parentMenuId: "Add",
                    iconClass: "e-topIcon"
                }, {
                    headerText: "Bottom",
                    menuId: "Bottom",
                    parentMenuId: "Add",
                    eventHandler: customMenuAddHandler,
                    iconClass: "e-bottomIcon"
                },
                {
                    headerText: "Child",
                    menuId: "Child",
                    parentMenuId: "Add",
                    eventHandler: customMenuAddHandler,
                    iconClass: "e-childIcon"
                },
                 {
                     headerText: "Expand",
                     menuId: "Expand",
                     eventHandler: customMenuExpandCollapseHandler,
                     iconClass: "e-expandIcon",
                     disable: !isExpandable
                 },
                 {
                     headerText: "Collapse",
                     menuId: "Collapse",
                     eventHandler: customMenuExpandCollapseHandler,
                     iconClass: "e-collapseIcon",
                     disable: !isCollapsable
                 }
                ];
                args.contextMenuItems.push.apply(args.contextMenuItems, contextMenuItems);
            }
        }

        function customMenuAddHandler(args) {
            var currentMenuId = args.menuId,
                tempData = args.data && $.extend({}, args.data.item), rowPosition;
            if (tempData)
                delete tempData[this.model.childMapping];

            if (currentMenuId == "Top") {
                rowPosition = ej.TreeGrid.RowPosition.Top;
            }
            else if (currentMenuId == "Bottom") {
                rowPosition = ej.TreeGrid.RowPosition.Bottom;
            }
            else if (currentMenuId == "Child") {
                rowPosition = ej.TreeGrid.RowPosition.Child;
            }
            this.addRecord(tempData, rowPosition);
        }
        function customMenuExpandCollapseHandler(args) {
            this.expandCollapseRecord(args.data.taskId);
        }
        function load(args) {
            var columns = this.getColumns();
            columns[0].width = 60;
        }
    </script>
    
}


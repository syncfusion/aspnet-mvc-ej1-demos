@using Syncfusion.JavaScript.Models
@section SampleHeading{<span class="sampleName">Spreadsheet-Collaborative Editing-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
   <meta name="description" content="This demo shows how to work with SignalR in the Syncfusion ASP.NET MVC Spreadsheet control">
}

<link href="@Url.Content("~/Content/Samples/SpreadsheetStyles.css")" rel="stylesheet" />
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>

}

@section ControlsSection{
    @(Html.EJ().Spreadsheet<object>("Spreadsheet")
    .AllowFormulaBar(false)
    .ShowRibbon(false)
    .EnableContextMenu(false)
    .ColumnCount(7)
    .ColumnWidth(160)
    .AllowInsert(false)
    .ScrollSettings(scroll => { scroll.Height(450).AllowVirtualScrolling(false).ScrollMode(SpreadsheetScrollMode.Normal); })
            .Sheets(sheet =>
            {
                sheet.RangeSettings(range =>
                {
                    range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
                }).Add();
            })
        
    .ClientSideEvents( events => { events.ActionComplete("actionComplete").LoadComplete("loadComplete"); })
    )
}
<div id="fontsizeprop">
    <ul>
        <li value="8pt">8</li>
        <li value="11pt">11</li>
        <li value="14pt">14</li>
        <li value="18pt">18</li>
        <li value="36pt">36</li>
        <li value="72pt">72</li>
    </ul>
</div>
<div id="fontfamilyprop">
    <ul>
        <li value="Arial">Arial</li>
        <li value="Calibri">Calibri</li>
        <li value="Cambria">Cambria</li>
        <li value="Courier">Courier</li>
        <li value="Tahoma">Tahoma</li>
    </ul>
</div>
<div id="textalignprop">
    <ul>
        <li value="left">Left</li>
        <li value="center">Center</li>
        <li value="right">Right</li>
    </ul>
</div>
@section PropertiesSection{
       <div id="sampleproperty">
         <div class="row">
            <div class="row">
                        <div class="col-md-6 lineheight">Font Size:</div>
                        <div class="col-md-6">
                             @Html.EJ().DropDownList("fontsize").Width("120px").TargetID("fontsizeprop").ClientSideEvents(evt => evt.Change("onChange")).SelectedItemIndex(1)
                        </div>
            </div>
            <div class="row">
                        <div class="col-md-6 lineheight">Font Family:</div>
                        <div class="col-md-6">
                             @Html.EJ().DropDownList("fontfamily").Width("120px").TargetID("fontfamilyprop").ClientSideEvents(evt => evt.Change("onChange")).SelectedItemIndex(1)
                        </div>
            </div>
            <div class="row">
                        <div class="col-md-6 lineheight">Text Align:</div>
                        <div class="col-md-6">
                                @Html.EJ().DropDownList("textalign").Width("120px").TargetID("textalignprop").ClientSideEvents(evt => evt.Change("onChange")).SelectedItemIndex(0)
                        </div>
                    </div>
					 <div class="row">
                        <div class="col-md-6 lineheight labelWidth">Font Color:</div>
                        <div class="col-md-6 colorWidth">
                             @Html.EJ().ColorPicker("fontcolor").ClientSideEvents(evt => evt.Change("onChange").Select("onChange")).Value("#278787").ShowApplyCancel(false).ShowSwitcher(false)
                        </div>
                    </div>
					 <div class="row">
                        <div class="col-md-6 lineheight labelWidth">BackGround Color:</div>
                        <div class="col-md-6 colorWidth">
                             @Html.EJ().ColorPicker("bgcolor").ClientSideEvents(evt => evt.Change("onChange").Select("onChange")).Value("#278787").ShowApplyCancel(false).ShowSwitcher(false)
                        </div>
                    </div>
				    <div class="heading actlog">
                        <span>Active Logs</span>
                    </div>
             <div>
                   <strong>Recent Change Logs (Your User Name : <span id="userName">user@(new Random().Next(1000, 9999))</span>)</strong><br />
                    <br />
                    <ul id="log" style="padding-left: 17px;"></ul>
                    </div>
        </div>
            </div>
}

<script src="@Url.Content("~/Scripts/jquery.signalR-1.1.4.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/signalr/hubs")" type="text/javascript"></script>
<script type="text/javascript">
    $(function () {
        $("#sampleproperty").ejPropertiesPanel();
        window.signal = $.connection.spreadsheetHub;
        window.signal.client.modify = function (userId, range, action, data, sheetIndex) {
            var xlObj = $("#Spreadsheet").data("ejSpreadsheet");
            window.isSuccess = true;
            if (action === "edit") {
                var index = xlObj.getRangeIndices(range);
                xlObj.XLEdit.updateCell({ rowIndex: index[0], colIndex: index[1] }, data);
                $("#log").append("<li>" + ej.format(new Date(), "hh:mm:ss") + " : " + userId + " has " + action + " in " + range + "</li>");
            }
            else if (action === "cell-format") {
                xlObj.XLFormat.format({ style: xlObj.XLFormat.getFormatFromHashCode(data) }, range);
                $("#log").append("<li>" + ej.format(new Date(), "hh:mm:ss") + " : " + userId + " has applied " + action + " in " + range + "</li>");
            }
            xlObj.performSelection(range);
        };
        $.connection.hub.start().done(function () {
            window.actionComplete = function (args) {
                if (window.isSuccess) {
                    window.isSuccess = false;
                    return;
                }
               var xlObj = $("#Spreadsheet").data("ejSpreadsheet");
                if (args.reqType == "edit")
                    window.signal.server.modify($("#userName").text(), xlObj.getAlphaRange(args.rowIndex, args.colIndex, args.rowIndex, args.colIndex), args.reqType, args.cValue, args.sheetIndex);
                else if (args.reqType == "cell-format")
                    window.signal.server.modify($("#userName").text(), xlObj.getAlphaRange(args.range[0], args.range[1], args.range[2], args.range[3]), args.reqType, args.selectedCell[0].className, args.sheetIndex);
            }
        });
    });
    function loadComplete(args) {
        this.setWidthToColumns([110, 190, 260, 160]);
        this.XLFormat.format({ "style": { "font-weight": "bold" } }, "A1:E1");
        $("#log").height(this.element.height() - $(".cols-prop-area").height() + 70);
    }

    function onChange(args) {
        var xlObj = $("#Spreadsheet").data("ejSpreadsheet"), id = this.element[0].id, range = xlObj.getSheet(xlObj.getActiveSheetIndex()).selectedRange;
        switch (id) {
            case "fontsize":
                xlObj.XLFormat.format({ style: { "font-size": args.selectedValue } }, range);
                break;
            case "fontfamily":
                xlObj.XLFormat.format({ style: { "font-family": args.selectedValue } }, range);
                break;
            case "textalign":
                xlObj.XLFormat.format({ style: { "text-align": args.selectedValue } }, range);
                break;
            case "fontcolor":
                xlObj.XLFormat.format({ style: { "color": args.value } }, range);
                break;
            case "bgcolor":
                xlObj.XLFormat.format({ style: { "background-color": args.value } }, range);
                break;
        }
    }
		
</script>
@section StyleSection{
    <style type="text/css">
    .lineheight {
            line-height: 30px;
        }

        .propheight {
            max-height: 188px;
        }

        .labelWidth {
            min-width: 65%;
        }

        .colorWidth {
            max-width: 10%;
        }

        .actlog {
            border-top: 1px solid #D9DEDD;
        }
        </style>
    }


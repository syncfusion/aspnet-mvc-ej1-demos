@section SampleHeading{<span class="sampleName">Spreadsheet-Chart-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
   <meta name="description" content="This demo shows a graphical representation of data using Syncfusion ASP.NET MVC Spreadsheet control">
}

<link href="@Url.Content("~/Content/Samples/SpreadsheetStyles.css")" rel="stylesheet" />
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
}
@section ControlsSection{
    @(Html.EJ().Spreadsheet<MarkDetail>("Spreadsheet")
    .SheetCount(9)
    .RowCount(32)
    .AllowFormulaBar(false)
    .ShowRibbon(false)
    .ScrollSettings(scroll =>
    {
        scroll.Height(450);
    })
    .PageSettings(setting => setting.PageCount(9))
    .Sheets(sheet =>
    {
        sheet.RangeSettings(range => {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("2D Column").Add();
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("3D Column").Add();
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("2D Bar").Add();
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("3D Bar").Add();
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("Radar").Add();
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("Line").Add();
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("Area").Add();
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("Pie").Add();
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).Add();
        }).SheetName("Scatter").Add();
    })
    .ClientSideEvents(events => events.LoadComplete("loadComplete").ActionBegin("actionBegin"))
    )
}
@section ScriptSection{
    <script type="text/javascript">

        function loadComplete(args) {
            var offsetTop, xlFormat = this.XLFormat, xlEdit = this.XLEdit, xlChart = this.XLChart;
            this.setWidthToColumns([{ colIndex: 0, width: 90 }, { colIndex: 1, width: 85 }, { colIndex: 2, width: 100 }, { colIndex: 11, width: 70 }]);
            this.mergeCells("F16:G16", true);
            xlEdit.updateValue("F16", "2D Column");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "A1:C1");
            xlChart.createChart("A1:B6", { type: "column", enable3D: false, marker: false, top: 40, left: 260, width: 340, height: 250 });
            this.gotoPage(2, false);
            this.setWidthToColumns([{ colIndex: 0, width: 90 }, { colIndex: 1, width: 85 }, { colIndex: 2, width: 100 }, { colIndex: 11, width: 70 }]);
            this.mergeCells("F16:H16", true);
            xlEdit.updateValue("F16", "3D Column");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "A1:C1");
            xlChart.createChart("A1:B6", { type: "column", enable3D: true, marker: { visible: false }, top: 40, left: 260, width: 340, height: 250 });
            this.gotoPage(3, false);
            this.setWidthToColumns([{ colIndex: 0, width: 90 }, { colIndex: 1, width: 85 }, { colIndex: 2, width: 100 }, { colIndex: 11, width: 70 }]);
            this.mergeCells("F16:G16", true);
            xlEdit.updateValue("F16", "2D Bar");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "A1:C1");
            xlChart.createChart("A1:B6", { type: "bar", enable3D: false, marker: { visible: false }, top: 40, left: 260, width: 340, height: 250 });
            this.gotoPage(4, false);
            this.setWidthToColumns([{ colIndex: 0, width: 90 }, { colIndex: 1, width: 85 }, { colIndex: 2, width: 100 }, { colIndex: 11, width: 70 }]);
            this.mergeCells("F16:G16", true);
            xlEdit.updateValue("F16", "3D Bar");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "A1:C1");
            xlChart.createChart("A1:B6", { type: "bar", enable3D: true, marker: { visible: false }, top: 40, left: 260, width: 340, height: 250 });
            this.performSelection("A1");
            this.gotoPage(5, false);
            this.setWidthToColumns([{ colIndex: 0, width: 90 }, { colIndex: 1, width: 85 }, { colIndex: 2, width: 100 }, { colIndex: 11, width: 70 }]);
            this.mergeCells("F16:G16", true);
            xlEdit.updateValue("F16", "Radar with Markers");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold", "font-size": "12px" } }, "A1:C1");
            xlChart.createChart("A1:B6", { type: "radar", enable3D: false, marker: { visible: true }, top: 40, left: 260, width: 340, height: 250 });
            this.gotoPage(6, false);
            this.setWidthToColumns([{ colIndex: 0, width: 90 }, { colIndex: 1, width: 85 }, { colIndex: 2, width: 100 }, { colIndex: 11, width: 70 }]);
            this.mergeCells("F16:G16", true);
            xlEdit.updateValue("F16", "Line with Markers");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "A1:C1");
            xlChart.createChart("A1:B6", { type: "line", enable3D: false, marker: { visible: true }, top: 40, left: 260, width: 340, height: 250 });
            this.gotoPage(7, false);
            this.setWidthToColumns([{ colIndex: 0, width: 90 }, { colIndex: 1, width: 85 }, { colIndex: 2, width: 100 }, { colIndex: 7, width: 90 }, { colIndex: 11, width: 70 }]);
            this.mergeCells("F16:G16", true);
            xlEdit.updateValue("F16", "2D Area");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "A1:C1");
            offsetTop = (ej.browserInfo.name === "mozilla") ? 341 : 325;
            xlChart.createChart("A1:B6", { type: "Area", enable3D: false, marker: { visible: false }, top: 40, left: 260, width: 340, height: 250 });
            this.gotoPage(8, false);
            this.setWidthToColumns([{ colIndex: 0, width: 90 }, { colIndex: 1, width: 85 }, { colIndex: 2, width: 100 }, { colIndex: 7, width: 90 }, { colIndex: 11, width: 70 }]);
            this.mergeCells("F16:G16", true);
            xlEdit.updateValue("F16", "3D Pie");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "A1:C1");
            xlChart.createChart("A1:C6", { type: "pie", enable3D: true, marker: { visible: false }, top: 40, left: 260, width: 360, height: 250 });
            this.gotoPage(9, false);
            this.setWidthToColumns([90, 85, 100]);
            this.mergeCells("F16:G16", true);
            xlEdit.updateValue("F16", "Scatter");
            xlFormat.format({ "type": "currency" }, "B2:B21");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "F16:F16");
            xlFormat.format({ "style": { "font-weight": "bold" } }, "A1:C1");
            xlChart.createChart("A1:B6", { type: "scatter", enable3D: false, marker: { visible: false }, top: 40, left: 260, width: 340, height: 250 });
            this.gotoPage(1, false);
            this.performSelection("A1");
            this.setSheetFocus();
        }

        function actionBegin(args) {
            if (args.reqType === "gotoSheet" && !args.newSheet) {
                var charts, len, i = 0, xlObj = $("#Spreadsheet").data("ejSpreadsheet");
                charts = xlObj.getSheetElement(args.gotoIndex).find(".e-datavisualization-chart");
                len = charts.length;
                while (i < len) {
                    $(charts[i]).ejChart("redraw");
                    i++;
                }
            }
        }

    </script>
}


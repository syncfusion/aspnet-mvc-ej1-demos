@section SampleHeading{<span class="sampleName">Spreadsheet-Import Export-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
   <meta name="description" content="This demo shows importing and exporting the data in Excel and PDF formats using Syncfusion ASP.NET MVC Spreadsheet control.">
}

<link href="@Url.Content("~/Content/Samples/SpreadsheetStyles.css")" rel="stylesheet" />
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
}
@section ControlsSection{
    @(Html.EJ().Spreadsheet<object>("Spreadsheet")
    .AllowFormulaBar(false) 
    .ScrollSettings(scroll =>
    {
        scroll.Height(540);
    })
    .ImportSettings(import =>
    {
        import.ImportMapper("Import");
    })
    .ExportSettings(export =>
    {
        export.ExcelUrl("ExcelExport");
        export.CsvUrl("CsvExport");
        export.PdfUrl("PdfExport");
    })
    .Sheets(sheet =>
    {
        sheet.RangeSettings(range =>
        {
            range.Datasource((IEnumerable<object>)ViewBag.Datasource).StartCell("A3").Add();
        }).SheetName("Import Export").Add();
    })
    .ClientSideEvents(events => events.LoadComplete("loadComplete").OpenFailure("openfailure"))
    )
}
@section ScriptSection{
    <script type="text/javascript">

        function loadComplete(args) {
            var formatObj, xlFormat = this.XLFormat;
            if (!this.model.isImport) {
                formatObj = { header: true, formatName: "TableStyleLight1", name: "Table1", format: { contentBorder: { border: { bottom: "1px solid #000000" } }, contentLayout: [{ "background-color": "#D9D9D9", color: "#000000" }, { color: "#000000" }], headerLayout: { "font-weight": "bold", color: "#000000", border: { top: "1px solid #000000", bottom: "1px solid #000000" } } } };
                this.mergeCells("A1:F2", true);
                this.XLEdit.updateValue("A1", "SHIPMENT DETAIL ANALYSIS");
                this.setWidthToColumns([ 113, 142, 142, 203, 162, 183 ]);
                xlFormat.format({ "style": { "font-weight": "bold", "vertical-align": "middle", "text-align": "center" } }, "A1");
                xlFormat.format({ "style": { "font-weight": "bold" } }, "A3:G3");
                xlFormat.createTable(formatObj, "A3:F13");                
                xlFormat.removeTable(1);
                this.XLCFormat.setCFRule({ "action": "lessthan", "inputs": ["5"], "color": "yellowft", "range": "C4:C13" });
                this.setHyperlink("D8", { webAddr: "http://www.google.com", text: this.XLEdit.getPropertyValue(7, 3) }, 0);
                this.setHyperlink("D10", { webAddr: "http://www.yahoo.com", text: this.XLEdit.getPropertyValue(9, 3) }, 0);
                this.XLComment.setComment("D4", "Free shipping for this order.", false);
                xlFormat.format({ "type": "currency" }, "E4:F13");
                this.performSelection("A4");
            }
        }

        function openfailure(args) {
            var xlObj = $("#Spreadsheet").data("ejSpreadsheet");
            xlObj.alert(args.statusText);
        }

    </script>
}


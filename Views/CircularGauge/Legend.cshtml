@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/excanvas.min.js")"></script>
}
@section SampleHeading{
    <span class="sampleName">CircularGauge-Legend-ASP.NET MVC-SYNCFUSION</span>
}



@section ControlsSection{
    <div id="gaugelegend" align="center">
         @(Html.EJ().CircularGauge("circulargaugelegend")
                .EnableAnimation(false)
                .BackgroundColor("transparent")
                .Width(500)
                .Legend(lg => { lg.Visible(true).Size(size => size.Width("300")); })
                .IsResponsive(true)
                .ClientSideEvents(cli => cli.Load("loadGaugeTheme"))
                .OuterCustomLabelPosition(OuterCustomLabelPosition.Top)
                .Scales(sc =>
                {
                    sc.StartAngle(122)
                        .SweepAngle(296)
                        .Radius(130)
                        .ShowScaleBar(true)
                        .Size(1)
                        .Border(br => br.Width(0.5))
                        .Maximum(120)
                        .MajorIntervalValue(20)
                        .MinorIntervalValue(10)
                        .ShowRanges(true)
                    .Ranges(ran =>
                    {
                        ran.DistanceFromScale(-28).StartValue(0).EndValue(5).BackgroundColor("#ccffff").Border(border => border.Color("#ccffff")).LegendText("Light air").Add();
                        ran.DistanceFromScale(-28).StartValue(5).EndValue(11).BackgroundColor("#99ffff").Border(border => border.Color("#99ffff")).LegendText("Light breeze").Add();
                        ran.DistanceFromScale(-28).StartValue(11).EndValue(19).BackgroundColor("#99ff99").Border(border => border.Color("#99ff99")).LegendText("Gentle air").Add();
                        ran.DistanceFromScale(-28).StartValue(19).EndValue(28).BackgroundColor("#79ff4d").Border(border => border.Color("#79ff4d")).LegendText("Moderate air").Add();
                        ran.DistanceFromScale(-28).StartValue(28).EndValue(49).BackgroundColor("#c6ff1a").Border(border => border.Color("#c6ff1a")).LegendText("Strong air").Add();
                        ran.DistanceFromScale(-28).StartValue(49).EndValue(74).BackgroundColor("#e6ac00").Border(border => border.Color("#e6ac00")).LegendText("Gale").Add();
                        ran.DistanceFromScale(-28).StartValue(74).EndValue(102).BackgroundColor("#ff6600").Border(border => border.Color("#ff6600")).LegendText("Storm").Add();
                        ran.DistanceFromScale(-28).StartValue(102).EndValue(120).BackgroundColor("#ff0000").Border(border => border.Color("#ff0000")).LegendText("Hurricane force").Add();
                    })
                    .Pointers(po =>
                    {
                        po.Value(60)
                        .Length(80)
                        .Width(7)
                        .ShowBackNeedle(true)
                        .BackNeedleLength(15).Add();
                    })
                    .Labels(la =>
                    {
                        la.Color("#8c8c8c").Add();
                    })
                    .CustomLabels(cl =>
                    {
                        cl.Value("Measure of wind speed in km/h").CustomLabelPositionType(CustomLabelPositionType.Outer)
                            .Font(ft => ft.FontFamily("Segoe UI").FontStyle("normal").Size("15"))
                            .Add();
                    })
                    .Ticks(tick => {
                        tick.Type(CircularTickTypes.Major).DistanceFromScale(2).Height(16).Width(1).Color("#8c8c8c").Add();
                        tick.Type(CircularTickTypes.Minor).DistanceFromScale(2).Height(8).Width(1).Color("#8c8c8c").Add();
                    }
                    
                    )
                    .Add();
                })
                )
            </div>
}



@section PropertiesSection{

    <div class="row">
        <div class="col-md-3">
            Position
        </div>
        <div class="col-md-3" style="margin-top: 8px;">
            @(Html.EJ().DropDownList("legendposition").TargetID("position").SelectedItemIndex(1).Width("110").Height("22").ClientSideEvents(cli => { cli.Select("position"); }))
            <div id="position">
                <ul>
                    <li>Top</li>
                    <li>Bottom</li>
                    <li>Left</li>
                    <li>Right</li>
                </ul>
            </div>
        </div>
        <div class="col-md-3">
            Alignment
        </div>
        <div class="col-md-3" style="margin-top: 8px;">
            @(Html.EJ().DropDownList("legendalignment").Width("110").Height("22").TargetID("alignment").SelectedItemIndex(1).ClientSideEvents(cli => { cli.Select("alignment"); }))
            <div id="alignment">
                <ul>
                    <li>Near</li>
                    <li>Center</li>
                    <li>Far</li>
                </ul>
            </div>
        </div>
        <div class="col-md-3">
            Alignment
        </div>
        <div class="col-md-3" style="margin-top: 8px;">
            @(Html.EJ().DropDownList("legendshape").Width("110").Height("22").TargetID("shape").SelectedItemIndex(0).ClientSideEvents(cli => { cli.Select("shape"); }))
            <div id="shape">
                <ul>
                    <li>Circle</li>
                    <li>Diamond</li>
                    <li>Rectangle</li>
                    <li>Triangle</li>
                    <li>Slider</li>
                    <li>Wedge</li>
                    <li>Pentagon</li>
                    <li>Trapezoid</li>
                    <li>Line</li>
                </ul>
            </div>
        </div>

    </div>
   

}
@section MetaTags{
   <meta name="description" content="This sample demonstrates the wind speed using the legend in the Syncfusion ASP.NET Web Forms Circular gauge control.">
}

@*@section ScriptSection{*@
<script>
    $(document).ready(function () {
        $("#sampleProperties").ejPropertiesPanel();
    });

    function position(sender) {
        var gauge = $("#circulargaugelegend").ejCircularGauge("instance");
        gauge.model.legend.position = sender.text.toLowerCase();
        gauge.refresh();
        var pointerLength = gauge.model.scales[0].radius - gauge.model.scales[0].ticks[0].height - (parseInt(gauge.model.scales[0].labels[0].font.size) + 5);
        gauge.setPointerLength(0, 0, pointerLength);
    }

    function alignment(sender) {
        var gauge = $("#circulargaugelegend").ejCircularGauge("instance");
        gauge.model.legend.alignment = sender.text.toLowerCase();
        gauge.refresh();
    }

    function shape(sender) {
        var gauge = $("#circulargaugelegend").ejCircularGauge("instance");
        gauge.model.legend.shape = sender.text.toLowerCase();
        gauge.refresh();
    }


</script>




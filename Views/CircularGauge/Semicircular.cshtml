@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/excanvas.min.js")"></script>
    }
@section SampleHeading{
	<span class="sampleName">CircularGauge-Half Circular-ASP.NET MVC-SYNCFUSION</span>
	}

@section ControlsSection{
 <div id="gradientFrame" align="center"> 
 @(Html.EJ().CircularGauge("SemiCircularGauge")
      .IsResponsive(true)
                .BackgroundColor("transparent").Width(500).Radius(130).ClientSideEvents(cli=>cli.MouseClickUp("pointerrange").RenderComplete("pointerrange").Load("loadGaugeTheme"))
                .ReadOnly(false).EnableAnimation(false).GaugePosition(GaugePosition.TopCenter).DistanceFromCorner(10)
                .Frame(fr=>fr.FrameType(Frame.HalfCircle).HalfCircleFrameStartAngle(180).HalfCircleFrameEndAngle(360))
                .Scales(sc =>
                {
                    sc.Radius(130)
                    .PointerCap(cap => cap.Radius(10).BackgroundColor("#0000F0").BorderColor("#262F36"))
                    .Maximum(120)
                    .MajorIntervalValue(20)
                    .MinorIntervalValue(10)
                    .ShowScaleBar(true)
                    .Size(10).BackgroundColor("#CBCFCE")
                    .Border(bor => bor.Color("#FEA501").Width(2))
                    .ShowRanges(true)
                    .StartAngle(180).SweepAngle(180)
                    .Labels(lbl => { lbl.Color("Red").AutoAngle(true).DistanceFromScale(0).Add(); })
                    .Ranges(ran =>
                    {
                        ran.StartWidth(10).EndWidth(10).DistanceFromScale(50).StartValue(0).EndValue(0).BackgroundColor("#0000F0").Border(bor => bor.Color("#0000F0")).Add();
                    })
                    .Ticks(tic =>
                    {
                        tic.Type(CircularTickTypes.Major).Height(16).Width(3).Color("#FEA501").Add();
                        tic.Type(CircularTickTypes.Minor).Height(8).Width(2).Color("#FEA501").Add();
                    })
                    .Pointers(po =>
                    {
                        po.Value(70)
                        .Length(85)
                        .Width(10)
                        .ShowBackNeedle(false)
                        .BackgroundColor("#FEA501")
                        .Border(bor => bor.Color("#FEA501")).Add();
                    })
                    .Add();
                })
                )
</div>
}



@section PropertiesSection{
    
                    <div class="row">
                        <div class="col-md-3">
                            Gauge Position
                        </div>
                        <div class="col-md-3">
                             @Html.EJ().DropDownList("gaugePosition").TargetID("positionList").SelectedItemIndex(0).Width("110px").Height("22px").ClientSideEvents(cli => { cli.Select("onchange"); })

            <div id="positionList">
                <ul>
                    <li>topcenter</li>
                    <li>center</li>
                    <li>topright</li>
                    <li>topleft</li>
                    <li>middleleft</li>
                     <li>middleright</li>
                    <li>bottomleft</li>
                    <li>bottomright</li>
                    <li>bottomcenter</li>
                </ul>
            </div>
                        </div>
                    </div>
                      <div class="row">
                        <div class="col-md-3">
                            Distance from corner
                        </div>
                        <div class="col-md-3">
                            @(Html.EJ().Slider("distanceFromCorner").SliderType(SlideType.MinRange).Value("10").Height("10").Width("110").MinValue(10).MaxValue(30).EnableAnimation(true).ClientSideEvents(events => { events.Change("onchange").Slide("onchange"); }))
                        </div>
                    </div>
                     <div class="row">
                        <div class="col-md-3">
                            Label Auto Angle
                        </div>
                        <div class="col-md-3">
                            @(Html.EJ().CheckBox("chkAutoAngle").Checked(true).ClientSideEvents(cli=>cli.Change("onchange")))
                        </div>
                    </div>
}

@section StyleSection{
<style>
        .col-md-3 .e-ddl .e-input {
            line-height:20px;
        }
         canvas{
            border:1px solid #8c8c8c;
        }

        #gradientFrame
        {
            background:none;
        }
    </style>
}
@section MetaTags{
   <meta name="description" content="This sample demonstrates the rendering of half-circular gauge in the Syncfusion ASP.NET Web Forms Circular gauge control.">
}

 <script>
     $(function () {
         $("#sampleProperties").ejPropertiesPanel();
        
     });
     function pointerrange(args) {
         if ((ej.browserInfo().name === "msie") ? parseFloat(ej.browserInfo().version) > 8 : true) {
             var speed = $("#SemiCircularGauge").data("ejCircularGauge");
             speed.setRangeEndValue(0, 0, args.model.scales[0].pointers[0].value);
         }
     }
     
     function onchange(args) {
         if (args.id == "distanceFromCorner") {
             $("#SemiCircularGauge").ejCircularGauge("option", "distanceFromCorner", args.value);
         }
         else if (args.type == "select") {
             $("#SemiCircularGauge").ejCircularGauge("option", "gaugePosition", args.value);
         }
         else if (args.type == "change") {
             $("#SemiCircularGauge").ejCircularGauge("option", "scales", [{ labels: [{ autoAngle: args.isChecked }] }]);
         }
     }

</script>





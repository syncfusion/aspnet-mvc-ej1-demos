@section MetaTags{
   <meta name="description" content="This example shows the events that trigger on specific actions in the ASP.NET MVC Ribbon." >
}

@section SampleHeading{
    <span class="sampleName">Ribbon-Events-ASP.NET MVC-SYNCFUSION</span>
}
@using Syncfusion.JavaScript.Models;
@section ControlsSection{
    @(Html.EJ().Ribbon("defaultRibbon")
     .Width("100%")
     .ExpandPinSettings(exPin =>
      {
        exPin.ToolTip("Collapse the Ribbon");
      })
     .CollapsePinSettings(colPin =>
       {
         colPin.ToolTip("Pin the Ribbon");
       })
     .ApplicationTab(apptab =>
    {
        apptab.Type(ApplicationTabType.Menu).MenuItemID("ribbonmenu").MenuSettings(new MenuProperties()
               {
                   OpenOnClick = false,
                   Create="create",
                   Mouseover= "mouseover",
                   Mouseout="mouseout",
                   Click="click",
                   Keydown="keydown"
               });
    })
    .RibbonTabs(tab =>
    {
        tab.Id("home").Text("HOME").TabGroups(tabgrp =>
        {
            tabgrp.Text("Clipboard").AlignType(RibbonAlignType.Columns).EnableGroupExpander(true).GroupExpanderSettings(grpExp => 
            {
               grpExp.ToolTip("Clipboard"); 
            }).Content(cnt => {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("paste").Text("Paste").ToolTip("Paste").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-ribbonpaste"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).IsBig(true).Width("50px").Height("70px")).Add();
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("cut").Text("Cut").ToolTip("Cut").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        PrefixIcon = "e-icon e-ribbon e-ribboncut"
                    }).Add();
                    cntgrp.Id("copy").Text("Copy").ToolTip("Copy").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        PrefixIcon = "e-icon e-ribbon e-ribboncopy"
                    }).Add();
                    cntgrp.Id("clear").Text("Clear").ToolTip("Clear All").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        PrefixIcon = "e-icon e-ribbon clearAll"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("60px").Height("25px").IsBig(false)).Add();
            }).Add();
            tabgrp.Text("Font").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("fontfamily").ToolTip("Font").DropdownSettings(new DropDownListProperties()
                    {
                        DataSource = (IEnumerable<FontFamily>)ViewBag.datasource,
                        Text = "Segoe UI",
                        Width="150px"
                    }).Add();
                    cntgrp.Id("fontsize").ToolTip("FontSize").DropdownSettings(new DropDownListProperties()
                    {
                        DataSource = (IEnumerable<FontPoint>)ViewBag.datasource1,
                        Text = "1pt",
                        Width = "65px"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.DropDownList).Height("28px").IsBig(false)).Add();
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("bold").Text("Bold").ToolTip("Bold").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon bold",
                        Click = "executeAction"
                    }).Add();
                    cntgrp.Id("italic").Text("Italic").ToolTip("Italic").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-ribbonitalic"
                    }).Add();
                    cntgrp.Id("underline").Text("Underline").ToolTip("Underline").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-ribbonunderline"
                    }).Add();
                    cntgrp.Id("strikethrough").Text("Strikethrough").ToolTip("Strikethrough").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon strikethrough"
                    }).Add();
                    cntgrp.Id("superscript").Text("Superscript").ToolTip("Superscript").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-superscripticon"
                    }).Add();
                    cntgrp.Id("subscript").Text("Subscript").ToolTip("Subscript").EnableSeparator(true).ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-subscripticon"
                    }).Add();
                    cntgrp.Id("uppercase").Text("Upper Case").ToolTip("Upper Case").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-uppercase"
                    }).Add();
                    cntgrp.Id("lowercase").Text("Lower Case").ToolTip("Lower Case").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-lowercase"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).IsBig(false)).Add();
            }).Add();
             tabgrp.Text("New").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("new").Text("New").ToolTip("New").ButtonSettings(new ButtonProperties()
                        {
                            ContentType = ContentType.ImageOnly,
                            ImagePosition = ImagePosition.ImageTop,
                            PrefixIcon = "e-icon e-ribbon e-new",
                            Click= "executeAction"
                        }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("60px").Height("70px")).Add();
            }).Add();
            tabgrp.Text("Actions").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("undo").Text("Undo").ToolTip("Undo").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition=ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-undo"
                    }).Add();
                    cntgrp.Id("redo").Text("Redo").ToolTip("Redo").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-redo"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("40px").Height("70px")).Add();
            }).Add();
        }).Add();
        tab.Id("layout").Text("LAYOUT").TabGroups(tabgrp =>
        {
            tabgrp.Text("Alignment").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("bullet").Text("Bullet Format").ToolTip("Bullets").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-bullet"
                    }).Add();
                    cntgrp.Id("number").Text("Number Format").ToolTip("Numbering").EnableSeparator(true).ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-numbericon"
                    }).Add();
                    cntgrp.Id("textindent").Text("Text Indent").ToolTip("Text Indent").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-indent"
                    }).Add();
                    cntgrp.Id("textoudent").Text("Text Outdent").ToolTip("Text Outdent").EnableSeparator(true).ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-outdent"
                    }).Add();
                    cntgrp.Id("sortascending").Text("Sort").ToolTip("Sort").EnableSeparator(true).ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-sort"
                    }).Add();
                    cntgrp.Id("border").Text("Border").ToolTip("Border").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-border"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).IsBig(false)).Add();
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("alignleft").Text("JustifyLeft").ToolTip("Align Left").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon alignleft"
                    }).Add();
                    cntgrp.Id("aligncenter").Text("JustifyCenter").ToolTip("Align Center").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon aligncenter"
                    }).Add();
                    cntgrp.Id("alignright").Text("JustifyRight").ToolTip("Align Right").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon alignright"
                    }).Add();
                    cntgrp.Id("justify").Text("JustifyFull").ToolTip("Justify").EnableSeparator(true).ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon justify"
                    }).Add();
                    cntgrp.Id("fontcolor").Text("Font Color").ToolTip("Font Color").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-fontcolor"
                    }).Add();
                    cntgrp.Id("fillcolor").Text("Fill Color").ToolTip("Fill Color").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.ImageOnly,
                        PrefixIcon = "e-icon e-ribbon e-fillcolor"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).IsBig(false)).Add();
            }).Add();
            tabgrp.Text("Print Layout").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("printlayout").Text("Print Layout").ToolTip("Print Layout").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-printlayout"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("80px").Height("70px")).Add();
            }).Add();
        }).Add();
        tab.Id("insert").Text("INSERT").TabGroups(tabgrp =>
        {
            tabgrp.Text("Tables").AlignType(RibbonAlignType.Columns).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("tables").Text("Tables").ToolTip("Tables").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-table"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("50px").Height("70px")).Add();
            }).Add();
            tabgrp.Text("Illustrations").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("pictures").Text("Pictures").ToolTip("Pictures").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-picture"
                    }).Add();
                    cntgrp.Id("videos").Text("Videos").ToolTip("Videos").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-video"
                    }).Add();
                    cntgrp.Id("shapes").Text("Shapes").ToolTip("Shapes").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-shape"
                    }).Add();
                    cntgrp.Id("charts").Text("Charts").ToolTip("Charts").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-chart"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("56px").Height("70px")).Add();
            }).Add();
            tabgrp.Text("Comments").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("comments").Text("Comments").ToolTip("Comments").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-comment"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("70px").Height("70px")).Add();
            }).Add();
            tabgrp.Text("Hyperlink").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("hyperlink").Text("Hyperlink").ToolTip("Hyperlink").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-hyperlink"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("70px").Height("70px")).Add();
            }).Add();
            tabgrp.Text("Equation").AlignType(RibbonAlignType.Rows).Content(cnt =>
            {
                cnt.ContentGroups(cntgrp =>
                {
                    cntgrp.Id("equation").Text("Equation").ToolTip("Equation").ButtonSettings(new ButtonProperties()
                    {
                        ContentType = ContentType.TextAndImage,
                        ImagePosition = ImagePosition.ImageTop,
                        PrefixIcon = "e-icon e-ribbon e-equation"
                    }).Add();
                }).ContentDefaults(df => df.Type(RibbonButtonType.Button).Width("60px").Height("70px")).Add();
            }).Add();
        }).Add();
        })
           .ClientSideEvents(evt => evt.TabClick("tabClick").TabSelect("tabSelect").ToggleButtonClick("toggleButtonClick").GroupClick("groupClick").GroupExpand("groupExpand"))
    )
                <ul id="ribbonmenu">
                    <li><a>FILE</a>
                        <ul>
                            <li><a>New</a></li>
                            <li><a>Open</a></li>
                            <li><a>Save</a></li>
                            <li><a>Save As</a></li>
                            <li><a>Print</a></li>
                        </ul>
                    </li>
                </ul>
    }
    <div id="ribbonTarget">
    <ul>
        <li>groupClick</li>
        <li>create</li>
        <li>mouseover</li>
        <li>mouseout</li>
        <li>click</li>
        <li>tabClick</li>
        <li>tabSelect</li>
        <li>toggleButtonClick</li>
        <li>groupExpand</li>
    </ul>
</div>
@section EventsDropdown{
    @Html.EJ().DropDownList("selectControls_input").TargetID("ribbonTarget").ShowCheckbox(true).CheckAll(true).ClientSideEvents(evt => evt.Change("evtpropscheckedevent"))
}
@section ScriptSection{
    <script>
        var ribbonObj, menuObj;
        function evtpropscheckedevent(args) {
            ribbonObj = $("#defaultRibbon").data("ejRibbon");
            menuObj = $("#ribbonmenu").data("ejMenu");
            if (args.isChecked) {
                switch (args.selectedText) {
                    case "create": menuObj.option(args.selectedText, "create"); break;
                    case "click": menuObj.option(args.selectedText, "click"); break;
                    case "mouseover": menuObj.option(args.selectedText, "mouseover"); break;
                    case "mouseout": menuObj.option(args.selectedText, "mouseout"); break;
                    case "keydown": menuObj.option(args.selectedText, "keydown"); break;
                    case "toggleButtonClick": ribbonObj.option(args.selectedText, "toggleButtonClick"); break;
                    case "tabSelect": ribbonObj.option(args.selectedText, "tabSelect"); break;
                    case "tabClick": ribbonObj.option(args.selectedText, "tabClick"); break;
                    case "groupExpand": ribbonObj.option(args.selectedText, "groupExpand"); break;
                    case "groupClick": ribbonObj.option(args.selectedText, "groupClick"); break;
                }
            }
            else {
                ribbonObj.option(args.selectedText, null);
                menuObj.option(args.selectedText, null);
            }
        }
        function onCreate(args) {
            jQuery.addEventLog("File Menu has been <span class= 'eventTitle'> created</span>.");
        }
        function create(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> menuCreate </span>triggered</br>");
        }
        function mouseover(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> menuMouseOver </span>triggered</br>");
        }
        function mouseout(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> menuMouseOut </span>triggered</br>");
        }
        function click(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> menuClick </span>triggered</br>");
        }
        function tabSelect(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> tabSelect </span>triggered</br>");
        }
        function toggleButtonClick(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> toggleButtonClick </span>triggered</br>");
        }
        function tabClick(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> tabClick </span>triggered</br>");
        }
        function groupExpand(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> groupExpand </span>triggered</br>");
        }
        function groupClick(sender) {
            jQuery.addEventLog("Event<span class='eventTitle'> groupClick </span>triggered</br>");
        }
        function onClear() {
            jQuery.clearEventLog();
        }
    </script>
    
}
@section StyleSection{
   <link href="~/Content/ejthemes/ribbon-css/ej.icons.css" rel="stylesheet" />
}


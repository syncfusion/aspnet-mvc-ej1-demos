@section MetaTags{
   <meta name="description" content="This example demonstrates how the content copied from a word document is pasted after cleaning unwanted elements and CSS in ASP.NET MVC RichTextEditor." >
}

@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/cultures/ej.culture.en-US.min.js")"></script>
}
@section SampleHeading{<span class="sampleName">RTE-Paste Options-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{
     @{List<String> toolsList = new List<string>() { "formatStyle", "font", "style", "effects", "alignment", "lists", "indenting", "clipboard", "doAction", "clear", "links", "images", "media", "tables", "casing", "customTool","view","edit","print" };
            List<String> font = new List<string>() { "fontName", "fontSize", "fontColor", "backgroundColor" };
            List<String> style = new List<string>() { "bold", "italic", "underline", "strikethrough" };
            List<String> alignment = new List<string>() {"justifyLeft", "justifyCenter", "justifyRight", "justifyFull" };
			List<String> edit = new List<String>() { "findAndReplace" };
            List<String> lists = new List<string>() { "unorderedList", "orderedList" };
            List<String> indenting = new List<string> { "outdent", "indent" };
            List<String> clipboard = new List<string>() { "cut", "copy", "paste" };
            List<String> doAction = new List<string>() { "undo", "redo" };
            List<String> clear = new List<string>() { "clearFormat", "clearAll" };
            List<String> tables = new List<string>() { "createTable", "addRowAbove", "addRowBelow", "addColumnLeft", "addColumnRight", "deleteRow", "deleteColumn", "deleteTable" };
            List<String> links = new List<string>() { "createLink","removeLink" };
            List<String> images = new List<string>() { "image" };
            List<String> media = new List<string>() { "video" };
            List<String> effects = new List<string>() { "superscript", "subscript" };
            List<String> casing = new List<string>() { "upperCase", "lowerCase" };
            List<String> formatStyle = new List<string>() { "format" };
            List<String> view = new List<string>() { "fullScreen","zoomIn","zoomOut" };
            List<String> print = new List<string>() { "print" };
            }
    @{Html.EJ().RTE("rteSample").Width("100%").Height("414").ContentTemplate(@<div>
            <p><b>Description:</b></p>
        <p>The Rich Text Editor (RTE) control is an easy to render in
        client side. Customer easy to edit the contents and get the HTML content for
        the displayed content. A rich text editor control provides users with a toolbar
        that helps them to apply rich text formats to the text entered in the text
        area. </p>
       <p><b>Functional
        Specifications/Requirements:</b></p>
        <ol><li><p>Provide
        the tool bar support, itâ€™s also customizable.</p></li><li><p>Options
        to get the HTML elements with styles.</p></li><li><p>Support
        to insert image from a defined path.</p></li><li><p>Footer
        elements and styles(tag / Element information , Action button (Upload, Cancel))</p></li><li><p>Re-size
        the editor support.</p></li><li><p>Provide
        efficient public methods and client side events.</p></li><li><p>Keyboard
        navigation support.</p></li></ol>
        </div>).PasteCleanupSettings(c=>c.CleanCSS(true).CleanElements(true).ListConversion(true).RemoveStyles(true)).MinWidth("200px").Render();}
}
@section PropertiesSection{
    <div class="row"><h4>Cleanup Option</h4>
        <div class="col-md-3">
            List conversion
        </div>
        <div class="col-md-3">
            @Html.EJ().CheckBox("check").ClientSideEvents(e => e.Change("OnCheck")).Checked(true)
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Clean unwanted CSS
        </div>
        <div class="col-md-3">
            @Html.EJ().CheckBox("check1").ClientSideEvents(e => e.Change("OnCheck1")).Checked(true)
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Remove styles
        </div>
        <div class="col-md-3">
            @Html.EJ().CheckBox("check2").ClientSideEvents(e => e.Change("OnCheck2")).Checked(true)
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Clean unwanted elements
        </div>
        <div class="col-md-3">
           @Html.EJ().CheckBox("check3").ClientSideEvents(e => e.Change("OnCheck3")).Checked(true)
        </div>
    </div>

    
}
@section ScriptSection{
    <script>
        var target, chkobj;

        $(function () {
            target = $("#rteSample").data("ejRTE");
            chkobj = $("#check2").data("ejCheckBox");
        });

        function OnCheck(args) {

            if (args.isChecked) {
                target.model.pasteCleanupSettings.listConversion = true;
            } else {
                target.model.pasteCleanupSettings.listConversion = false;
            }

        }
        function OnCheck1(args) {

            if (args.isChecked) {
                chkobj.setModel({ checked: true })
                target.model.pasteCleanupSettings.cleanCSS = true;
                target.model.pasteCleanupSettings.removeStyles = true;
            } else {
                chkobj.setModel({ checked: false })
                target.model.pasteCleanupSettings.cleanCSS = false;
                target.model.pasteCleanupSettings.removeStyles = false;
            }

        }
        function OnCheck2(args) {

            if (args.isChecked) {
                target.model.pasteCleanupSettings.removeStyles = true;
            } else {
                target.model.pasteCleanupSettings.removeStyles = false;
            }

        }
        function OnCheck3(args) {

            if (args.isChecked) {
                target.model.pasteCleanupSettings.cleanElements = true;
            } else {
                target.model.pasteCleanupSettings.cleanElements = false;
            }

        }
        $(document).ready(function () { $("#sampleProperties").ejPropertiesPanel(); });
    </script>
}


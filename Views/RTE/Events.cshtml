@section MetaTags{
   <meta name="description" content="This sample demonstrates the various client side like change, keyup, keydown, create, prerender and execute in ASP.NET MVC RichTextEditor control." >
}

@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/cultures/ej.culture.en-US.min.js")"></script>
}
@section SampleHeading{
    <span class="sampleName">RTE-Events-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{
    @{Html.EJ().RTE("rteSample").ContentTemplate(@<div>
        <p><b>Description:</b></p>
        <p>The Rich Text Editor (RTE) control is an easy to render in
        client side. Customer easy to edit the contents and get the HTML content for
        the displayed content. A rich text editor control provides users with a toolbar
        that helps them to apply rich text formats to the text entered in the text
        area. </p>
       <p><b>Functional
        Specifications/Requirements:</b></p>
        <ol><li><p>Provide
        the tool bar support, itâ€™s also customizable.</p></li><li><p>Options
        to get the HTML elements with styles.</p></li><li><p>Support
        to insert image from a defined path.</p></li><li><p>Footer
        elements and styles(tag / Element information , Action button (Upload, Cancel))</p></li><li><p>Re-size
        the editor support.</p></li><li><p>Provide
        efficient public methods and client side events.</p></li><li><p>Keyboard
        navigation support.</p></li></ol>
    </div>).Width("100%").MinWidth("200px").ClientSideEvents(evt => evt.Create("onCreate").PreRender("onPreRender").Change("onChange").Keydown("onKeydown").Keyup("onKeyup").Execute("onExecute")).Render();}
}
<div id="rteTarget">
    <ul>
        <li>change</li>
        <li>keydown</li>
        <li>keyup</li>
        <li>execute</li>
    </ul>
</div>
@section EventsDropdown{
    @Html.EJ().DropDownList("selectControls_input").TargetID("rteTarget").ShowCheckbox(true).CheckAll(true).ClientSideEvents(evt => evt.Change("evtpropscheckedevent").PopupShown("adjustpopupposition"))
}
@section ScriptSection{
    <script>
        var rteObj;
        function evtpropscheckedevent(args) {
            rteObj = $("#rteSample").data("ejRTE");
            if (args.isChecked) {
                switch (args.selectedText) {
                    case "create": rteObj.option(args.selectedText, "onCreate"); break;
                    case "prerender": rteObj.option(args.selectedText, "onPreRender"); break;
                    case "keydown": rteObj.option(args.selectedText, "onKeydown"); break;
                    case "execute": rteObj.option(args.selectedText, "onExecute"); break;
                    case "keyup": rteObj.option(args.selectedText, "onKeyup"); break;
                    case "change": rteObj.option(args.selectedText, "onChange"); break;
                }
            }
            else rteObj.option(args.selectedText, null);
        }

        function onCreate(args) {
            jQuery.addEventLog("RTE has been <span class='eventTitle'>created</span>.");
        }
        function onPreRender(args) {
            jQuery.addEventLog("RTE <span class='eventTitle'>onPreRender</span> has been triggered.");
        }
        function onChange(args) {
            jQuery.addEventLog("RTE value has been <span class='eventTitle'>changed</span>.");
        }

        function onKeydown(args) {
            jQuery.addEventLog("<span class='eventTitle'>Keydown</span> event is fired.");
        }

        function onKeyup(args) {
            jQuery.addEventLog("<span class='eventTitle'>Keyup</span> event is fired.");
        }

        function onExecute(args) {
            jQuery.addEventLog(args.commandName + " command has been <span class='eventTitle'>Executed</span>");
        }

        function onClear() {
            jQuery.clearEventLog();
        }
    </script>
}
@section StyleSection{
    <style>
        .cols-sample-area, .cols-prop-area.event-tracer {
            height: 422px;
        }
    </style>
}


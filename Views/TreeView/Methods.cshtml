@section MetaTags{
   <meta name="description" content="This example demonstrates the various methods like collapseAll, expandAll, enable and disable in a ASP.NET MVC TreeView." >
}

@section SampleHeading{<span class="sampleName">TreeView-Methods-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{
    <div style="width: 250px">
        @(Html.EJ().TreeView("treeView").Items(items =>
                {
                    items.Add().Text("Cricket").Children(child =>
                    {
                        child.Add().Text("Princeton Club");
                        child.Add().Text("Harvard Club");
                        child.Add().Text("St.Columba's Club");
                        child.Add().Text("Dartmouth Club");
                        child.Add().Text("Middlebury Club");

                    });
                    items.Add().Text("Football").Children(child =>
                    {
                        child.Add().Text("A.F.C. Blackpool");
                        child.Add().Text("A.F.C. Emley");
                        child.Add().Text("Bedford");
                        child.Add().Text("Celtic Nation");
                        child.Add().Text("Farsley");
                        child.Add().Text("Celtic Nation");
                        child.Add().Text("London Colney");

                    });
                    items.Add().Text("Basketball").Children(child =>
                    {
                        child.Add().Text("AGE Halkida");
                        child.Add().Text("Iraklio");
                        child.Add().Text("Sporting Athens");
                        child.Add().Text("Pagrati Athens");
                    });
                    items.Add().Text("Volleyball").Children(child =>
                    {

                        child.Add().Text("CV Elche");
                        child.Add().Text("Jusan Canarias");
                        child.Add().Text("Unicaja Arukasur");
                        child.Add().Text("Voleibol Benidorm");

                    });

                }).ShowCheckbox(true).AllowEditing(true))


    </div>
}

@section PropertiesSection{
    <div class="row">
        <div class="col-md-3">
            Expand / Collapse All
        </div>
        <div class="col-md-3">
            @(Html.EJ().ToggleButton("chkExpand").Width("87px").Height("40px").DefaultText("Expand All").ActiveText("Collapse All")
                       .ClientSideEvents(s => s.Change("onExpandAll")))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Check / Uncheck All
        </div>
        <div class="col-md-3">
            @(Html.EJ().ToggleButton("chkCheckAll").Width("87px").Height("40px").DefaultText("Check All").ActiveText("Uncheck All")
                       .ClientSideEvents(s => s.Change("onCheckAll")))
        </div>
    </div>

    <div class="row">
        <div class="col-md-3">
            Selected Node
        </div>
        <div class="col-md-3">

            @Html.EJ().Button("btnExpand").Size(ButtonSize.Small).Text("Expand").ClientSideEvents(s => s.Click("onExpand"))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Selected Node
        </div>
        <div class="col-md-3">

           @Html.EJ().Button("btnCollapse").Size(ButtonSize.Small).Text("Collapse").ClientSideEvents(s => s.Click("onCollapse"))
        </div>
    </div>

    <div class="row">
        <div class="col-md-3">
            Selected Node
        </div>
        <div class="col-md-3">
            @Html.EJ().Button("btnCheck").Size(ButtonSize.Small).Text("Check").ClientSideEvents(s => s.Click("onCheck"))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Selected Node
        </div>
        <div class="col-md-3">
            @Html.EJ().Button("btnUncheck").Size(ButtonSize.Small).Text("Uncheck").ClientSideEvents(s => s.Click("onUncheck"))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Selected Node
        </div>
        <div class="col-md-3">
            @Html.EJ().Button("btnDisable").Size(ButtonSize.Small).Text("Disable").ClientSideEvents(s => s.Click("onDisable"))

        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Disable Nodes 
        </div>
        <div class="col-md-3">
            @Html.EJ().Button("btnEnable").Size(ButtonSize.Small).Text("Enable").ClientSideEvents(s => s.Click("onEnable"))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Add New Node
        </div>
        <div class="col-md-3">
            @Html.EJ().Button("btnAdd").Size(ButtonSize.Small).Text("Add").ClientSideEvents(s => s.Click("onAddNew"))

        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Remove Node
        </div>
        <div class="col-md-3">
            @Html.EJ().Button("btnRemove").Size(ButtonSize.Small).Text("Remove").ClientSideEvents(s => s.Click("onRemoveNode"))

        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Destory
        </div>
        <div class="col-md-3">
            @(Html.EJ().ToggleButton("chkDestroy").Width("87px").DefaultText("Destory").ActiveText("Restore")
                       .ClientSideEvents(s => s.Change("onDestoryRestore")))
        </div>
    </div>
}

@section ScriptSection{
    <script type="text/javascript">
        $(function () {
            $("#sampleProperties").ejPropertiesPanel();
        });
        var i = 0, treeview;
        // Client side APIs 

        function onExpandAll(args) {            
                var treeview = $("#treeView").data("ejTreeView");
                if (args.isChecked)
                    treeview && treeview.expandAll();
                else
                    treeview && treeview.collapseAll();
        }
        function onCheckAll(args) {           
                var treeview = $("#treeView").data("ejTreeView");
                if (args.isChecked)
                    treeview && treeview.checkAll();
                else
                    treeview && treeview.unCheckAll();
        }
        function onExpand() {            
                var treeview = $("#treeView").data("ejTreeView");
                treeview && treeview.expandNode(treeview.getSelectedNode());
        }
        function onCollapse() {            
                var treeview = $("#treeView").data("ejTreeView");
                treeview && treeview.collapseNode(treeview.getSelectedNode());
        }
        function onCheck() {           
                var treeview = $("#treeView").data("ejTreeView");
                treeview && treeview.checkNode(treeview.getSelectedNode());
        }
        function onUncheck() {            
                var treeview = $("#treeView").data("ejTreeView");
                treeview && treeview.uncheckNode(treeview.getSelectedNode());
        }
        function onEnable() {            
                var treeview = $("#treeView").data("ejTreeView");
                var node = $("#treeView").find('.e-node-disable');
                treeview && treeview.enableNode(node[0]);
        }
        function onDisable() {            
                var treeview = $("#treeView").data("ejTreeView");
                treeview && treeview.disableNode(treeview.getSelectedNode());
        }
        function onAddNew() {            
                var treeview = $("#treeView").data("ejTreeView");
                treeview && treeview.addNode("Item" + i, treeview.getSelectedNode());
                i++;            
        }
        function onRemoveNode() {           
                var treeview = $("#treeView").data("ejTreeView");
                treeview && treeview.removeNode(treeview.getSelectedNode());
		}				
        function onDestoryRestore(args) {
            var treeview = $("#treeView").data("ejTreeView");
            i = 0;
            if (args.isChecked) {
                treeview && treeview.destroy();
                enableOrDisable(false);
            } else {
                $("#treeView").ejTreeView(
                     {
                         showCheckbox: true,
                         allowEdit: true
                     });
                treeview = $("#treeView").data("ejTreeView");
                enableOrDisable(true);
            }
        }
        function enableOrDisable(value) {
            var _array = ["chkExpand", "chkCheckAll", "btnExpand", "btnCollapse", "btnCheck", "btnUncheck", "btnDisable", "btnEnable", "btnAdd", "btnRemove"];
            for (var i = 0; i < _array.length; i++) {
                if (i == 0 || i == 1)
                    enableOrDisableToggleButton(value, _array[i]);
                else
                    enableOrDisableButton(value, _array[i]);
            }
        }
        function enableOrDisableButton(value, btnId) {
            var btnObj = $("#" + btnId).data("ejButton");
            value ? btnObj.enable() : btnObj.disable();
        }
        function enableOrDisableToggleButton(value, btnId) {
            var btnObj = $("#" + btnId).data("ejToggleButton");
            btnObj.option("toggleState", false);
            value ? btnObj.enable() : btnObj.disable();
        }
    </script>

}



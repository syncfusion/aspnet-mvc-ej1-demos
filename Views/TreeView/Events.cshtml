@section MetaTags{
   <meta name="description" content="This sample demonstrates the various client side events like created, ready, expand and collapse etc in a ASP.NET MVC TreeView control." >
}

@section SampleHeading{<span class="sampleName">TreeView-Events-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{
    <div style="width: 450px">
        @(Html.EJ().TreeView("tree").Items(items =>
                {
                    items.Add().Text("Cricket").Expanded(true).Children(child =>
                    {
                        child.Add().Text("Princeton Club ");
                        child.Add().Text("Harverd Club ");
                        child.Add().Text("st.Columbia Club");
                        child.Add().Text("Dartmouth Club");
                        child.Add().Text("Middlebury Club");
                    });
                    items.Add().Text("Basketball").Children(child =>
                    {
                        child.Add().Text("AGE Halkida");
                        child.Add().Text("Iraklio");
                        child.Add().Text("Sporting Athens");
                        child.Add().Text("Pagrati Athens");
                        child.Add().Text("Lodon colney");

                    });
                    items.Add().Text("Football").Children(child =>
                    {
                        child.Add().Text("A.F.C Blackpool");
                        child.Add().Text("A.F.C Emley");
                        child.Add().Text("Bedford ");
                        child.Add().Text("Farsley");
                        child.Add().Text("Rangers");
                    });

                }).AllowDragAndDrop(true).AllowDropChild(true).AllowDropSibling(true).Width("400px").ShowCheckbox(true)
                  .AllowEditing(true).ClientSideEvents(s => s.Create("onCreate").NodeExpand("onExpand").NodeCollapse("onCollapse")
                  .BeforeExpand("onBeforeExpand").BeforeCollapse("onBeforeCollapse").NodeSelect("onSelect").NodeCheck("onChecked")
                  .NodeUncheck("onUnChecked").NodeDragStart("onDragStart").NodeDrag("onDrag").NodeDragStop("onDragStop")
                  .NodeDropped("onDropped").BeforeEdit("onBeforeEdit").NodeEdit("onEdit").Ready("onReady")))

    </div>
}
<div id="target">
    <ul>
        <li>nodeExpand</li>
        <li>nodeCollapse</li>
        <li>beforeExpand</li>
        <li>beforeCollapse</li>
        <li>nodeSelect</li>
        <li>beforeEdit</li>
        <li>nodeEdit</li>
        <li>nodeCheck</li>
        <li>nodeUncheck</li>
        <li>nodeDragStart</li>
        <li>nodeDrag</li>
        <li>nodeDragStop</li>
        <li>nodeDropped</li>
    </ul>
</div>
@section EventsDropdown{
    @(Html.EJ().DropDownList("selectControls_input").TargetID("target").CssClass("metroblu4xne").ShowCheckbox(true).Width("160px")
               .CheckAll(true).ClientSideEvents(s => s.Change("evtpropscheckedevent")))

}
@section ScriptSection{
    <script type="text/javascript">

        // Event wire and unwire
        function evtpropscheckedevent(args) {
            var treeviewObj = $("#tree").data("ejTreeView");
            if (args.isChecked) {
                switch (args.selectedText) {
                    case "create": treeviewObj.option(args.selectedText, "onCreate"); break;
                    case "nodeExpand": treeviewObj.option(args.selectedText, "onExpand"); break;
                    case "nodeCollapse": treeviewObj.option(args.selectedText, "onCollapse"); break;
                    case "beforeExpand": treeviewObj.option(args.selectedText, "onBeforeExpand"); break;
                    case "beforeCollapse": treeviewObj.option(args.selectedText, "onBeforeCollapse"); break;
                    case "nodeSelect": treeviewObj.option(args.selectedText, "onSelect"); break;
                    case "nodeCheck": treeviewObj.option(args.selectedText, "onChecked"); break;
                    case "nodeUncheck": treeviewObj.option(args.selectedText, "onUnChecked"); break;
                    case "nodeDragStart": treeviewObj.option(args.selectedText, "onDragStart"); break;
                    case "nodeDrag": treeviewObj.option(args.selectedText, "onDrag"); break;
                    case "nodeDragStop": treeviewObj.option(args.selectedText, "onDragStop"); break;
                    case "nodeDropped": treeviewObj.option(args.selectedText, "onDropped"); break;
                    case "beforeEdit": treeviewObj.option(args.selectedText, "onBeforeEdit"); break;
                    case "nodeEdit": treeviewObj.option(args.selectedText, "onEdit"); break;
                }
            }
            else treeviewObj.option(args.selectedText, null);
        }

        function onCreate(args) {
            jQuery.addEventLog("Treeview has been <span class='eventTitle'>created</span>.");
        }
        function onExpand(args) {
            jQuery.addEventLog($.trim(args.value) + " node is <span class='eventTitle'>Expanded</span>.");
        }
        function onCollapse(args) {
            jQuery.addEventLog($.trim(args.value) + " node is <span class='eventTitle'>Collapsed</span>.");
        }
        function onBeforeExpand(args) {
            jQuery.addEventLog("<span class='eventTitle'>BeforeExpand</span> event is fired for " + $.trim(args.value) + " node.");
        }
        function onBeforeCollapse(args) {
            jQuery.addEventLog("<span class='eventTitle'>BeforeCollapse</span> event is fired for " + $.trim(args.value) + " node.")
        }
        function onSelect(args) {
            jQuery.addEventLog($.trim(args.value) + " node is <span class='eventTitle'>selected</span>.");
        }
        function onChecked(args) {
            jQuery.addEventLog($.trim(args.value) + " node is <span class='eventTitle'>checked</span>.");
        }
        function onUnChecked(args) {
            jQuery.addEventLog($.trim(args.value) + " node is <span class='eventTitle'>unchecked</span>.");
        }
        function onDragStart(args) {
            jQuery.addEventLog($.trim(args.targetElementData.text) + " node <span class='eventTitle'>dragging has been started</span>.");
        }
        function onDrag(args) {
            jQuery.addEventLog($.trim(args.draggedElementData.text) + " node is being <span class='eventTitle'>dragged</span>.");
        }
        function onDragStop(args) {
            jQuery.addEventLog($.trim(args.draggedElementData.text) + " node dragging has been <span class='eventTitle'>stopped</span>.");
        }
        function onDropped(args) {
            var targetText = (args.targetElementData.text != "") ? $.trim(args.targetElementData.text) : "Treeview";
            jQuery.addEventLog($.trim(args.droppedElementData.text) + " node has been <span class='eventTitle'>dropped </span> to " + targetText + ".");
        }
        function onBeforeEdit(args) {
            jQuery.addEventLog("<span class='eventTitle'>BeforeEdit</span> event is fired for " + $.trim(args.currentElement.text()) + " node.");
        }
        function onEdit(args) {
            jQuery.addEventLog($.trim(args.oldText) + " node has been <span class='eventTitle'>edited</span> to " + $.trim(args.newText) + ".");
        }
        function onReady(args) {
            jQuery.addEventLog("TreeView nodes are <span class='eventTitle'>loaded</span> successfully.");
        }
        function onClear() {
            jQuery.clearEventLog();
        }

    </script>
}


@section MetaTags{
   <meta name="description" content="This example illustrates the paging features available in the tree grid control for viewing records with pagination.">
}
@section SampleHeading{<span class="sampleName">TreeGrid-Paging API-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{


    @(Html.EJ().TreeGrid("TreeGridContainer")
             .ChildMapping("Children")
             .TreeColumnIndex(1)
             .IsResponsive(true)
             .AllowPaging(true)
             .ClientSideEvents(eve => eve.ActionComplete("complete"))    
             .PageSettings(ps=>ps.PageCount(5).PageSize(11))                      
             .Columns(co =>
               {
                   co.Field("TaskId").HeaderText("Task Id").Width(55).Add();
                   co.Field("TaskName").HeaderText("Task Name").Add();
                   co.Field("StartDate").HeaderText("Start Date").Add();
                   co.Field("EndDate").HeaderText("End Date").Add();
                   co.Field("Duration").HeaderText("Duration").Add();                   
               }
             )
             .SizeSettings(ss => ss.Width("100%"))
             .Datasource(ViewBag.datasource)
    )

}
@section PropertiesSection{
    <div id="sampleProperties">
    <div class="prop-grid">
        <div class="row">
            <div class="col-md-3 colwidth">
                Allow Paging
            </div>
            <div class="col-md-3">
                @(Html.EJ().CheckBox("allowPaging")
                .Checked()
                .ClientSideEvents(eve => { eve.Change("AllowPaging"); })
                )
            </div>
            <div class="col-md-3 colwidth">
                Page Size Mode
            </div>
            <div class="col-md-3 colwidth">
                <div id="pageList">
                    <ul>
                        <li>All</li>
                        <li>Root</li>
                    </ul>
                </div>
                @(Html.EJ().DropDownList("pageSizeMode")
                .TargetID("pageList")
                .WatermarkText("All")
                .Width("100")
                .ClientSideEvents(eve => { eve.Change("PageSizeMode"); })                                
                )                                
            </div>
            <div class="col-md-3 colwidth">
                Page Size
            </div>
            <div class="col-md-3 colwidth">
                @(Html.EJ().NumericTextbox("pageSize")
                .Value("11")
                .MinValue(1)
                .MaxValue(25)
                .ClientSideEvents(eve => { eve.Change("PageSize"); })
                .Width("100px")
                .DecimalPlaces(0)                
                )
            </div>
        
            <div class="row">
                <div class="col-md-3 colwidth">
                    Page Count
                </div>
                <div class="col-md-3 colwidth">
                    @(Html.EJ().NumericTextbox("pageCount")
                .Value("5")
                .MinValue(1)
                .MaxValue(8)
                .ClientSideEvents(eve => { eve.Change("PageCount"); })
                .Width("100px")
                .DecimalPlaces(0)
                    )
                </div>
                <div class="col-md-3 colwidth">
                    Current Page
                </div>
                <div class="col-md-3 colwidth">
                    @(Html.EJ().NumericTextbox("currentPage")
                .Value("1")
                .MinValue(1)
                .MaxValue(27)
                .ClientSideEvents(eve => { eve.Change("CurrentPage"); })
                .Width("100px")
                .DecimalPlaces(0)
                    )
                </div>
            </div>
        </div>
    </div>
</div>
}
    @section ScriptSection{
    <script type="text/javascript">
        function complete(args) {
            var page = this.model.pageSettings;
            $("#currentPage").ejNumericTextbox({ value: page.currentPage, maxValue: page.totalPages, });
        }
        function AllowPaging() {
            var obj = $("#TreeGridContainer").data("ejTreeGrid");
            if ($('#allowPaging').is(":checked")) {

                obj.option("allowPaging", true);
                $("#currentPage, #pageCount, #pageSize").ejNumericTextbox("enable");
                $("#pageSizeMode").ejDropDownList("enable");
            }
            else {
                obj.option("allowPaging", false);
                $("#currentPage, #pageCount, #pageSize").ejNumericTextbox("disable");
                $("#pageSizeMode").ejDropDownList("disable");
            }

        }        
        function PageCount(args) {
            var obj = $("#TreeGridContainer").data("ejTreeGrid"),               
                pagesettings = { pageCount: args.value, };
            obj.option("pageSettings", pagesettings);
        }
        function CurrentPage(args) {
            var obj = $("#TreeGridContainer").data("ejTreeGrid"),
                pagesettings = { currentPage: args.value };
            obj.option("pageSettings", pagesettings);
        }
        function PageSize(args) {
            var obj = $("#TreeGridContainer").data("ejTreeGrid"),                          
                pagesettings = { pageSize: args.value };
            obj.option("pageSettings", pagesettings);
        }
        function PageSizeMode(args) {
            var obj = $("#TreeGridContainer").data("ejTreeGrid"),
                mode;
            mode = args.value == "Root" ? "root" : "all";
            var pagesettings = { pageSizeMode: mode };
            obj.option("pageSettings", pagesettings);
        }
        $(function () {
            $("#sampleProperties").ejPropertiesPanel();
        });        
    </script>    
}


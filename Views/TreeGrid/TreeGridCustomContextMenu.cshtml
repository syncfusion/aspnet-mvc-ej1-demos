@section MetaTags{
   <meta name="description" content="This example illustrates how to display custom menu items in the context menu in the Syncfusion tree grid control.">
}
@section SampleHeading{<span class="sampleName">TreeGrid-Custom Context Menu-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{
    <style>
        .e-expandIcon:before {
            content: "\e703";
        }

        .e-collapseIcon:before {
            content: "\e707";
        }
        .e-aboveIcon:before {
            content: "\e7e5";
        }

        .e-belowIcon:before {
            content: "\e7e4";
        }

        .e-topIcon:before {
            content: "\e7e2";
        }

        .e-bottomIcon:before {
            content: "\e7e1";
        }

        .e-childIcon:before {
            content: "\e7e3";
        }
    </style>

    @(Html.EJ().TreeGrid("TreeGridContainer")
          .ChildMapping("Children")
          .TreeColumnIndex(1)
          .Columns(co =>
              {
                  co.Field("TaskId").HeaderText("Task Id").EditType(TreeGridEditingType.Numeric).Width(60).Add();
                  co.Field("TaskName").HeaderText("Task Name").EditType(TreeGridEditingType.String).Add();
                  co.Field("StartDate").HeaderText("Start Date").EditType(TreeGridEditingType.Datepicker).Add();
                  co.Field("EndDate").HeaderText("End Date").EditType(TreeGridEditingType.Datepicker).Add();
                  co.Field("Duration").HeaderText("Duration").EditType(TreeGridEditingType.Numeric).Add();
                  co.Field("Progress").HeaderText("Progress").EditType(TreeGridEditingType.Numeric).Add();
              }
          )
          .ClientSideEvents(cv=>cv.ContextMenuOpen("contextMenuOpen"))
          .SizeSettings(ss => ss.Width("100%").Height("350px"))
          .IsResponsive(true)
          .ContextMenuSettings(cms => cms.ShowContextMenu(true)
                               .ContextMenuItems(new List<TreeGridContextMenuItems>() {
              TreeGridContextMenuItems.Add,TreeGridContextMenuItems.Edit,TreeGridContextMenuItems.Delete
          }))
          
          .EditSettings(edit =>
          {
              edit.AllowEditing(true);
              edit.EditMode(TreeGridEditMode.RowEditing);
          })
          .Datasource(ViewBag.datasource)
    )
}
@section ScriptSection{
    <script type="text/javascript">
        function contextMenuOpen(args) {
            var isExpandable = true, isCollapsable = true, data;
            data = args.item;
            if (data && data.hasChildRecords) {
                if (data.expanded)
                    isExpandable = false;
                else
                    isCollapsable = false;
            } else {
                isExpandable = false;
                isCollapsable = false;
            }
            if (data) {
                var aboveMenu = args.contextMenuItems.filter(function (val) { return val.menuId == "Above" }),
                 belowMenu = args.contextMenuItems.filter(function (val) { return val.menuId == "Below" });
                aboveMenu[0].iconClass = "e-aboveIcon";
                belowMenu[0].iconClass = "e-belowIcon";

                var contextMenuItems = [{
                    headerText: "Top",
                    eventHandler: customMenuAddHandler,
                    menuId: "Top",
                    parentMenuId: "Add",
                    iconClass: "e-topIcon"

                }, {
                    headerText: "Bottom",
                    menuId: "Bottom",
                    parentMenuId: "Add",
                    eventHandler: customMenuAddHandler,
                    iconClass: "e-bottomIcon"
                },
                {
                    headerText: "Child",
                    menuId: "Child",
                    parentMenuId: "Add",
                    eventHandler: customMenuAddHandler,
                    iconClass: "e-childIcon"
                },
                 {
                     headerText: "Expand",
                     menuId: "Expand",
                     eventHandler: customMenuExpandCollapseHandler,
                     iconClass: "e-expandIcon",
                     disable: !isExpandable
                 },
                 {
                     headerText: "Collapse",
                     menuId: "Collapse",
                     eventHandler: customMenuExpandCollapseHandler,
                     iconClass: "e-collapseIcon",
                     disable: !isCollapsable
                 }
                ];
                args.contextMenuItems.push.apply(args.contextMenuItems, contextMenuItems);
            }
        }

        function customMenuAddHandler(args) {
            var currentMenuId = args.menuId,
                tempData = args.data && $.extend({}, args.data.item), rowPosition;
            if (currentMenuId == "Top") {
                rowPosition = ej.TreeGrid.RowPosition.Top;
            }
            else if (currentMenuId == "Bottom") {
                rowPosition = ej.TreeGrid.RowPosition.Bottom;
            }
            else if (currentMenuId == "Child") {
                rowPosition = ej.TreeGrid.RowPosition.Child;
            }
            this.addRow(tempData, rowPosition);
        }
        function customMenuExpandCollapseHandler(args) {
            var currentMenuId = args.menuId, expandCollapseArgs = {};
            expandCollapseArgs.data = args.data;
            if (currentMenuId === "Expand")
                expandCollapseArgs.expanded = true;
            else
                expandCollapseArgs.expanded = false;
            ej.TreeGrid.sendExpandCollapseRequest(this, expandCollapseArgs);
        }
    </script>
}


@section MetaTags{
   <meta name="description" content="This example demonstrates the various methods like scrollX, scrollY, enable and disable in a ASP.NET MVC Scroller">
}

@section SampleHeading{
    <span class="sampleName">ScrollBar-Methods-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{
    <div class="control">
        @{Html.EJ().Scroller("scrollcontent").Height("300").Width("100%").ContentTemplate(
            @<div>
                <div class="sampleContent">
                    <h3 style="font-size: 20px;">MVC</h3>
                    <div>
                        <p>
                            Model–view–controller (MVC) is a software architecture pattern which separates the
                            representation of information from the user's interaction with it. The model consists
                            of application data, business rules, logic, and functions. A view can be any output
                            representation of data, such as a chart or a diagram. Multiple views of the same
                            data are possible, such as a bar chart for management and a tabular view for accountants.
                            The controller mediates input, converting it to commands for the model or view.The
                            central ideas behind MVC are code reusability and n addition to dividing the application
                            into three kinds of components, the MVC design defines the interactions between
                            them.
                        </p>
                        <ul>
                            <li>
                                <b>A controller </b>can send commands to its associated view to change the view's
                                presentation of the model (e.g., by scrolling through a document). It can also send
                                commands to the model to update the model's state (e.g., editing a document).
                            </li>
                            <li>
                                <b>A model</b> notifies its associated views and controllers when there has been
                                a change in its state. This notification allows the views to produce updated output,
                                and the controllers to change the available set of commands. A passive implementation
                                of MVC omits these notifications, because the application does not require them
                                or the software platform does not support them.
                            </li>
                            <li>
                                <b>A view</b> requests from the model the information that it needs to generate
                                an output representation to the user.
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

).Render();}
    </div>
}
@section PropertiesSection{
    <div class="row">
        <div class="col-md-3 col-xs-4">
            Disable\Enable
        </div>
        <div class="col-md-3 col-xs-4">
            @Html.EJ().ToggleButton("enabled").DefaultText("False").Width("95px").ActiveText("True").ClientSideEvents(e => e.Change("onEnabled"))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-xs-4">
            ScrollX
        </div>
        <div class="col-md-3 col-xs-4">
            @Html.EJ().NumericTextbox("ScrollX").Width("95px").ShowSpinButton(false).WatermarkText("scrollX").ClientSideEvents(e => e.Change("setScrollX"))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-xs-4">
            ScrollY
        </div>
        <div class="col-md-3 col-xs-4">
            @Html.EJ().NumericTextbox("ScrollY").Width("95px").ShowSpinButton(false).WatermarkText("scrollY").ClientSideEvents(e => e.Change("setScrollY"))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-xs-4">
            Destroy
        </div>
        <div class="col-md-3 col-xs-4">
            @Html.EJ().ToggleButton("destroy").DefaultText("Destroy").Width("95px").ActiveText("Restore").ClientSideEvents(e => e.Change("onDestroyRestore"))
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 col-xs-4">
            AutoHide
        </div>
        <div class="col-md-3 col-xs-4">
            @Html.EJ().ToggleButton("autohide").DefaultText("True").Width("95px").ActiveText("False").ClientSideEvents(e => e.Change("onAutoHide"))
        </div>
    </div>

}
@section ScriptSection{
    <script>
        var scrollobj;
        $(function () {
            scrollobj = $("#scrollcontent").data("ejScroller");
            $(window).bind('resize', function () {
                scrollobj.refresh();
            });
        });
        function onEnabled(args) {
            if (args.isChecked) {
                scrollobj.disable();
            }
            else {
                scrollobj.enable();
            }
        }
        function setScrollX(args) {
            scrollobj.scrollX(args.value);
        }
        function setScrollY(args) {
            scrollobj.scrollY(args.value);
        }
        function onDestroyRestore(args) {
            if (args.isChecked) {
                scrollobj.destroy();
                enableOrDisableButtons(false);
            }
            else {
                $("#scrollcontent").ejScroller({ height: 300, width: 600 });
                scrollobj = $("#scrollcontent").data("ejScroller");
                enableOrDisableButtons(true);
            }
        }
        function enableOrDisableButtons(argsVal) {
            if (argsVal) {
                $(".cols-prop-area input.e-togglebutton[id!='destroy']").ejToggleButton("enable");
                $(".cols-prop-area input.e-numerictextbox").ejNumericTextbox("enable");
            }
            else {
                $(".cols-prop-area input.e-togglebutton[id!='destroy']").ejToggleButton("disable");
                $(".cols-prop-area input.e-numerictextbox").ejNumericTextbox("disable");
            }
        }
        function onAutoHide(args) {
            if (args.isChecked) {
                scrollobj.option("autoHide", true);
            }
            else {
                scrollobj.option("autoHide", false);
            }
        }
        $(document).ready(function () { $("#sampleProperties").ejPropertiesPanel(); });
    </script>
}
@section StyleSection{
    <style type="text/css" class="cssStyles">
        .control {
            border: 1px solid #bbbcbb;
            color: gray;
            width: 65%;
            height:100%;
        }

        .sampleContent {
            width: 700px;
            padding: 15px;
        }
    </style>
}


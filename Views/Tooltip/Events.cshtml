@section MetaTags{
   <meta name="description" content="This example shows the events that trigger on specific actions in the ASP.NET MVC Tooltip." >
}

@section SampleHeading{
    <span class="sampleName">Tooltip-Events-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{
    <div class="frame" id="custom">
                <div class="image">
                    <img src="../Content/images/tooltip/template-06.png" alt="Python Succinctly">
                </div>
                <div class="desc">Python Succinctly</div>
            </div>
		@Html.EJ().Tooltip("custom").Content("Learn to use the Python language to create programs of all kinds to creating practical applications.").Width("200px").ClientSideEvents(events => events.Create("tipCreate").Tracking("tipTrack").BeforeOpen("tipShown").Open("onShow").Close("onHide").BeforeClose("tipHide")).Associate(Associate.MouseFollow).Position(pos => pos.Stem(stem => stem.Horizontal("left").Vertical("center")).Target(target => target.Horizontal("right").Vertical("center")))

}
@section EventsDropdown{
    @Html.EJ().DropDownList("selectControls_input").TargetID("list").ShowCheckbox(true).CheckAll(true).ClientSideEvents(e => e.Change("evtpropscheckedevent").PopupShown("adjustpopupposition"))
<div id="list">
<ul  >
    <li value="create">Create</li>
    <li value="beforeOpen">beforeOpen</li>
    <li value="beforeClose">beforeHide</li>
    <li value="open">open</li>
    <li value="close">close</li>
    <li value="tracking">tracking</li>
</ul>
    </div>
}            
@section StyleSection{
<style class="cssStyles">
		.frame{
			box-sizing: border-box;
			border: 1px solid #ccc !important;
			border-radius: 0px;
			padding: 0px;
			text-align: center;
			width : 160px;
		}
		.frame img{
		    width : 100%;
		}
        
			.frame{
				width : 160px !important;
			}
        
		.circle {

				color: white;
				background: #1dabce;
				border-radius: 10px;
				padding: 2px;
			}
		.image{
		    background-color: #ccc;
		}
      img{
	      padding-top: 8px;
	  }

</style>
}

@section ScriptSection{
    <script type="text/javascript">
        var dialogObj;
        var dropObj;
    var trackCount = 1;
    var target, target1, target2;
    // Event wire and unwire
    function evtpropscheckedevent(args) {
        if (args.isChecked) {
            switch (args.selectedValue) {
                case "create":
                    target.option(args.selectedValue, "tipCreate");
                    break;
                case "beforeClose":
                    target.option(args.selectedValue, "tipHide");
                    break;
                case "beforeOpen":
                    target.option(args.selectedValue, "tipShown");
                    break;
                case "close":
                    target.option(args.selectedValue, "onHide");
                    break;
                case "open":
                    target.option(args.selectedValue, "onShow");
                    break;
                case "tracking":
                    target.option(args.selectedValue, "tipTrack");
                    break;
            }
        }
        else {
            target.option(args.selectedValue, null);

        }
    }

    function tipCreate(sender) {
        target = $("#custom").data("ejTooltip");
        jQuery.addEventLog("Tooltip control has been <span class='eventTitle'>created</span>.<br/>");

    }
    function tipTrack(sender) {
        if (trackCount == 1)
            jQuery.addEventLog("Tooltip has been <span class='eventTitle'>Tracking</span> <span class='circle' id='count'>" + trackCount + "</span><br/>");
        else {
            var target = $("div.event-tracer > div > div.content > div.eventarea > div#EventLog > div.divEventTrace > span > span#count");
            if (target != 0) {
                target = $("div.event-tracer > div > div.content > div.eventarea > div#EventLog > div.divEventTrace > span > span#count")[0];
                $(target).html('<span class="circle" id="count">' + trackCount + '</span>');
            }
        }
        trackCount++;
    }
    function tipHide(sender) {
        jQuery.addEventLog("<span class='eventTitle'>beforeClose</span> event is fired for Tooltip.<br/>");
        trackCount = 1;
    }
    function tipShown(sender) {
        jQuery.addEventLog("<span class='eventTitle'>beforeOpen</span> event is fired for Tooltip.<br/>");
        trackCount = 1;
    }
    function onHide(sender) {
        jQuery.addEventLog("Tooltip popup is <span class='eventTitle'>closed</span>.<br/>");
        trackCount = 1;
    }
    function onShow(sender) {
        jQuery.addEventLog("Tooltip popup is <span class='eventTitle'>opened</span>.<br/>");
        trackCount = 1;
    }
    function onClear() {
        jQuery.clearEventLog();
        trackCount = 1;
    }

</script>
}



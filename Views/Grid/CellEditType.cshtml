@using Syncfusion.JavaScript.Models
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
}
@section SampleHeading{<span class="sampleName">Grid-Cell Edit Type-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo explains how to set different edit types and how to define edit params for the datagrid columns in Syncfusion ASP.NET MVC DataGrid control.">
}
@section StyleSection{
    <link href="~/Content/ejthemes/responsive-css/ejgrid.responsive.css" rel="stylesheet" />
}
@section ControlsSection{
    @(Html.EJ().Grid<EditableOrder>("Editing")
        .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.dataSource).UpdateURL("CellEditUpdate").InsertURL("CellEditInsert").RemoveURL("CellEditDelete").Adaptor(AdaptorType.RemoteSaveAdaptor))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing(); })
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
                items.AddTool(ToolBarItems.Delete);
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
            });
        })
        .AllowPaging()
        .IsResponsive()
        .EnableResponsiveRow()
        .Columns(col =>
        {
            col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).TextAlign(TextAlign.Right).Width(85).ValidationRules(v => v.AddRule("required", true).AddRule("number", true)).Add();
            col.Field("CustomerID").HeaderText("Customer ID").Width(100).EditType(EditingType.StringEdit).ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3)).Add();
            col.Field("OrderDate").HeaderText("Order Date").TextAlign(TextAlign.Right).Width(100).Priority(4).EditType(EditingType.DateTimePicker).Format("{0:MM/dd/yyyy hh:mm:ss}").ValidationRules(v => v.AddRule("date", true)).Add();
            col.Field("EmployeeID").HeaderText("Employee ID").TextAlign(TextAlign.Right).Priority(2).EditType(EditingType.DropdownEdit).Width(80).Add();
            col.Field("Freight").HeaderText("Freight").TextAlign(TextAlign.Right).Width(80).Priority(3).EditType(EditingType.NumericEdit).Format("{0:C}").NumericEditOptions(new EditorProperties() { DecimalPlaces = 2 }).ValidationRules(v => v.AddRule("range", "[0,1000]")).Add();
            col.Field("ShipCity").HeaderText("Ship City").EditType(EditingType.DropdownEdit).Priority(4).Width(100).Add();
            col.Field("Verified").HeaderText("Verified").Width(90).EditType(EditingType.BooleanEdit).Priority(5).Add();
        })
         .ClientSideEvents(eve => { eve.ActionBegin("begin").EndEdit("endEdit").ActionComplete("complete"); })
    )
}
@section ScriptSection{
    <script type="text/javascript">
        function begin(args) {
            if (args.requestType == "save")
                this.element.ejWaitingPopup("show");
        }
        function endEdit(args) {
            this.element.ejWaitingPopup("hide");
        }
        function complete(args) {
            if (args.requestType == "cancel")
                this.element.ejWaitingPopup("hide");
        }
    </script>
}



@using Syncfusion.JavaScript.Models
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
}
@section SampleHeading{<span class="sampleName">Grid-ForeignKey Adaptor-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo explains how to perform actions such as filtering, sorting, searching, etc. on a foreign key column using the foreign key adaptor of Syncfusion ASP.NET MVC DataGrid control.">
}
@section ControlsSection{
    @(Html.EJ().Grid<OrdersView>("Editing")
        .Datasource(ds =>
        {
            ds.Json((IEnumerable<object>)ViewBag.dataSource)
            .UpdateURL("ForeignKeyUpdate")
            .InsertURL("ForeignKeyInsert")
            .RemoveURL("ForeignKeyDelete")
            .Adaptor(AdaptorType.RemoteSaveAdaptor);
        })
        .EditSettings(edit =>
        {
            edit.AllowAdding()
                .AllowDeleting()
                .AllowEditing();
        })
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Search);
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
                items.AddTool(ToolBarItems.Delete);
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
            });
        })
        .AllowPaging()
        .AllowFiltering()
        .AllowSorting()
        .Columns(col =>
        {
            col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).TextAlign(TextAlign.Right)
                .Width(90)
                .ValidationRules(v => v.AddRule("required", true).AddRule("number", true))
                .Add();
            col.Field("CustomerID").HeaderText("Customer ID").Width(90)
                .ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3))
                .Add();
            //field name given in foreignkey object + _ + foreignKeyValue
            col.Field("EmployeeID_FirstName").HeaderText("First Name")
                .EditType(EditingType.DropdownEdit)
                .Width(90)
                .Add();
            col.Field("Freight").HeaderText("Freight").TextAlign(TextAlign.Right).Width(80)
                .EditType(EditingType.NumericEdit).Format("{0:C}")
                .NumericEditOptions(new EditorProperties() { DecimalPlaces = 2 })
                .ValidationRules(v => v.AddRule("range", "[0,1000]"))
                .Add();
            col.Field("ShipName").HeaderText("ShipName").Width(150).Add();
            col.Field("ShipCountry").HeaderText("ShipCountry").Width(90).EditType(EditingType.DropdownEdit).Add();
        })
         .ClientSideEvents(eve =>
         {
             eve.Load("onLoad");
         })
    )

}
<script type="text/javascript">
    var foreignData = @Html.Raw(Json.Encode(ViewBag.foreignCol));

    var foreignObj = [
        {
            dataSource: foreignData,
            foreignKeyField: "EmployeeID", //Property in the Grid's main dataSource
            field: "EmployeeID", //Property in foreignkey dataSource
            foreignKeyValue: "FirstName" //Property in foreignkey dataSource
        }
    ];


    function onLoad(args){
        this.model.dataSource.adaptor = new ej.ForeignKeyAdaptor(foreignObj, "remoteSaveAdaptor");
    }
</script>


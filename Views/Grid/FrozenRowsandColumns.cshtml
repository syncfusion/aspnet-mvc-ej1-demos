@using Syncfusion.JavaScript.Models
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
}

@section SampleHeading{<span class="sampleName">Grid-Frozen Rows and Columns-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo explains how to freeze the required number of rows and columns when the content is scrolled using Syncfusion ASP.NET MVC DataGrid control.">
}
@section ControlsSection{
    @(Html.EJ().Grid<EditableOrder>("FrozenGrid")
        .Datasource((IEnumerable<object>)ViewBag.dataSource)
                .ScrollSettings(scroll => { scroll.Height(337).Width(700).FrozenRows(1); })
        .AllowScrolling()
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing(); })
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
                items.AddTool(ToolBarItems.Delete);
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
            });
        })
        .Columns(col =>
        {
            col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).IsFrozen(true).TextAlign(TextAlign.Right).ValidationRules(v => v.AddRule("required", true).AddRule("number",true)).Width(90).Add();
            col.Field("CustomerID").HeaderText("Customer ID").Width(100).IsFrozen(true).ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3)).Add();
            col.Field("EmployeeID").HeaderText("Employee ID").TextAlign(TextAlign.Right).ValidationRules(v => v.AddRule("required", true).AddRule("number",true)).Width(100).Add();
            col.Field("Freight").HeaderText("Freight").TextAlign(TextAlign.Right).Width(90).Format("{0:C}").EditType(EditingType.NumericEdit).NumericEditOptions(new EditorProperties() { DecimalPlaces = 2 }).Add();
            col.Field("ShipCity").HeaderText("Ship City").Width(110).Add();
            col.Field("ShipName").HeaderText("Ship Name").Width(170).Add();
            col.Field("OrderDate").HeaderText("Order Date").TextAlign(TextAlign.Right).Width(100).Format("{0:MM/dd/yyyy}").EditType(EditingType.Datepicker).ValidationRules(v => v.AddRule("date", true)).Add();
            col.Field("ShipPostalCode").HeaderText("Postal Code").TextAlign(TextAlign.Right).Width(140).Add();
            col.Field("Verified").HeaderText("Verified").EditType(EditingType.BooleanEdit).Width(100).Add();
        })
        )
}
@section PropertiesSection{
    <div class="row">
        <div class="col-md-3">
            Frozen Columns
        </div>
        <div class="col-md-3">
            @(Html.EJ().NumericTextbox("frozenColumns")
                  .MaxValue(5)
                  .MinValue(1)
                  .Value("2")
                  .Width("120px")
                  )
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Frozen Rows
        </div>
        <div class="col-md-3">
            @(Html.EJ().NumericTextbox("frozenRows")
                  .MaxValue(5)
                  .MinValue(1)
                  .Value("1")
                  .Width("120px")
                  )
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            @(Html.EJ().Button("set")
                  .Text("Set")
                  .ClientSideEvents(eve => { eve.Click("onClick"); })
                  .Width("120px")
                  )
        </div>
    </div>
    <div id="ddl">
        <ul>
            <li>Normal</li>
            <li>Dialog</li>
            <li>InlineForm</li>
            <li>ExternalForm</li>
        </ul>
    </div>
    <div class="row">
        <div class="col-md-3">
            Edit Mode
        </div>
        <div class="col-md-3">
            @(Html.EJ().DropDownList("editMode")
                  .TargetID("ddl")
                  .Width("120px")
                  .SelectedItemIndex(0)
                  .ClientSideEvents(eve => { eve.Change("change"); })
                  )
        </div>
    </div>
}
@section ScriptSection{
    <script type="text/javascript">
       $(function () {
			var gridObj = $("#FrozenGrid").ejGrid("instance");
            scrolWidth = gridObj.model.scrollSettings.width / $(".cols-sample-area").width();
            if (gridObj.element.width() > $(".cols-sample-area").width()) {
                var scrollerwidth = Math.floor($(".cols-sample-area").width())
                gridObj.option("model.scrollSettings", { width: scrollerwidth })
                scrolWidth = 1;
            }
           $("#sampleProperties").ejPropertiesPanel();
        });
		$(window).resize(function () {
            var gridObj = $("#FrozenGrid").ejGrid("instance")
            var scrollerwidth = Math.floor($(".cols-sample-area").width() * scrolWidth)
            gridObj.option("model.scrollSettings", { width: scrollerwidth })
        });
        function change(args) {
            var gridObj = $("#FrozenGrid").ejGrid("instance");
            gridObj.option("model.editSettings.editMode", args.selectedText)
            if (gridObj.model.isEdit)
                gridObj.cancelEdit();
        }      
        function onClick(args) {
            var scrolling = {};
            scrolling = { frozenRows: parseInt($("#frozenRows").ejNumericTextbox("model.value"), 10), frozenColumns: parseInt($("#frozenColumns").ejNumericTextbox("model.value"), 10), height: 337 };
            $("#FrozenGrid").ejGrid("model.scrollSettings", scrolling);
        }
    </script>
}


@section SampleHeading{<span class="sampleName">Grid-Grouping API-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo explains how to group or ungroup columns using methods in Syncfusion ASP.NET MVC DataGrid control.">
}
@section ControlsSection{
    @(Html.EJ().Grid<EditableOrder>("Grouping")
        .Datasource((IEnumerable<object>)ViewBag.datasource)
        .AllowGrouping()
        .EnableHeaderHover()
        .AllowPaging()
        .AllowScrolling()
        .ScrollSettings(scroll => { scroll.Height(380).Width(700); })
        .Columns(col =>
        {
            col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).TextAlign(TextAlign.Right).Width(150).Add();
            col.Field("CustomerID").HeaderText("Customer ID").Width(200).Add();
            col.Field("Freight").HeaderText("Freight").TextAlign(TextAlign.Right).Width(150).Format("{0:C}").Add();
            col.Field("Verified").HeaderText("Verified").Width(150).Add();
            col.Field("ShipName").HeaderText("Ship Name").Width(200).Add();
        }).ClientSideEvents(eve => { eve.ActionBegin("begin"); })
    )
}
@section PropertiesSection{
    <div id="ddl1">
        <ul>
            <li>Order ID</li>
            <li>Customer ID</li>
            <li>Freight</li>
            <li>Verified</li>
            <li>ShipName</li>
        </ul>
    </div>
    <div class="row">
        <div class="col-md-3">
            Column Name
        </div>
        <div class="col-md-3">
            @(Html.EJ().DropDownList("columnName")
                .TargetID("ddl1")
                .Width("115px")
                .SelectedItemIndex(0)
                        .ClientSideEvents(eve => { eve.Change("Onchange"); })
            )
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            @(Html.EJ().Button("groupColumn")
                .Width("100px")
                .Size(ButtonSize.Medium)
                .ClientSideEvents(eve => { eve.Click("clicktoGroup"); })
                .Text("GroupColumn")
            )
        </div>
        <div class="col-md-3">
            @(Html.EJ().Button("unGroupColumn")
                .Width("115px")
                .Size(ButtonSize.Medium)
                .ClientSideEvents(eve => { eve.Click("clicktoGroup"); })
                .Text("UnGroupColumn")
            )
        </div>
    </div>
}
@section ScriptSection{
    <script type="text/javascript">
        var group = true;
        $(function () {
            var gridObj = $("#Grouping").ejGrid("instance");
            scrolWidth = gridObj.model.scrollSettings.width / $(".cols-sample-area").width();
            if (gridObj.element.width() > $(".cols-sample-area").width()) {
                var scrollerwidth = Math.floor($(".cols-sample-area").width())
                gridObj.option("model.scrollSettings", { width: scrollerwidth })
                scrolWidth = 1;
            }
            $("#sampleProperties").ejPropertiesPanel();
            $("#unGroupColumn").ejButton("disable");
        });
        $(window).resize(function () {
            var gridObj = $("#Grouping").ejGrid("instance")
            var scrollerwidth = Math.floor($(".cols-sample-area").width() * scrolWidth)
            gridObj.option("model.scrollSettings", { width: scrollerwidth })
        });
        function begin(args) {
            if (args.requestType == "grouping") {
                if (this.model.groupSettings.groupedColumns.length == this.model.columns.length) {
                    args.cancel = true;
                    alert("Atleast one column must be in grid");
                    group = false;
                }
            }
        }
        function clicktoGroup(args) {
            var gridObj = $("#Grouping").data("ejGrid");
            var dropdownobj = $("#columnName").data("ejDropDownList");
            var columnName = dropdownobj.getSelectedValue().replace(/\s*/g, '');

            if (this.element.attr("id") == "groupColumn") {
                gridObj.groupColumn(columnName);
                if (group) {
                    $("#groupColumn").ejButton("disable");
                    $("#unGroupColumn").ejButton("enable");
                }
            }
            else {
                gridObj.ungroupColumn(columnName);
                group = true;
                $("#unGroupColumn").ejButton("disable");
                $("#groupColumn").ejButton("enable");
            }
        }
        function Onchange() {

            var gridObj = $("#Grouping").data("ejGrid");
            var dropdownobj = $("#columnName").data("ejDropDownList");

            var columnName = dropdownobj.getSelectedValue().replace(/\s*/g, '');


            if ($.inArray(columnName, gridObj.model.groupSettings.groupedColumns) != -1) {
                $("#unGroupColumn").ejButton("enable");
                $("#groupColumn").ejButton("disable");
            }
            else {
                $("#groupColumn").ejButton("enable");
                $("#unGroupColumn").ejButton("disable");
            }
        }
    </script>
}


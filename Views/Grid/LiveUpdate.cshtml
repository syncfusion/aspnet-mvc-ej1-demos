@section SampleHeading{<span class="sampleName">Grid-Live Update-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo explains how to update the values of the cells in datagrid continuously in regular intervals of time with Syncfusion ASP.NET MVC DataGrid control.">
}
@section StyleSection{
    <style type="text/css" class="cssStyles">
        .align
        {
            padding: 10px;
            float: right;
        }
        
        .margin
        {
            margin-left: 10px;
            margin-right: -10px;
        }
    </style>
}
@section ControlsSection{
    @(Html.EJ().Grid<OrdersView>("LiveUpdate")
        .Datasource((IEnumerable<object>)ViewBag.datasource)
        .AllowSelection(false)
        .EnableRowHover(false)
        .ClientSideEvents(eve => { eve.QueryCellInfo("update"); })
        .Columns(col =>
        {
            col.Field("ProductID").HeaderText("Product ID").IsPrimaryKey(true).TextAlign(TextAlign.Right).Width(55).Add();
            col.Field("ProductName").HeaderText("Product Name").Width(160).Add();
            col.Field("UnitPrice").HeaderText("Unit Price").TextAlign(TextAlign.Right).Width(65).Format("{0:C}").Add();
            col.Field("UnitsInStock").HeaderText("Units In Stock").TextAlign(TextAlign.Right).Width(75).Add();
            col.Field("UnitsOnOrder").HeaderText("Units On Order").TextAlign(TextAlign.Right).Width(75).Add();
        })
        )
}
@section PropertiesSection{
    <div class="row">
        <div class="col-md-3">
            Start Update
        </div>
        <div class="col-md-3">
            @(Html.EJ().Button("Start")
                .Width("100px")
                .Text("Start")
                .ClientSideEvents(eve => { eve.Click("start"); })
                )
        </div>
        <div class="col-md-3">
            Stop Update
        </div>
        <div class="col-md-3">
            @(Html.EJ().Button("Stop")
                .Width("100px")
                .Enabled(false)
                .ClientSideEvents(eve => { eve.Click("stop"); })
                .Text("Stop")
                )
        </div>
    </div>
}
@section ScriptSection{
    <script type="text/javascript">
        $(function () {
            $("#sampleProperties").ejPropertiesPanel();
        });
        function update(args) {
            if (args.column !== undefined && args.column.field === "UnitPrice") {
                var $element = $(args.cell);
                if (ej.parseFloat(ej.format(args.text, "c")) < 30)
                    $element.css("background-color", "#5ec026").css("color", "black");
                else
                    $element.css("background-color", "#86dd55").css("color", "black");
            }
        }
        function start() {
            timerID = setInterval(refreshGrid, 2000);
            $("#Start").ejButton("instance").disable();
            $("#Stop").ejButton("instance").enable();
        }
        function stop() {
            clearInterval(timerID);
            $("#Stop").ejButton("instance").disable();
            $("#Start").ejButton("instance").enable();
        }
        function refreshGrid() {
            var model = $("#LiveUpdate").ejGrid("model");
            for (var i = 0; i < model.dataSource.length; i++) {
                model.dataSource[i].UnitPrice = Math.floor(Math.random() * 50 + 1);
                model.dataSource[i].UnitsInStock = Math.floor(Math.random() * 100);
                model.dataSource[i].UnitsOnOrder = Math.floor(Math.random() * 5) * 10;
            }
            $("#LiveUpdate").ejGrid("refreshContent");
        }
    </script>
}


@using Syncfusion.JavaScript.Models
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"></script>
}
@section SampleHeading{<span class="sampleName">Grid-Inline Editing-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo explains how to edit the records of datagrid in inline mode using Syncfusion ASP.NET MVC DataGrid control.">
}
@section ControlsSection{
    @(Html.EJ().Grid<OrdersView>("Editing")
        .Datasource(ds => ds.Json((IEnumerable<object>)ViewBag.dataSource).UpdateURL("NormalUpdate").InsertURL("NormalInsert").RemoveURL("NormalDelete").Adaptor(AdaptorType.RemoteSaveAdaptor))
        .EditSettings(edit => { edit.AllowAdding().AllowDeleting().AllowEditing(); })
        .ToolbarSettings(toolbar =>
        {
            toolbar.ShowToolbar().ToolbarItems(items =>
            {
                items.AddTool(ToolBarItems.Add);
                items.AddTool(ToolBarItems.Edit);
                items.AddTool(ToolBarItems.Delete);
                items.AddTool(ToolBarItems.Update);
                items.AddTool(ToolBarItems.Cancel);
            });
        })
        .AllowPaging()
        .Columns(col =>
        {
            col.Field("OrderID").HeaderText("Order ID").IsPrimaryKey(true).TextAlign(TextAlign.Right).Width(90).ValidationRules(v => v.AddRule("required", true).AddRule("number", true)).Add();
            col.Field("CustomerID").HeaderText("Customer ID").Width(90).ValidationRules(v => v.AddRule("required", true).AddRule("minlength", 3)).Add();
            col.Field("EmployeeID").HeaderText("Employee ID").TextAlign(TextAlign.Right).EditType(EditingType.DropdownEdit).Width(90).ValidationRules(v => v.AddRule("required", true)).Add();
            col.Field("Freight").HeaderText("Freight").TextAlign(TextAlign.Right).Width(80).EditType(EditingType.NumericEdit).Format("{0:C}").NumericEditOptions(new EditorProperties() { DecimalPlaces = 2 }).ValidationRules(v => v.AddRule("range", "[0,1000]")).Add();
            col.Field("ShipName").HeaderText("ShipName").Width(150).Add();
            col.Field("ShipCountry").HeaderText("ShipCountry").Width(90).EditType(EditingType.DropdownEdit).Add();
        })
         .ClientSideEvents(eve => { eve.ActionComplete("complete").ActionBegin("begin").EndEdit("endEdit").EndAdd("endAdd"); })       
      )
    
}
@section PropertiesSection{
     <div id="RowPosition">
         <ul>
             <li value="top"> Top </li>
             <li value="bottom"> Bottom </li>
         </ul>
     </div>
           <div class="row">
               <div class="col-md-3">
                   Add New Row Position
               </div>
               <div class="col-md-3">
                   @(Html.EJ().DropDownList("editMode")
                     .TargetID("RowPosition")
                     .Width("120px")
                     .SelectedItemIndex(0)
                     .ClientSideEvents(eve => { eve.Change("selectChange"); })
                     )
               </div>
           </div>
    }
<script type="text/javascript">
    $(function () {
        $("#sampleProperties").ejPropertiesPanel();
    });
    function selectChange(args) {
	$("#Editing").ejGrid("cancelEdit");
        $("#Editing").ejGrid("model.editSettings.rowPosition", args.selectedValue);
    }
	function begin(args) {
		if(args.requestType=="save")
		    this.element.ejWaitingPopup("show");
        }
        function endEdit(args) {
            this.element.ejWaitingPopup("hide");
        }
        function endAdd(args) {
            this.element.ejWaitingPopup("hide");
        }
        function complete(args) {
            if (args.requestType == "cancel")
                this.element.ejWaitingPopup("hide");
        }
</script>


@section SampleHeading{ <span class="sampleName">PivotGrid-Drill Through-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo for Syncfusion Essential JS1 for ASP.NET MVC pivot grid control describes how to view the raw data besides each value cell">
}
@using Syncfusion.JavaScript;
@using Syncfusion.JavaScript.Olap;
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/ej.web.all.min.js")" type="text/javascript"></script>
}
@section StyleSection{
    <style>
        #PivotGrid1 {
            width: 100%;
            height: 350px;
            overflow: auto;
        }

        #CodeViewTab ul > li:first-child + li {
            display: none;
        }

        .row .cols-prop-area {
            margin-top: 30px;
            width: 30%;
            height: 120px;
            min-height: 0px;
        }

        .row .cols-sample-area {
            width: 100%;
        }
		.clientDialog { max-height:250px;}
		@@media (min-width: 1920px) {.row .cols-prop-area { width: 22% !important; } }
		
    </style>
}

@section ScriptSection{
    <script type="text/javascript">
        var pivotGrid;
        $(function () {
            $("#sampleProperties").ejPropertiesPanel();
            $("#rdbServer, #rdbClient").ejRadioButton({ change: "renderGrid" });
            pivotGrid = $("#PivotGrid1").data("ejPivotGrid");
        });
        function renderGrid(args) {
            $(pivotGrid.element).html("");
            if (args.model.id == "rdbClient") {
                pivotGrid.model.url = "";
                pivotGrid.model.operationalMode = "clientmode";
                pivotGrid.model.dataSource = {
                    data: pivot_dataset, cube: "",
                    rows: [{ fieldName: "Country", fieldCaption: "Country" }, { fieldName: "State", fieldCaption: "State" }],
                    columns: [{ fieldName: "Product", fieldCaption: "Product" }],
                    values: [{ fieldName: "Amount", fieldCaption: "Amount" }, { fieldName: "Quantity", fieldCaption: "Quantity" }],
                    filters:[]
                };
            }
            else {
                pivotGrid.model.dataSource = { data: null, cube: "" };
                pivotGrid.model.operationalMode = "servermode";
                pivotGrid.model.url = "../api/RelationalGrid";
            }
            pivotGrid._tempFilterData = [];
            pivotGrid._load();
        }
        function onLoad(args) {
            if (args.model.dataSource.data == null)
                args.model.dataSource.data = pivot_dataset;
        }
        function drillData(args) {
            gridData = args.selectedData;
            var dialogContent = ej.buildTag("div#Grid", { height: "50px" })[0].outerHTML;
            ejDialog = ej.buildTag("div#clientDialog.clientDialog", dialogContent, { "opacity": "1", "overflow": "auto" }).attr("title", "Drill Through Information")[0].outerHTML;
            $(ejDialog).appendTo("#" + this._id);
            this.element.find(".clientDialog").ejDialog({ width: "70%", height: "auto", content: "#" + this._id, enableResize: false, close: ej.proxy(ej.Pivot.closePreventPanel, this) });

            $("#Grid").ejGrid({
                dataSource: gridData,
            });

        }
        window.loadPivotGridFrameTheme = function () {
            window.setTimeout(function () {
                var pivotGridElement = $("#PivotGrid1").data("ejPivotGrid");
                if (pivotGridElement && pivotGridElement.model.enableGroupingBar && pivotGridElement.getJSONRecords() != null)
                    pivotGridElement.renderControlFromJSON();
            }, 2500);
        }
    </script>
}
@section ControlsSection{
    @Html.EJ().Pivot().PivotGrid("PivotGrid1").EnableGroupingBar(true).EnableDrillThrough(true).ClientSideEvents(clientSideEvents => clientSideEvents.Load("onLoad").DrillThrough("drillData")).DataSource(dataSource => dataSource.Rows(rows => { rows.FieldName("Country").FieldCaption("Country").Add(); rows.FieldName("State").FieldCaption("State").Add(); }).Columns(columns => { columns.FieldName("Product").FieldCaption("Product").Add(); }).Values(values => { values.FieldName("Amount").Add(); values.FieldName("Quantity").Add(); values.FieldName("Price").FieldCaption("Price"); }))

}
@section PropertiesSection{
    <div class="prop-grid">
        <div class="row">
            <div class="col-md-3" style="width:20%">
                Mode :
            </div>
            <div class="col-md-3" style="width:30%">
                <input type="radio" name="dftView" id="rdbClient" checked="checked" /><label for="rdbClient" class="clslab">Client</label>
            </div>
            <div class="col-md-3" style="width:30%">
                <input type="radio" name="dftView" id="rdbServer" /><label for="rdbServer" class="clslab">Server</label>
            </div>
        </div>
    </div>
}


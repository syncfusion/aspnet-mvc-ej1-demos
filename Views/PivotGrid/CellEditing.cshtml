@section SampleHeading{ <span class="sampleName">PivotGrid-Cell Editing-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This demo for Syncfusion Essential JS1 for ASP.NET MVC pivot grid control describes how to edit the value cells at runtime.">
}
@using Syncfusion.JavaScript;
@using Syncfusion.JavaScript.Olap;
@section ScriptReferenceSection{
    <script src="@Url.Content("~/Scripts/ej.web.all.min.js")" type="text/javascript"></script>
}
@section StyleSection{
    <style>
        #PivotGrid1 {
            height: 350px; 
            width: 100%; 
            overflow: auto;
            float:left;
        }
        .row .cols-sample-area  {
             overflow: auto;
             width: 100%
        }
         .row .cols-prop-area {
            margin-top:10px;
            width: 45%;
            height: auto;
            min-height: 80px;
        }
        label {
            font-weight:normal;
        }
        #CodeViewTab ul > li:first-child + li{
            display:none;
        }
		
		@@media (min-width: 1920px) { .row .cols-prop-area { width: 27% !important; } }
    </style>
}

@section ScriptSection{
    <script type="text/javascript">

        function onLoad(args) {
            args.model.dataSource.data = pivot_dataset;
        }

        $(function () {
            $("#clientMode, #serverMode").ejRadioButton({ change: "renderGrid" });
            $("#Btn").ejButton({
                roundedCorner: true,
                size: "small",
                type: ej.ButtonType.Button,
                click: "Reset"
            });
            pivotGrid = $("#PivotGrid1").data("ejPivotGrid");
            $("#sampleProperties").ejPropertiesPanel();
        });

        function renderGrid(args) {
            $(pivotGrid.element).html("");
            if (args.model.id == "clientMode") {
                pivotGrid.model.operationalMode = ej.PivotGrid.OperationalMode.ClientMode;
                pivotGrid.model.url = "";
                pivotGrid.setOlapReport(null);
                pivotGrid.model.dataSource = {
                    data: pivot_dataset, cube: "",
                    rows: [{ fieldName: "Country", fieldCaption: "Country" }, { fieldName: "State", fieldCaption: "State" }],
                    columns: [{ fieldName: "Date", fieldCaption: "Date" }, { fieldName: "Product", fieldCaption: "Product" }],
                    values: [{ fieldName: "Amount", fieldCaption: "Amount" }, { fieldName: "Quantity", fieldCaption: "Quantity" }],
                    filters:[]
                };
            }
            else {
                pivotGrid.model.dataSource = { data: null, cube: "" };
                pivotGrid.model.operationalMode = ej.PivotGrid.OperationalMode.ServerMode;
                pivotGrid.model.url = "../api/RelationalGrid";
            }
            pivotGrid.refreshPivotGrid();
        }
        function Reset(args) {
            pivotGrid.refreshPivotGrid();
        }
        window.loadPivotGridFrameTheme = function () {
            window.setTimeout(function () {
                var pivotGridElement = $("#PivotGrid1").data("ejPivotGrid");
                if (pivotGridElement && pivotGridElement.model.enableGroupingBar && pivotGridElement.getJSONRecords() != null)
                    pivotGridElement.renderControlFromJSON();
            }, 2500);
        }
    </script>
}
@section ControlsSection{
    @Html.EJ().Pivot().PivotGrid("PivotGrid1").EnableCellEditing(true).ClientSideEvents(clientSideEvents => clientSideEvents.Load("onLoad")).DataSource(dataSource => dataSource.Rows(rows => { rows.FieldName("Date").FieldCaption("Date").Add(); rows.FieldName("Product").FieldCaption("Product").Add(); }).Columns(columns => { columns.FieldName("Country").FieldCaption("Country").Add(); columns.FieldName("State").FieldCaption("State").Add(); }).Values(values => { values.FieldName("Amount").Add(); values.FieldName("Quantity").Add(); }))
}
@section PropertiesSection{
<div id="sampleProperties">
    <div class="prop-grid">
        <div class="row">
            <table>
                <tr>
                    <td class="col-md-3" style="width:100px">
                        Mode:
                    </td>
                    <td class="col-md-3" style="width:120px">
                        <input type="radio" name="dftView" id="clientMode" checked="checked" /><label for="clientMode" class="clslab">Client Mode</label>
                    </td>
                    <td class="col-md-3" style="width:120px">
                        <input type="radio" name="dftView" id="serverMode" /><label for="serverMode" class="clslab">Server Mode</label>
                    </td>
                </tr>
            </table>
        </div>
        <div class="row">
            <table>
                <tr>
                    <td class="col-md-3" style="width:100px">
                        Editing:
                    </td>
                    <td class="col-md-3" style="width:120px;margin-top:-4px">
                        <input type="button" id="Btn" value="Reset" />
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
}


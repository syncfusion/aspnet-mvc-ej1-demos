@section SampleHeading{
    <span class="sampleName">Diagram-Rulers-ASP.NET MVC-SYNCFUSION</span>
}
@section MetaTags{
    <meta name="description" content="This sample demonstrates ASP.NET MVC diagramâ€™s ruler behavior and its customization in the diagram.">
}
@section ControlsSection{

    <div class="control_section">
        <div class="diagram_section">
            @Html.EJ().Diagram("DiagramContent", ViewData["diagramModel"] as Syncfusion.JavaScript.DataVisualization.Models.DiagramProperties)
        </div>
    </div>
}
@section PropertiesSection{
    <div id="sampleProperties">
        <div class="prop-grid">

            <div class="row">
                <div class="col-md-6">
                    <b>Ruler Settings</b>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 aligntop">
                    Orientation
                </div>
                <div class="col-md-3">
                    @Html.EJ().DropDownList("orientation").TargetID("orientation_list").Value("horizontal").Width("110px").ClientSideEvents(s => s.Change("dropDownChanged"))
                    <div id="orientation_list">
                        <ul>
                            <li value="horizontal">Horizontal</li>
                            <li value="vertical">Vertical</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 aligntop">
                    Show rulers
                </div>
                <div class="col-md-3">
                    @Html.EJ().CheckBox("showRulers").Checked(true).ClientSideEvents(s => s.Change("showRulers"))
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 aligntop">
                    Interval
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("Interval").CssClass("pageBorderWidth").MinValue(0).MaxValue(50).Width("110px").Value(10).ClientSideEvents(s => s.Change("ticksChange"))
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 aligntop">
                    Segment Width
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("segmentWidth").MinValue(0).MaxValue(1000).Width("110px").Value(100).ClientSideEvents(s => s.Change("segmentsChange"))
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 aligntop">
                    Thickness
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("Thickness").MinValue(5).MaxValue(150).Width("110px").Value(25).ClientSideEvents(s => s.Change("thicknessChange"))
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 aligntop">
                    Alignment
                </div>
                <div class="col-md-3">
                    @Html.EJ().DropDownList("align").TargetID("align_list").Value("rightorbottom").Width("110px").ClientSideEvents(s => s.Change("alignChanged"))
                    <div id="align_list">
                        <ul>
                            <li value="rightorbottom">Right or Bottom</li>
                            <li value="leftortop">Left or Top</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-3 aligntop">
                    Marker Color
                </div>
                <div class="col-md-3">
                    @Html.EJ().DropDownList("MarkerColor").TargetID("marker_list").Value("red").Width("110px").ClientSideEvents(s => s.Change("markerChanged"))
                    <div id="marker_list">
                        <ul>
                            <li value="blue">Blue</li>
                            <li value="red">Red</li>
                            <li value="green">Green</li>
                            <li value="yellow">Yellow</li>
                            <li value="pink">Pink</li>
                            <li value="black">Black</li>
                        </ul>
                    </div>
                </div>
            </div> 
        </div>
    </div>


}
@section ScriptSection{
    <script type="text/javascript">
        function ticksChange(args) {
            updateSettings("ticks", args.value);
        }
        function segmentsChange(args) {
            updateSettings("segmentWidth", args.value);
        }
        function thicknessChange(args) {
            updateSettings("thickness", args.value);
        }
        function alignChanged(args) {
            updateSettings("align", args.value);
        }
        function markerChanged(args) {
            updateSettings("markerColor", args.value);
        }
        function arrangeChanged(args) {
            updateSettings("arrange", args.value);
        }

        function arrangeTick(args) {
            if (args.tickInterval % 100 == 0) {
                args.tickLength = 25;
            }
            else if (args.tickInterval % 50 == 0) {
                args.tickLength = 20;
            }
            else if (args.tickInterval % 20 == 0) {
                args.tickLength = 15;
            }
            else if (args.tickInterval % 10 == 0) {
                args.tickLength = 10;
            }
        }


        function showRulers(args) {
            $("#DiagramContent").ejDiagram({
                rulerSettings: { showRulers: args.model.checked }
            });
        }

        function updateSettings(option, value) {
            var orientation = $("#orientation").ejDropDownList("instance");
            var diagram = $("#DiagramContent").ejDiagram("instance");
            var rulerSettings;
            switch (option) {
                case "thickness":
                    if (orientation.model.itemValue === "horizontal")
                        rulerSettings = { horizontalRuler: { thickness: value } };
                    else
                        rulerSettings = { verticalRuler: { thickness: value } };
                    break;
                case "ticks":
                    if (orientation.model.itemValue === "horizontal")
                        rulerSettings = { horizontalRuler: { interval: value } };
                    else
                        rulerSettings = { verticalRuler: { interval: value } };
                    break;
                case "segmentWidth":
                    if (orientation.model.itemValue === "horizontal")
                        rulerSettings = { horizontalRuler: { segmentWidth: value } };
                    else
                        rulerSettings = { verticalRuler: { segmentWidth: value } };
                    break;
                case "align":
                    if (orientation.model.itemValue === "horizontal")
                        rulerSettings = { horizontalRuler: { tickAlignment: value } };
                    else
                        rulerSettings = { verticalRuler: { tickAlignment: value } };
                    break;

                case "markerColor":
                    if (orientation.model.itemValue === "horizontal")
                        rulerSettings = { horizontalRuler: { markerColor: value } };
                    else
                        rulerSettings = { verticalRuler: { markerColor: value } };
                    break;
                case "arrange":
                    rulerSettings = { horizontalRuler: { arrangeTick: "arrangeTick" }, verticalRuler: { arrangeTick: "arrangeTick" } };
                    break;
            }
            if (rulerSettings) {
                $("#DiagramContent").ejDiagram({
                    rulerSettings: rulerSettings
                });
            }
        }

        $(window).on("load", function () {
            $("#sampleProperties").ejPropertiesPanel();
        });
    </script>
}
<style>
    .control_section {
        height: 600px;
        width: 100%;
        background-color: transparent;
    }

    .diagram_section {
        width: 100%;
        height: 100%;
        float: left;
    }
</style>


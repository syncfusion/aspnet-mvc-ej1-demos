@section SampleHeading{ <span class="sampleName">Diagram-Organizational Chart-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This sample illustrates visualizing a simple organizational chart with an external data source and ASP.NET MVC diagramâ€™s organizational chart algorithm.">
}
<style>
    #resizeBorder {
        stroke: black;
        stroke-width: 3px;
        stroke-dasharray: none;
        opacity: 1;
    }

    #nw-resize, #n-resize, #ne-resize, #w-resize, #e-resize, #sw-resize, #s-resize, #se-resize {
        fill: none;
        stroke: transparent;
    }
</style>

@section ControlsSection{
    <div>
        @Html.EJ().Diagram("OrganizationChart", ViewData["diagramModel"] as Syncfusion.JavaScript.DataVisualization.Models.DiagramProperties)
    </div>
}
@section PropertiesSection{
    <div id="Propertiespanel">
        <div>
            <div class="row">
                <div class="col-md-6">
                    <b>Layout Settings</b>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -25px;">
                    Orientation
                </div>
                <div class="col-md-6">
                    <input type="text" id="align" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -25px;">
                    Margin X
                </div>
                <div class="col-md-6">
                    @Html.EJ().NumericTextbox("marginX").Width("130px").Value(0).MinValue(-160).MaxValue(1000).ClientSideEvents(s => s.Change("changeMarginX"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -25px;">
                    Margin Y
                </div>
                <div class="col-md-6">
                    @Html.EJ().NumericTextbox("marginY").Width("130px").Value(15).MinValue(-30).MaxValue(1000).ClientSideEvents(s => s.Change("changeMarginY"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <b>Spacing</b>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -25px;">
                    Horizontal
                </div>
                <div class="col-md-6">
                    @Html.EJ().NumericTextbox("horizontalSpacing").Width("130px").Value(30).MinValue(0).MaxValue(1000).ClientSideEvents(s => s.Change("changeHorizontalSpacing"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -25px;">
                    Vertical
                </div>
                <div class="col-md-6">
                    @Html.EJ().NumericTextbox("verticalSpacing").Width("130px").Value(30).MinValue(0).MaxValue(1000).ClientSideEvents(s => s.Change("changeVerticalSpacing"))
                </div>
            </div>
            <div>
                <div class="row" id="expandHide">
                    <div class="col-md-6 aligntop" style="margin-right: -25px;">
                        Expand
                    </div>
                    <div class="col-md-6">
                        <input id="expand" />
                    </div>
                </div>
                <div class="row" id="orientationHide">
                    <div class="col-md-6 aligntop" style="margin-right: -25px;">
                        Orientation
                    </div>
                    <div class="col-md-6">
                        <input id="orientation" />
                    </div>
                </div>
                <div class="row" id="typeAlter">
                    <div class="col-md-6 aligntop" style="margin-right: -25px;">
                        Type
                    </div>
                    <div class="col-md-6">
                        <input id="typeAlternate" />
                    </div>
                </div>
                <div class="row" id="typeCenter">
                    <div class="col-md-6 aligntop" style="margin-right: -25px;">
                        Type
                    </div>
                    <div class="col-md-6">
                        <input id="typeCentered" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="list">
        <ul>
            <li value="toptobottom">Top-Bottom</li>
            <li value="lefttoright">Left-Right</li>
            <li value="righttoleft">Right-Left</li>
            <li value="bottomtotop">Bottom-Top</li>
        </ul>
    </div>
    <div id="horizontalVertical">
        <ul>
            <li value="horizontal">HORIZONTAL</li>
            <li value="vertical">VERTICAL</li>
        </ul>
    </div>
    <div id="rightLeftCenter">
        <ul>
            <li value="right">RIGHT</li>
            <li value="left">LEFT</li>
            <li value="center">CENTER</li>
        </ul>
    </div>
    <div id="rightLeftAlternate">
        <ul>
            <li value="right">RIGHT</li>
            <li value="left">LEFT</li>
            <li value="alternate">ALTERNATE</li>
        </ul>
    </div>
}
@section ScriptSection{
    <script type="text/javascript">
        //region event handlers
        $(window).on("load", function () {
            hideSubTreeOptions();

            //Property panel
            $("#Propertiespanel").ejPropertiesPanel();

            //Ej check box to expand or collapse nodes
            $("#expand").ejCheckBox({
                change: function (args) {
                    var diagram = $("#OrganizationChart").ejDiagram("instance");
                    if (diagram.model.selectedItems.children.length != 0)
                        diagram.updateNode(diagram.model.selectedItems.children[0].name, { isExpanded: args.isChecked ? true : false })
                }
            });

            //Drop down list to change subtree orientation
            $("#orientation").ejDropDownList({
                text: "VERTICAL", value: "Vertical", targetID: "horizontalVertical", width: "130px",
                change: function (args) {
                    updateSubTreeOrientation({ orientation: args.value });
                    if (args.value == "horizontal") {
                        $("#typeCenter").show();
                        $("#typeAlter").hide();
                    }
                    else if (args.value == "vertical") {
                        $("#typeCenter").hide();
                        $("#typeAlter").show();
                    }
                }
            });

            //Drop down to change the vertical subtree orientation
            $("#typeAlternate").ejDropDownList({
                watermarkText: "Type", targetID: "rightLeftAlternate", text: "ALTERNATE", value: "alternate", width: "130px",
                change: function (args) {
                    updateSubTreeOrientation({ type: args.value });
                }
            });

            //Drop down to change the horizontal subtree orientation
            $("#typeCentered").ejDropDownList({
                watermarkText: "Type", text: "CENTER", value: "center", width: "130px", targetID: "rightLeftCenter",
                change: function (args) {
                    updateSubTreeOrientation({ type: args.value });
                }
            });

        });

        //Selection change event
        function selectionChanged(args) {
            var node, expanded;
            if (args.state === "changing") {
                if (args.selectedItems.length == 1 && args.selectedItems[0].type == "basic") {
                    node = args.selectedItems[0];
                    expanded = node.isExpanded;
                    hideSubTreeOptions(node.outEdges.length);
                    $("#expand").ejCheckBox({ checked: expanded ? true : false });
                    $("#orientation").ejDropDownList({ checked: expanded ? true : false });
                    $("#typeAlternate").ejDropDownList({ checked: expanded ? true : false });
                    $("#typeCentered").ejDropDownList({ checked: expanded ? true : false });
                    if (node.addInfo.orientation) {
                        $("#orientation").ejDropDownList({ value: node.addInfo.orientation });
                    }
                    if (node.addInfo.type) {
                        if (node.addInfo.type !== "center")
                            $("#typeAlternate").ejDropDownList({ value: node.addInfo.type });
                        if (node.addInfo.type !== "alternate")
                            $("#typeCentered").ejDropDownList({ value: node.addInfo.type });
                    }
                }
                else {
                    hideSubTreeOptions();
                }
            }
        }

        //click event handler
        function diagramClick(args) {
            if (!args.element || args.element.type != "basic") {
                var diagram = $("#OrganizationChart").ejDiagram("instance");
                diagram.clearSelection();
            }
        }

        function create(args) {
            //Hide all dropdowns on loading
            hideSubTreeOptions();
            var diagram = $("#OrganizationChart").ejDiagram("instance");
            diagram.layout();
        }

        //Bind custom JSON with node properties
        function nodeTemplate(diagram, node) {
            node.labels[0].text = node.Function;
            node.fillColor = node.Color;

            if (node.Id == "parent") {
                node.fillColor = "#3484bb";
            }
            if (node.Phase == "parent") {
                node.fillColor = "#9ace7f";
            }
            if (node.Phase == "1") {
                node.fillColor = "#9264aa";
            }
            if (node.Phase == "2") {
                node.fillColor = "#9264aa";
            }
            if (node.Phase == "3") {
                node.fillColor = "#9264aa";
            }
        }

        //Customize layout orientation
        function getLayoutInfo(diagram, node, options) {
            if (!options.hasSubTree) {
                if (typeof node.addInfo === "string")
                    node.addInfo = JSON.parse(node.addInfo);
                options.orientation = node.addInfo.orientation;
                options.type = node.addInfo.type;
            }
        }

        $("#align").ejDropDownList({
            text: "Top-Bottom",
            value: "toptobottom",
            targetID: "list",
            width: "130px",
            "change": function (args) {
                var marginx = 0, marginy = 0;
                switch (args.value) {
                    case "toptobottom":
                        marginy = 50;
                        break;
                    case "bottomtotop":
                        marginy = 100;
                        break;
                    case "lefttoright":
                        marginx = 10;
                        break;
                    case "righttoleft":
                        marginx = -130;
                        break;
                }
                $("#OrganizationChart").ejDiagram({
                    layout: {
                        orientation: args.value,
                        marginX: marginx,
                        marginY: marginy
                    }
                });

                $("#marginX").ejNumericTextbox({ value: marginx });
                $("#marginY").ejNumericTextbox({ value: marginy });
            }
        });

        //Update horizontal spacing
        function changeHorizontalSpacing(args) {
            $("#OrganizationChart").ejDiagram({
                layout: {
                    horizontalSpacing: args.value
                }
            });
        }

        //Update vertical spacing
        function changeVerticalSpacing(args) {
            $("#OrganizationChart").ejDiagram({
                layout: {
                    verticalSpacing: args.value
                }
            });
        }

        //Update layout margin
        function changeMarginX(args) {
            $("#OrganizationChart").ejDiagram({
                layout: {
                    marginX: args.value
                }
            });
        }

        //Update layout margin
        function changeMarginY(args) {
            $("#OrganizationChart").ejDiagram({
                layout: {
                    marginY: args.value
                }
            });
        }
        //endregion

        //region helper methods

        function updateSubTreeOrientation(options) {
            var diagram = $("#OrganizationChart").ejDiagram("instance");
            if (diagram.model.selectedItems.children[0]) {
                var selectedNode = diagram.model.selectedItems.children[0];
                if (options.type) { selectedNode.addInfo.type = options.type; }
                if (options.orientation) { selectedNode.addInfo.orientation = options.orientation; }
                diagram.model.layout.fixedNode = selectedNode.name;
                diagram.layout();
                diagram.addSelection(selectedNode);
            }
        }

        function hideSubTreeOptions(show) {
            if (show) {
                $("#expandHide").show();
                $("#orientationHide").show();
                $("#typeAlter").show();
            }
            else {
                $("#expandHide").hide();
                $("#orientationHide").hide();
                $("#typeAlter").hide();
                $("#typeCenter").hide();
            }
        }

        //endregion
    </script>
    <script src="@Url.Content("~/Scripts/DiagramScripts/DiagramCommon.js")"></script>
}


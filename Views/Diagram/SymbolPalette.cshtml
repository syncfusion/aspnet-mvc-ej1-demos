@section SampleHeading{ <span class="sampleName">Diagram-Symbol Palette-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This example illustrates ASP.NET MVC diagram's symbol palette feature that allows to predefining shapes in a palette and can be easily dragged and dropped into canvas.">
}	
@section ControlsSection{
    @Html.EJ().SymbolPalette("SymbolPalette", ViewData["SymbolPaletteModel"] as Syncfusion.JavaScript.DataVisualization.Models.SymbolPaletteProperties)
}

@section PropertiesSection{
    <div id="Propertiespanel">
        <div>
            <div class="row">
                <div class="col-md-3">
                    <b>Symbol Palette</b>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Header Height
                </div>
                <div class="col-md-3 aligntop">
                    @Html.EJ().NumericTextbox("numeric").Value("30").MinValue(20).MaxValue(100).Width("88px").ClientSideEvents(s => s.Change("setHeaderHeight"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Item Text
                </div>
                <div class="col-md-3 aligntop">
                    @Html.EJ().CheckBox("itemtext").Checked(true).ClientSideEvents(s => s.Change("change"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Selected Palette
                </div>
                <div class="col-md-3 aligntop">
                    @Html.EJ().DropDownList("selectedpalette").TargetID("palettelist").Width("100%").SelectedIndex(1).ClientSideEvents(s => s.Change("selectedPaletteChange"))
                    <div id="palettelist">
                        <ul>
                            <li>Basic Shapes</li>
                            <li>Flow Shapes</li>
                            <li>Connectors</li>
                        </ul>

                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    <b>Palette</b>
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Header Visiblity
                </div>
                <div class="col-md-3 aligntop">
                    @Html.EJ().CheckBox("headervisibility").Checked(true).ClientSideEvents(s => s.Change("change"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Expandable
                </div>
                <div class="col-md-3 aligntop">
                    @Html.EJ().CheckBox("headerinteraction").Checked(true).ClientSideEvents(s => s.Change("change"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Visiblilty
                </div>
                <div class="col-md-3 aligntop">
                    @Html.EJ().CheckBox("visiblepalette").Checked(true).ClientSideEvents(s => s.Change("change"))
                </div>
            </div>
        </div>
    </div>
}


@section ScriptSection{
    <script type="text/javascript">
        var symbolpalette = null;
        $(window).on("load", function () {
            $("#Propertiespanel").ejPropertiesPanel(); 
        });
        function setHeaderHeight(args) {
            symbolpalette = $("#SymbolPalette").ejSymbolPalette("instance");
            symbolpalette.setHeaderHeight(args.value);
        }

        function change(args) {
            symbolpalette = $("#SymbolPalette").ejSymbolPalette("instance");
            if (symbolpalette.activePalette && args && args.model) {
                switch (args.model.id) {
                    case "headervisibility":
                        symbolpalette.updatePalette(symbolpalette.activePalette.name, { constraints: symbolpalette.activePalette.constraints ^ ej.datavisualization.Diagram.PaletteConstraints.HeaderVisibility });
                        break;
                    case "headerinteraction":
                        symbolpalette.updatePalette(symbolpalette.activePalette.name, { constraints: symbolpalette.activePalette.constraints ^ ej.datavisualization.Diagram.PaletteConstraints.Expandable });
                        break;
                    case "visiblepalette":
                        symbolpalette.updatePalette(symbolpalette.activePalette.name, { constraints: symbolpalette.activePalette.constraints ^ ej.datavisualization.Diagram.PaletteConstraints.Visible });
                        break;
                }
                if (args.model.id == "itemtext") {
                    symbolpalette.showPaletteItemText(!symbolpalette.model.showPaletteItemText)
                }
            }
        }
        function selectedPaletteChange(args) { 
            symbolpalette = $("#SymbolPalette").ejSymbolPalette("instance");
            if (args && args.selectedValue)
                $("#SymbolPalette").ejSymbolPalette({ selectedPaletteName: args.selectedValue });
            $("#itemtext").ejCheckBox({ checked: symbolpalette.model.showPaletteItemText ? "checked" : "" });
            var constraints = symbolpalette.activePalette.constraints & ej.datavisualization.Diagram.PaletteConstraints.HeaderVisibility;
            $("#headervisibility").ejCheckBox({ checked: constraints ? "checked" : "" });
            constraints = symbolpalette.activePalette.constraints & ej.datavisualization.Diagram.PaletteConstraints.Visible;
            $("#visiblepalette").ejCheckBox({ checked: constraints ? "checked" : "" });
            constraints = symbolpalette.activePalette.constraints & ej.datavisualization.Diagram.PaletteConstraints.Expandable;
            $("#headerinteraction").ejCheckBox({ checked: constraints ? "checked" : "" });
        }

    </script>
    <script id="svgTemplate" type="text/x-jsrender">
        <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="225px" height="28px" viewBox="0 -5 225 28">
            <g visibility="visible" class="node-svg-template" >
                <image width="20px" height="20px" opacity="1" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="{{:addInfo.source}}"></image>
                <text x="40" y="18" font-size="14" >
                    <tspan>{{:name}}</tspan>
                </text>
            </g>
        </svg>
    </script>
}
<link href="@Url.Content("~/Images/diagram/symbolpalette/symbolpalette.css")" rel="stylesheet" />


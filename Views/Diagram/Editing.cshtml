@section SampleHeading{
    <span class="sampleName">Diagram-Editing-ASP.NET MVC-SYNCFUSION</span>}
	@section MetaTags{
    <meta name="description" content="This sample demonstrates the CRUD behavior of the ASP.NET MVC diagram control.">
}
@section ControlsSection{
    <div id="toolbarItem" class="e-toolbar e-js e-widget e-toolbarspan" style="margin-left:-1px; background-color: #ebeced; border-bottom-color: #bbbbbb; border-top-style: none; border-left-style: none; border-right-style: none">
        <ul id="toolblock3" class="toolblock3rightBorderVisible">
            <li id="insertData" title="Insert">
                <div class="sficon-add toolBarIconStyle" style="margin-left: 8px" />
            </li>
            <li id="updateData" title="Update">
                <div class="sficon-edit toolBarIconStyle" style="margin-left: 8px" />
            </li>
            <li id="deleteData" title="Delete">
                <div class="sficon-delete toolBarIconStyle" style="margin-left: 8px" />
            </li>
        </ul>
    </div>
    <div>
        @Html.EJ().Toolbar("toolbarItem").Enabled(false).ClientSideEvents(e => e.Click("onItemClick")).Width("700px").Height("33px")
    </div>
    <div>
        @Html.EJ().Diagram("diagram", ViewData["diagramModel"] as Syncfusion.JavaScript.DataVisualization.Models.DiagramProperties)
    </div>
    <div style="margin-left: 12px; margin-top: 12px;">
    @{Html.EJ().Dialog("editDialog").Title("Edit").ClientSideEvents(e => e.Close("onDialogClose")).EnableModal(true).EnableResize(false).ShowOnInit(false).Width(400).ContentTemplate(@<div>
        <table style="margin-left: 12px">
            <tr style="height: 40px">
                <td>
                    <div style="height: 30px; width: 100%; font-size: 16px; margin-right: 60px">
                        Description
                    </div>
                </td>
                <td>
                    <div style="border: 1px solid #D3D1D1; height: 30px; width: 200px;">
                        <input type="text" id="Description" value="" style="width: 200px; height: 23px; border: none; outline: none;" />
                    </div>
                </td>
            </tr>
            <tr style="height: 40px">
                <td>
                    <div style="height: 30px; width: 100%; font-size: 16px; margin-right: 60px">
                        Color
                    </div>
                </td>
                <td>
                    <div style="border: 1px solid #D3D1D1; height: 30px; width: 200px;">
                        <input type="text" id="Color" value="" style="width: 200px; height: 23px; border: none; outline: none;" />
                    </div>
                </td>
            </tr>
            <tr>
                <td></td>
                <td>
                    <div style="height: 30px; margin-bottom: 6px; margin-top: 6px; width: 100%;">
                        <input type="button" id="btnUpdate" onclick="addOrUpdate(this)" value="Update" style="background-color: #28B1BF; border: medium none; color: #FFFFFF; font-family: Segoe UI; font-size: 16px; height: 29px; width: 90px;" />
                    </div>
                </td>
            </tr>
        </table>
    </div>).Render();}
</div>
}
<script type="text/javascript">
    var sourceNode, targetNode, connectorsChanged;
    function nodeTemplate(diagram, node) {
        node.labels[0].text = node.Description;
        node.fillColor = node.Color;
    }

    function onItemClick(args) {
        var diagram = $("#diagram").ejDiagram("instance");
        var selectedItem = diagram.model.selectedItems.children[0];
        if (selectedItem && (selectedItem.type !== "connector" || args.currentTarget.id === "deleteData")) {
            switch (args.currentTarget.id) {
                case "insertData":
                    openDialog("Add", "", "");
                    break;
                case "updateData":
                    openDialog("Update", selectedItem.Description, selectedItem.Color);
                    break;
                case "deleteData":
                    diagram.remove(selectedItem);
                    diagram.layout();
                    diagram.removeData();
                    break;
            }
        }
        else if (connectorsChanged) {
            if (args.currentTarget.id === "updateData") {
                diagram.updateData();
                connectorsChanged = false;
                $("#toolbarItem").ejToolbar("disableItemByID", "updateData");
            }
        }
    }

    function openDialog(title, description, color) {
        document.getElementById("btnUpdate").value = title;
        document.getElementById("Description").value = description;
        document.getElementById("Color").value = color;
        $("#editDialog").ejDialog({ "title": title });
        $("#editDialog").ejDialog("open");
    }

    function addOrUpdate(evt) {
        var diagram = $("#diagram").ejDiagram("instance");
        var description = document.getElementById("Description").value;
        var color = document.getElementById("Color").value;
        var selectedItem = diagram.model.selectedItems.children[0];
        if (evt.value === "Add") {
            var node = {
                name: "node" + ej.datavisualization.Diagram.Util.randomId(), fillColor: color,
                labels: [{ "text": description}], Description: description, Color: color
            };
            var connector = { name: "node" + ej.datavisualization.Diagram.Util.randomId(),
                sourceNode: selectedItem.name, targetNode: node.name
            };
            diagram.add([node, connector]);
            diagram.layout();
            diagram.insertData();
        }
        else {
            selectedItem.Description = description;
            selectedItem.Color = color;
            diagram.updateNode(selectedItem.name, { fillColor: color });
            diagram.updateLabel(selectedItem.name, selectedItem.labels[0], { text: description });
            diagram.updateData();
        }
        $("#editDialog").ejDialog("close");
    }

    function connectionChange(args) {
        if (args.dragState === "completed") {
            if (!args.element.targetNode || !args.element.sourceNode)
                args.cancel = true;
            if (!args.cancel) {
                connectorsChanged = true;
                $("#toolbarItem").ejToolbar("enableItemByID", "updateData");
            }
        }
    }

    function selectionChange(args) {
        if (args.state === "changing") {
            $("#toolbarItem").ejToolbar("disable");
            if (args.changeType === "insert") {
                if (args.element.type !== "connector")
                    $("#toolbarItem").ejToolbar("enable");
                else {
                    $("#toolbarItem").ejToolbar("enableItemByID", "deleteData");
                }
            }
            else if (connectorsChanged) {
                $("#toolbarItem").ejToolbar("enableItemByID", "updateData");
            }
        }
    }
</script>
<link href="@Url.Content("~/Images/diagram/editing/editing.css")" rel="stylesheet" />
<style type="text/css">
    .e-toolbar > .e-horizontal.e-ul > li { 
        width: 36px;
        height: 25px;
    } 
    .toolBarIconStyle {
        font-size: 16px;
        color: #6B6B6B;
        margin-top: 4px;
        margin-left: 4px;
    } 
</style>


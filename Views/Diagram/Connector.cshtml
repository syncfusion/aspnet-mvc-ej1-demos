@section SampleHeading{
    <span class="sampleName">Diagram-Connectors-ASP.NET MVC-SYNCFUSION</span>}
}
@section MetaTags{
    <meta name="description" content="This sample demonstrates the connectorâ€™s bridging and editing behavior and also how to customize the connector appearance in ASP.NET MVC diagram.">
}
@section ControlsSection{
    <div>
        @Html.EJ().Diagram("Connectors", ViewData["diagramModel"] as Syncfusion.JavaScript.DataVisualization.Models.DiagramProperties)
    </div>
}
@section PropertiesSection{
    <div id="sampleProperties">
        <div class="prop-grid">
            <div class="row">
                <div class="col-md-6 aligntop">
                    <b>Connectors</b>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Segment
                </div>
                <div class="col-md-6">
                    @Html.EJ().DropDownList("segment").TargetID("segmentlistDiv").Text("Orthogonal").Value("value").Width("120px").ClientSideEvents(s => s.Change("changeSegment"))
                    <div id="segmentlistDiv">
                        <ul>
                            <li value="orthogonal">Orthogonal</li>
                            <li value="straight">Straight</li>
                            <li value="bezier">Bezier</li>
                        </ul>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Corner Radius
                </div>
                <div class="col-md-6">
                    @Html.EJ().NumericTextbox("cornerRadius").Width("120px").Value(10).MinValue(0).MaxValue(10).ClientSideEvents(s => s.Change("changeCornerRadius"))
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Bridging
                </div>
                <div class="col-md-6">
                    @Html.EJ().CheckBox("bridge").Checked(true).ClientSideEvents(s => s.Change("changeLineBridge"))
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Bridge Obstacle
                </div>
                <div class="col-md-6">
                    @Html.EJ().CheckBox("bridgeobstacle").Checked(true).ClientSideEvents(s => s.Change("changeBridgeObstacle"))
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Bridge Direction
                </div>
                <div class="col-md-6">
                    @Html.EJ().DropDownList("direction").TargetID("directionlistDiv").Text("Top").Value("value").Width("120px").ClientSideEvents(s => s.Change("changeDirection"))
                    <div id="directionlistDiv">
                        <ul>
                            <li value="top">Top</li>
                            <li value="bottom">Bottom</li>
                            <li value="left">Left</li>
                            <li value="right">Right</li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 aligntop">
                    <b>Drag</b>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Connector
                </div>
                <div class="col-md-6">
                    @Html.EJ().CheckBox("dragable").Checked(true).ClientSideEvents(s => s.Change("changeDrag")).CssClass("example")
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Source
                </div>
                <div class="col-md-6">
                    @Html.EJ().CheckBox("dragablesource").Checked(true).ClientSideEvents(s => s.Change("dragSource")).CssClass("example")
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Target
                </div>
                <div class="col-md-6">
                    @Html.EJ().CheckBox("dragabletarget").Checked(true).ClientSideEvents(s => s.Change("dragTarget")).CssClass("example")
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 aligntop" style="margin-right: -10px;">
                    Segments
                </div>
                <div class="col-md-6">
                    @Html.EJ().CheckBox("dragablesegment").Checked(true).ClientSideEvents(s => s.Change("dragSegment")).CssClass("example")
                </div>
            </div>

        </div>
    </div>
}
@section ScriptSection{
    <script type="text/javascript">
        $("#sampleProperties").ejPropertiesPanel();
        function changeDrag() {
            updateConnectors("dragable", ej.datavisualization.Diagram.ConnectorConstraints.Drag);
        }
        function dragSource() {
            updateConnectors("dragablesource", ej.datavisualization.Diagram.ConnectorConstraints.DragSourceEnd);
        }
        function dragTarget() {
            updateConnectors("dragabletarget", ej.datavisualization.Diagram.ConnectorConstraints.DragTargetEnd);
        }
        function dragSegment() {
            updateConnectors("dragablesegment", ej.datavisualization.Diagram.ConnectorConstraints.DragSegmentThumb);
        }
        function changeLineBridge() {
            updateConnectors("bridge", ej.datavisualization.Diagram.ConnectorConstraints.Bridging);
        }

        function changeBridgeObstacle() {
            updateConnectors("bridgeobstacle", ej.datavisualization.Diagram.ConnectorConstraints.BridgeObstacle);
        }

        function changeDirection(args) {
            $("#Connectors").ejDiagram({
                bridgeDirection: args.value
            });
        }

        function updateConnectors(id, constraints) {
            var diagram = $("#Connectors").ejDiagram("instance");
            var checkbox = $("#" + id).ejCheckBox("instance");
            var selectedConnectors = getSelectedConnectors(diagram.model.selectedItems.children);
            var connectors = selectedConnectors.length ? selectedConnectors : diagram.model.connectors;
            for (var i = 0; i < connectors.length; i++) {
                var connector = connectors[i];
                if (diagram.getObjectType(connector) == "connector") {
                    diagram.updateConnector(connector.name, {
                        constraints: checkbox.isChecked() ?
                            connector.constraints | constraints : connector.constraints & ~constraints
                    });
                }
            }
        }

        //Modify the segment type
        function changeSegment(args) {
            var diagram = $("#Connectors").ejDiagram("instance");
            var selectedConnectors = getSelectedConnectors(diagram.model.selectedItems.children);
            var connectors = selectedConnectors.length ? selectedConnectors : diagram.model.connectors;
            for (var i = 0; i < connectors.length; i++) {
                var connector = connectors[i];
                if (args.value == "orthogonal") {
                    diagram.updateConnector(connector.name, { segments: connector.addInfo.segments });
                }
                else
                    diagram.updateConnector(connector.name, { segments: [{ type: args.value }] });
            }
        }

        //Update the corner radius
        function changeCornerRadius(args) {
            var diagram = $("#Connectors").ejDiagram("instance");
            var selectedConnectors = getSelectedConnectors(diagram.model.selectedItems.children);
            var connectors = selectedConnectors.length ? selectedConnectors : diagram.model.connectors;
            for (var i = 0; i < connectors.length; i++) {
                var connector = connectors[i];
                diagram.updateConnector(connector.name, { cornerRadius: args.value });
            }
        }

        //Selection change event handler
        function selectionChanged(args) {
            if (args.state === "changing") {
                var diagram = $("#Connectors").ejDiagram("instance");
                var ConnectorConstraints = ej.datavisualization.Diagram.ConnectorConstraints;
                var selectedConnectors = getSelectedConnectors(args.selectedItems);
                var connectors = selectedConnectors.length ? selectedConnectors : diagram.model.connectors;
                updateCheckBox("dragable", connectors, ConnectorConstraints.Drag);
                updateCheckBox("dragablesource", connectors, ConnectorConstraints.DragSourceEnd);
                updateCheckBox("dragabletarget", connectors, ConnectorConstraints.DragTargetEnd);
                updateCheckBox("dragablesegment", connectors, ConnectorConstraints.DragSegmentThumb);
                updateCheckBox("bridge", connectors, ConnectorConstraints.Bridging);
                updateCheckBox("bridgeobstacle", connectors, ConnectorConstraints.BridgeObstacle);

                var checked;
                var radius = connectors[0].cornerRadius;
                for (i = 1; i < connectors.length; i++) {
                    if (radius != connectors[i].cornerRadius) {
                        $("#cornerRadius").ejNumericTextbox({ enabled: false });
                        checked = true;
                        break;
                    }
                }
                if (!checked) {
                    $("#cornerRadius").ejNumericTextbox({ enabled: true });
                    $("#cornerRadius").ejNumericTextbox({ value: radius });
                }
            }
        }

        //Get the selected connectors
        function getSelectedConnectors(selectedItems) {
            var diagram = $("#Connectors").ejDiagram("instance");
            var connectors = [];
            for (var i = 0; i < selectedItems.length; i++) {
                if (diagram.getObjectType(selectedItems[i]) == "connector")
                    connectors.push(selectedItems[i]);
            }
            return connectors;
        }

        //Update the check boxes based on the selected connectors
        function updateCheckBox(id, connectors, constraints) {
            var enabled, connector, checked;
            var diagram = $("#Connectors").ejDiagram("instance");
            enabled = connectors[0].constraints & constraints ? true : false;
            if (connectors.length == 1) $("#" + id).ejCheckBox({ enabled: enabled });
            else {
                for (var i = 1; i < connectors.length; i++) {
                    connector = connectors[i];
                    if (diagram.getObjectType(connector) == "connector") {
                        if ((connector.constraints & constraints ? true : false) != enabled) {
                            $("#" + id).ejCheckBox({ enabled: false });
                            checked = true;
                            break;
                        }
                    }
                }
            }
            if (!checked) {
                $("#" + id).ejCheckBox({ enabled: true });
                $("#" + id).ejCheckBox({ checked: enabled });
            }
        }
    </script>
    <script src="@Url.Content("~/Scripts/DiagramScripts/DiagramCommon.js")"></script>
}


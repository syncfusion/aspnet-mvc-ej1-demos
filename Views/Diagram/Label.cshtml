@section SampleHeading{ <span class="sampleName">Diagram-Label-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This sample demonstrates labelâ€™s alignment behavior and customizing the label appearance in the ASP.NET MVC diagram.">
}
@section StyleSection {
    <style>
        .row .cols-sample-area {
            width: 67%;
        }

        .row .cols-prop-area {
            width: 31%;
        }
    </style>
}
@section ControlsSection{
    <div>
        @Html.EJ().Diagram("Label", ViewData["diagramModel"] as Syncfusion.JavaScript.DataVisualization.Models.DiagramProperties)
    </div>
}
@section PropertiesSection{
    <div id="sampleProperties">
        <div class="prop-grid">
            <div class="row">
                <div class="col-md-3">
                    Label Collection
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("labelcollection").Enabled(false).WatermarkText("labelName").ClientSideEvents(eve => eve.Change("labelcollectionChange")).Width("120px"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    OffsetX
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("offsetX").Enabled(false).CssClass("offsetX").DecimalPlaces(1).MinValue(0).MaxValue(1).IncrementStep(0.1).Width("120px").Value(0.5).ClientSideEvents(s => s.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    OffsetY
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("offsetY").Enabled(false).CssClass("offsetY").DecimalPlaces(1).MinValue(0).MaxValue(1).IncrementStep(0.1).Width("120px").Value(0.5).ClientSideEvents(s => s.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Rotate Angle
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("rotateAngle").MinValue(0).Width("120px").Enabled(false).CssClass("rotateAngle").Value(0).ClientSideEvents(s => s.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Font Color
                </div>
                <div class="col-md-3">
                    @Html.EJ().DropDownList("fontcolor").Enabled(false).CssClass("fontColor").Datasource((IEnumerable<DropDownData>)ViewData["LabelDataSource"]).DropDownListFields(Df => Df.Text("text").Value("value")).Width("120px").Text("Black").ClientSideEvents(eve => eve.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Font Size
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("fontsize").MinValue(12).Width("120px").Enabled(false).CssClass("fontSize").Value(12).ClientSideEvents(s => s.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Font Family
                </div>
                <div class="col-md-3">
                    @Html.EJ().DropDownList("fontfamily").Enabled(false).CssClass("fontFamily").Datasource((IEnumerable<DropDownData>)ViewData["LabelFamilySource"]).DropDownListFields(Df => Df.Text("text").Value("value")).Width("120px").Text("Arial").ClientSideEvents(eve => eve.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Horizontal Alignment
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("horizontalalignment").Enabled(false).CssClass("horizontalAlignment").Datasource((IEnumerable<DropDownData>)ViewData["HorizontalData"]).DropDownListFields(Df => Df.Text("text").Value("value")).Text("Center").ClientSideEvents(eve => eve.Change("propertyChange")).Width("120px"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Vertical Alignment
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("verticalalignment").Enabled(false).CssClass("verticalAlignment").Datasource((IEnumerable<DropDownData>)ViewData["VerticalData"]).DropDownListFields(Df => Df.Text("text").Value("value")).Text("Center").ClientSideEvents(eve => eve.Change("propertyChange")).Width("120px"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Text Decoration
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("textdecoration").Enabled(false).CssClass("textDecoration").Datasource((IEnumerable<DropDownData>)ViewData["Decoration"]).DropDownListFields(Df => Df.Text("text").Value("value")).Text("None").ClientSideEvents(eve => eve.Change("propertyChange")).Width("120px"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Text Wrapping
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("textwrapping").Enabled(false).CssClass("wrapping").Datasource((IEnumerable<DropDownData>)ViewData["Wrapping"]).DropDownListFields(Df => Df.Text("text").Value("value")).Text("WrapWithOverflow").ClientSideEvents(eve => eve.Change("propertyChange")).Width("120px"))
                </div>
            </div>
            <div class="row hideNewText">
                <div class="col-md-3" id="textcontainer">
                    Text
                </div>
                <div class="col-md-3">
                    <input type="text" id="text" style="width: 120px;" />
                </div>
            </div>
            <div class="row hideNewText">
                <div class="col-md-3">
                </div>
                <div class="col-md-3">
                    @(Html.EJ().Button("submit").Text("Add").ClientSideEvents(eve => eve.Click("addnewlabel")).Width("50px"))
                </div>
            </div>
        </div>
    </div>
}
@section ScriptSection{
    <script type="text/javascript">

        $("#sampleProperties").ejPropertiesPanel();
        $(".hideNewText").css("display", "none");

        function labelcollectionChange(args) {
            var diagram = $("#Label").ejDiagram("instance");
            if (args.value == "newLabel")
                addnewlabelbinding();
            else {
                var index = $('#labelcollection').ejDropDownList("instance").value();
                binding(diagram.selectionList[0].labels[Number(index)]);
                $(".hideNewText").css("display", "none");
            }
        }
        function propertyChange(args, propName) {
            var diagram = $("#Label").ejDiagram("instance");
            var index = $('#labelcollection').ejDropDownList("instance").value();
            var option = {};
            switch (args.model.cssClass) {
                case "offsetX":
                    option.offset = { x: args.value };
                    break;
                case "offsetY":
                    option.offset = { y: args.value };
                    break;
                case "rotateAngle":
                    option.rotateAngle = args.value;
                    break;
                case "fontColor":
                    option.fontColor = args.value;
                    break;
                case "fontSize":
                    option.fontSize = args.value;
                    break;
                case "fontFamily":
                    option.fontFamily = args.value;
                    break;
                case "horizontalAlignment":
                    option.horizontalAlignment = args.value;
                    break;
                case "verticalAlignment":
                    option.verticalAlignment = args.value;
                    break;
                case "textDecoration":
                    option.textDecoration = args.value;
                    break;
                case "wrapping":
                    option.wrapping = args.value;
                    break;
            }
            if (option && index && index != "newLabel")
                diagram.updateLabel(diagram.selectionList[0].name, diagram.selectionList[0].labels[Number(index)], option);
        }

        function enabledisable(value) {
            $("#fontsize").ejNumericTextbox(value);
            $("#offsetX").ejNumericTextbox(value);
            $("#offsetY").ejNumericTextbox(value);
            $("#rotateAngle").ejNumericTextbox(value);
            $("#fontcolor").ejDropDownList(value);
            $("#horizontalalignment").ejDropDownList(value);
            $("#verticalalignment").ejDropDownList(value);
            $("#textdecoration").ejDropDownList(value);
            $("#textwrapping").ejDropDownList(value);
            $("#fontfamily").ejDropDownList(value);
            $("#labelcollection").ejDropDownList(value);
        }
        function selectionChange(args) {
            enabledisable("disable");
            if (args.state === "changed" && args.element && args.element.type != "connector" && args.changeType === "insert") {
                dropdownlist();
                enabledisable("enable");
            }
            $(".hideNewText").css("display", "none");
        }
        function dropdownlist() {
            var diagram = $("#Label").ejDiagram("instance");
            var labelcollection = []; var node = diagram.selectionList[0];
            if (node && node.labels.length) {
                for (var i = 0; i < node.labels.length; i++) {
                    labelcollection.push({ "text": node.labels[i].name, "value": i });
                }
                labelcollection.push({ "text": "newLabel", "value": "newLabel" });
            }
            $('#labelcollection').ejDropDownList({
                dataSource: labelcollection,
            });
            var target = $('#labelcollection').data("ejDropDownList");
            target.option({ selectedIndex: 0 });
        }
        function binding(labels) {
            $("#fontsize").ejNumericTextbox({ value: labels.fontSize });
            $("#offsetX").ejNumericTextbox({ value: labels.offset.x });
            $("#offsetY").ejNumericTextbox({ value: labels.offset.y });
            $("#rotateAngle").ejNumericTextbox({ value: labels.rotateAngle });
            $("#fontcolor").ejDropDownList({ value: labels.fontColor });
            $("#horizontalalignment").ejDropDownList({ value: labels.horizontalAlignment });
            $("#verticalalignment").ejDropDownList({ value: labels.verticalAlignment });
            $("#textdecoration").ejDropDownList({ value: labels.textDecoration });
            $("#textwrapping").ejDropDownList({ value: labels.wrapping });
            $("#fontfamily").ejDropDownList({ value: labels.fontFamily });
        }

        function addnewlabelbinding() {
            var labels = ej.datavisualization.Diagram.LabelDefaults;
            binding(labels);
            $(".hideNewText").css("display", "block");
        }
        function addnewlabel() {
            var diagram = $("#Label").ejDiagram("instance");
            var rotateAngle = Number(document.getElementById("rotateAngle").value);
            var fontColor = document.getElementById("fontcolor").value;
            var fontSize = Number(document.getElementById("fontsize").value);
            var fontFamily = document.getElementById("fontfamily").value;
            var horizontalAlignment = document.getElementById("horizontalalignment").value;
            var offsetX = Number(document.getElementById("offsetX").value);
            var offsetY = Number(document.getElementById("offsetY").value);
            var verticalAlignment = document.getElementById("verticalalignment").value;
            var textDecoration = document.getElementById("textdecoration").value;
            var wrapping = document.getElementById("textwrapping").value;
            var text = document.getElementById("text").value;
            var label = {
                name: "label" + ej.datavisualization.Diagram.Util.randomId(), horizontalAlignment: horizontalAlignment, verticalAlignment: verticalAlignment,
                rotateAngle: rotateAngle, fontColor: fontColor, fontSize: fontSize, fontFamily: fontFamily, offset: { x: offsetX, y: offsetY }, textDecoration: textDecoration,
                wrapping: wrapping, text: text,
            };
            diagram.addLabel(diagram.selectionList[0].name, label);
            dropdownlist();
            $(".hideNewText").css("display", "none");
        }
    </script>
    <script src="@Url.Content("~/Scripts/DiagramScripts/DiagramCommon.js")"></script>
}


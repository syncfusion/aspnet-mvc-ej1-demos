@section SampleHeading{ <span class="sampleName">Diagram-Port-ASP.NET MVC-SYNCFUSION</span>}
@section MetaTags{
    <meta name="description" content="This sample demonstrates portâ€™s alignment and visibility behavior and also customizing the port appearance in the ASP.NET MVC diagram control.">
}
@section StyleSection {
    <style>
        .row .cols-sample-area {
            width: 67%;
        }

        .row .cols-prop-area {
            width: 31%;
        }
    </style>
}
@section ControlsSection{
    <div>
        @Html.EJ().Diagram("Port", ViewData["diagramModel"] as Syncfusion.JavaScript.DataVisualization.Models.DiagramProperties)
    </div>
}
@section PropertiesSection{
    <div id="sampleProperties">
        <div class="prop-grid">
            <div class="row">
                <div class="col-md-3">
                    Port Collection
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("portcollection").Enabled(false).WatermarkText("portName").ClientSideEvents(eve => eve.Change("portcollectionChange")).Width("120px"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Visibility
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("visibility").ShowCheckbox(true).Enabled(false).CssClass("visibility").Datasource((IEnumerable<DropDownData>)ViewData["VisibilityData"]).DropDownListFields(Df => Df.Text("text").Value("value")).Text("8").ClientSideEvents(eve => eve.Change("propertyChange")).Width("120px"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    OffsetX
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("offsetX").Enabled(false).CssClass("offsetX").DecimalPlaces(1).MinValue(0).MaxValue(1).IncrementStep(0.1).Width("120px").Value(0).ClientSideEvents(s => s.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    OffsetY
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("offsetY").Enabled(false).CssClass("offsetY").DecimalPlaces(1).MinValue(0).MaxValue(1).IncrementStep(0.1).Width("120px").Value(0).ClientSideEvents(s => s.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Border Width
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("borderwidth").MinValue(1).Width("120px").Enabled(false).CssClass("borderWidth").Value(1).ClientSideEvents(s => s.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Size
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("portsize").MinValue(8).Width("120px").Enabled(false).CssClass("size").Value(8).ClientSideEvents(s => s.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Fill Color
                </div>
                <div class="col-md-3">
                    @Html.EJ().DropDownList("background").Enabled(false).CssClass("fillColor").Datasource((IEnumerable<DropDownData>)ViewData["PortDataSource"]).DropDownListFields(Df => Df.Text("text").Value("value")).Width("120px").Text("White").ClientSideEvents(eve => eve.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Border Color
                </div>
                <div class="col-md-3">
                    @Html.EJ().DropDownList("backgroundborder").Enabled(false).CssClass("borderColor").Datasource((IEnumerable<DropDownData>)ViewData["PortBorderDataSource"]).DropDownListFields(Df => Df.Text("text").Value("value")).Width("120px").Text("Black").ClientSideEvents(eve => eve.Change("propertyChange"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    Shape
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("portshape").Enabled(false).CssClass("shape").Datasource((IEnumerable<DropDownData>)ViewData["PortShapeData"]).DropDownListFields(Df => Df.Text("text").Value("value")).Text("Square").ClientSideEvents(eve => eve.Change("propertyChange")).Width("120px"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    ActiveTool
                </div>
                <div class="col-md-3">
                    @(Html.EJ().DropDownList("setTool").ClientSideEvents(eve => eve.Change("propertyChange")).Enabled(false).CssClass("setTool").Datasource((IEnumerable<DropDownData>)ViewData["setTool"]).DropDownListFields(Df => Df.Text("text").Value("value")).Text("None").Width("120px"))
                </div>
            </div>


            <div class="row hideNewText">
                <div class="col-md-3">
                </div>
                <div class="col-md-3">
                    @(Html.EJ().Button("submit").Text("Add").ClientSideEvents(eve => eve.Click("addnewport")).Width("50px"))
                </div>
            </div>
        </div>
    </div>
}
@section ScriptSection{
    <script type="text/javascript">


        $("#sampleProperties").ejPropertiesPanel();
        $(".hideNewText").css("display", "none");




        function SetTool(args) {
            var value = document.getElementById("setTool").value;
            if (value === "drag") {
                args.action = ej.datavisualization.Diagram.ActiveTool.Drag;
            }
            else if (value === "draw") {
                args.action = ej.datavisualization.Diagram.ActiveTool.Draw;
            }
        }


        function portcollectionChange(args) {
            var diagram = $("#Port").ejDiagram("instance");
            if (args.value == "newPort")
                addnewportbinding();
            else {
                var index = $('#portcollection').ejDropDownList("instance").value();
                binding(diagram.selectionList[0].ports[Number(index)]);
                $(".hideNewText").css("display", "none");
            }
        }




        function propertyChange(args) {
            if (!isBinding) {
                var diagram = $("#Port").ejDiagram("instance");
                var index = $('#portcollection').ejDropDownList("instance").value();
                var option = {};
                switch (args.model.cssClass) {
                    case "visibility":
                        option.visibility = Number(args.value);
                        break;
                    case "offsetX":
                        option.offset = { x: args.value };
                        break;
                    case "offsetY":
                        option.offset = { y: args.value };
                        break;
                    case "borderWidth":
                        option.borderWidth = args.value;
                        break;
                    case "size":
                        option.size = args.value;
                        break;
                    case "fillColor":
                        option.fillColor = args.value;
                        break;
                    case "borderColor":
                        option.borderColor = args.value;
                        break;
                    case "shape":
                        option.shape = args.value;
                        if (option.shape === "path" && index && index != "newPort") {
                            var port = diagram.selectionList[0].ports[Number(index)];
                            port.pathData = "M6.805,0L13.61,10.703L0,10.703z";
                        }
                        break;
                }
                if (args.model.cssClass != "setTool" && option && index && index != "newPort") {
                    var port = diagram.selectionList[0].ports[Number(index)];
                    if (option.visibility) {
                        if (args.isChecked) {
                            option.visibility = port.visibility | option.visibility;
                        }
                        else {
                            option.visibility = port.visibility & ~option.visibility;
                        }
                    }
                    diagram.updatePort(diagram.selectionList[0].name, port, option);
                }
                else diagram.clearSelection();
            }
        }

        function enabledisable(value) {
            $("#offsetX").ejNumericTextbox(value);
            $("#offsetY").ejNumericTextbox(value);
            $("#borderwidth").ejNumericTextbox(value);
            $("#portsize").ejNumericTextbox(value);
            $("#background").ejDropDownList(value);
            $("#backgroundborder").ejDropDownList(value);
            $("#portshape").ejDropDownList(value);
            $("#visibility").ejDropDownList(value);
            $("#portcollection").ejDropDownList(value);
            $("#setTool").ejDropDownList(value);
        }

        function selectionChange(args) {
            enabledisable("disable");
            if (args.state === "changed" && args.element && args.element.type != "connector" && args.changeType === "insert") {
                dropdownlist();
                enabledisable("enable");
            }
            $(".hideNewText").css("display", "none");
        }

        function dropdownlist() {
            var diagram = $("#Port").ejDiagram("instance");
            var portcollection = []; var node = diagram.selectionList[0];
            if (node && node.ports.length) {
                for (var i = 0; i < node.ports.length; i++) {
                    portcollection.push({ "text": node.ports[i].name, "value": i });
                }
                portcollection.push({ "text": "newPort", "value": "newPort" });
            }
            $('#portcollection').ejDropDownList({
                dataSource: portcollection,
            });
            var target = $('#portcollection').data("ejDropDownList");
            target.option({ selectedIndex: 0 });
        }

        var isBinding = false;
        function binding(ports) {
            isBinding = true;
            $("#offsetX").ejNumericTextbox({ value: ports.offset.x });
            $("#offsetY").ejNumericTextbox({ value: ports.offset.y });
            $("#portshape").ejDropDownList({ value: ports.shape });
            $("#visibility").ejDropDownList({ value: ports.visibility });
            $("#borderwidth").ejNumericTextbox({ value: ports.borderWidth });
            $("#background").ejDropDownList({ value: ports.fillColor });
            $("#backgroundborder").ejDropDownList({ value: ports.borderColor });
            $("#portsize").ejNumericTextbox({ value: ports.size });
            isBinding = false;
        }

        function addnewportbinding() {
            var ports = ej.datavisualization.Diagram.PortDefaults;
            binding(ports);
            $(".hideNewText").css("display", "block");
        }

        function addnewport() {
            var pathData;
            var diagram = $("#Port").ejDiagram("instance");
            var borderWidth = Number(document.getElementById("borderwidth").value);
            var fillColor = document.getElementById("background").value;
            var PortSize = Number(document.getElementById("portsize").value);
            var PortShape = document.getElementById("portshape").value;
            var BorderColor = document.getElementById("backgroundborder").value;
            var offsetX = Number(document.getElementById("offsetX").value);
            var offsetY = Number(document.getElementById("offsetY").value);
            var visibility = document.getElementById("visibility").value;
            if (PortShape === "path")
                pathData = "M6.805,0L13.61,10.703L0,10.703z";
            var port = [{
                name: "port" + ej.datavisualization.Diagram.Util.randomId(), borderColor: BorderColor, borderWidth: borderWidth,
                fillColor: fillColor, shape: PortShape, pathData: pathData ? pathData : "", size: PortSize, visibility: visibility, offset: { x: offsetX, y: offsetY }
            }];
            diagram.addPorts(diagram.selectionList[0].name, port);
            dropdownlist();
            $(".hideNewText").css("display", "none");
        }
    </script>
    <script src="@Url.Content("~/Scripts/DiagramScripts/DiagramCommon.js")"></script>
}


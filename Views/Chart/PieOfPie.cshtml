@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">Chart-Pie of Pie-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates how to pie of pie series using Syncfusion ASP.NET MVC Chart Control">
}

@section ControlsSection{
        @(Html.EJ().Chart("container")
          .Series(sr =>
                    {
                        sr.Points(pt =>
                                       {
                                           pt.X("Saudi Arabia").Y(58).Text("58%").Add();
                                           pt.X("Persian Gulf").Y(15).Text("15%").Add();
                                           pt.X("Canada").Y(13).Text("13%").Add();
                                           pt.X("Venezuela").Y(8).Text("8%").Add();
                                           pt.X("Mexico").Y(3).Text("3%").Add();
                                           pt.X("Russia").Y(2).Text("2%").Add();
                                           pt.X("Miscellaneous").Y(1).Text("1%").Add();
                                       }).LabelPosition(ChartLabelPosition.Inside)
                                          .EnableSmartLabels(true)
                                          .PieCoefficient(1)
                                          .PieOfPieCoefficient(0.8f)
                                          .ConnectorLine(cl => cl.Width(2).DashArray("2,3"))
                                          .SplitValue("10")
                                          .GapWidth(100)
                                          .EnableAnimation(true)
                                          .Tooltip(tp=>tp.Visible(true))
                                          .Marker(mr =>
                                          {
                                              mr.DataLabel(db =>
                                              {
                                                  db.Visible(true).EnableContrastColor(true).Font(fn => { fn.Size("13px"); });                                                      
                                              });
                                          }).Name("Oil Import").Type(SeriesType.PieOfPie).Add();
                    })           
            .Load("loadTheme")
            .Title(title => title.Text("Oil and other liquid imports in USA").SubTitle(st => st.Text("In the year 2014 - 2015")))
            .IsResponsive(true)
            .Size(sz => sz.Height("600"))
            .Legend(lg => { lg.Visible(true); })
        )
}
@section PropertiesSection
{
    <div class="prop-grid">
        <div class="row">
            <div class="col-md-3">
                Split Mode
            </div>
            <div class="col-md-3">
                <select name="selectIndex" id="splitMode">
                    <option value="0">Value</option>
                    <option value="1">Position</option>
                    <option value="2">Percentage</option>
                    <option value="3">Indexes</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Split Value
            </div>
            <div class="col-md-3">
                <input type="text" id="splitValue" value="10" style="width:90px;height:18px" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Gap Width
            </div>
            <div class="col-md-3">
                <input type="text" id="gapWidth" style="width:100px" />
            </div>
        </div>
    </div>
}
@section ScriptSection
{
    <script>
        $('#splitValue').change(changeSplitValue);
        $('#splitMode').change(changeSplitMode);
        $("#gapWidth").ejNumericTextbox({
            value: 100, width: "95px", height: "25px", minValue: 0, maxValue: 300, change: "changeGapWidth",
        });
        function changeSplitValue() {
            var chartObj = $("#container").ejChart("instance");
            if (chartObj.model.series[0].splitMode != "indexes")
                chartObj.model.series[0].splitValue = parseFloat($("#splitValue").val());
            else
                chartObj.model.series[0].splitValue = JSON.parse("[" + $("#splitValue").val() + "]");
            chartObj.redraw();
        }
        function changeGapWidth(sender) {
            var chartObj = $("#container").ejChart("instance");
            chartObj.model.series[0].gapWidth = parseInt(sender.value);
            chartObj.redraw();
        }

        function changeSplitMode() {
            var option = $("#splitMode option:selected").text();
            if (option == "Value") {
                $("#splitValue").val(10);
                $("#container").ejChart("option", { "commonSeriesOptions": { splitValue: $("#splitValue").val(), splitMode: option.toLowerCase() } });
            }
            else if (option == "Position") {
                $("#splitValue").val(3);
                $("#container").ejChart("option", { "commonSeriesOptions": { splitValue: $("#splitValue").val(), splitMode: option.toLowerCase() } });
            }
            else if (option == "Percentage") {
                $("#splitValue").val(15);
                $("#container").ejChart("option", { "commonSeriesOptions": { splitValue: $("#splitValue").val(), splitMode: option.toLowerCase() } });
            }
            else if (option == "Indexes") {
                $("#splitValue").val("1,4,5,2");
                $("#container").ejChart("option", { "commonSeriesOptions": { splitValue: "1,4,5,2", splitMode: option.toLowerCase() } });
            }
        }
        $("#sampleProperties").ejPropertiesPanel();
    </script>
}


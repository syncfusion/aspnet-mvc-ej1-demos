@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">Chart-Selection API-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates selection for series using Syncfusion ASP.NET MVC Chart Control">
}

@section ControlsSection{
  
    @(Html.EJ().Chart("Chart1")       
       .PrimaryXAxis(pr => pr.Title(tl => tl.Text("Countries")).Font(fn => fn.Size("15px"))
            .LabelIntersectAction(LabelIntersectAction.MultipleRows))
            .PrimaryYAxis(yaxis => yaxis.Title(tit => tit.Text("Percentage")).LabelFormat("{value}%"))
            .CommonSeriesOptions(cm => cm.EnableAnimation(true).Type(SeriesType.Column)
            .Tooltip(tooltip => tooltip.Visible(false))
			.HighlightSettings(hs => hs.Enable(true).Mode(ChartMode.Point).Opacity(1).Pattern(ChartPattern.DiagonalForward).Border(bo => bo.Width(1)))
			.SelectionSettings(hs => hs.Enable(true).Type(ChartSelectionType.Single).Mode(ChartMode.Point).Opacity(1).Pattern(ChartPattern.Dots).Border(bo => bo.Width(1))))
            .Series(sr =>
                {
                    sr.Points(pt =>
                        {
                            pt.X("China").Y(17).Add();
                            pt.X("United States").Y(19).Add();
                            pt.X("India").Y(29).Add();
                            pt.X("Japan").Y(13).Add();
                            pt.X("Brazil").Y(24).Add();
                            pt.X("Russia").Y(16).Add();
                            pt.X("Nigeria").Y(44).Add();
                            pt.X("Germany").Y(13).Add();
                            pt.X("United Kingdom").Y(18).Add();
                            pt.X("France").Y(19).Add();
                        }).Name("Age 0-14").Add();
						sr.Points(pt =>
                        {
                            pt.X("China").Y(74).Add();
                            pt.X("United States").Y(67).Add();
                            pt.X("India").Y(65).Add();
                            pt.X("Japan").Y(61).Add();
                            pt.X("Brazil").Y(68).Add();
                            pt.X("Russia").Y(70).Add();
                            pt.X("Nigeria").Y(53).Add();
                            pt.X("Germany").Y(66).Add();
                            pt.X("United Kingdom").Y(65).Add();
                            pt.X("France").Y(63).Add();
                        }).Name("Age 15-64").Add();
						sr.Points(pt =>
                        {
                            pt.X("China").Y(9).Add();
                            pt.X("United States").Y(14).Add();
                            pt.X("India").Y(6).Add();
                            pt.X("Japan").Y(26).Add();
                            pt.X("Brazil").Y(8).Add();
                            pt.X("Russia").Y(14).Add();
                            pt.X("Nigeria").Y(3).Add();
                            pt.X("Germany").Y(21).Add();
                            pt.X("United Kingdom").Y(17).Add();
                            pt.X("France").Y(18).Add();
                        }).Name("Age 65 & above").Add();
                })
            .Title(title => title.Text("Age Distribution By Country In Percentage"))
            .IsResponsive(true)
            .Load("loadTheme")
            .Size(sz => sz.Height("600"))
            .Legend(lg => { lg.Visible(true).ToggleSeriesVisibility(false); })
            )
}
@section PropertiesSection
{
    <div class="prop-grid">
						<div class="row">
							<div class="col-md-3">
								 Enable Highlight
							</div>
							<div class="col-md-3 aligntop">
                                <input type="checkbox" checked="checked" id="enablehigh"/>
							</div>
						</div>
                        <div class="row">
							<div class="col-md-3">
								 Enable Selection
							</div>
							<div class="col-md-3 aligntop">
                                <input type="checkbox" checked="checked" id="enablesel"/>
							</div>
						</div>
                        <div class="row">
							<div class="col-md-3">
								 Enable 3D
							</div>
							<div class="col-md-3 aligntop">
                                <input type="checkbox" id="enable3d"/>
							</div>
						</div>
                         <div class="row">
							<div class="col-md-3">
								 Enable Legend Selection
							</div>
							<div class="col-md-3 aligntop">
                                <input type="checkbox" checked="checked" id="enablelege"/>
							</div>
						</div>
						<div class="row" style="margin: 10px 0;">
							<div class="col-md-3">
								  Type
							</div>
							<div class="col-md-3 aligntop">
								<select name="selectIndex" autocomplete="off" id="type">
									<option value="column">Column</option>
									<option value="bar">Bar</option>
									<option value="doughnut">Doughnut</option>
									<option value="pie">Pie</option>
								</select>
							</div>
						</div>
						<div class="row">
							<div class="col-md-3">
								  Highlight Color
							</div>
							<div class="col-md-3 aligntop">
							 @Html.EJ().ColorPicker("colorPicker").Value("#278787").ClientSideEvents(events => events.Select("onChange"))
							</div>
						</div>
                        <div class="row" style="margin: 10px 0;">
							<div class="col-md-3">
								  Highlight Pattern
							</div>
							<div class="col-md-3 aligntop">
								<select name="selectIndex" autocomplete="off" id="highpattern" style="width:100px;">
									<option value="diagonalForward">Diagonal Forward</option>
									<option value="chessboard">Chessboard</option>
									<option value="dots">Dots</option>
									<option value="none">None</option>
								</select>
							</div>
						</div>
					    <div class="row" style="margin: 10px 0;">
							<div class="col-md-3">
								  Highlight Mode
							</div>
							<div class="col-md-3 aligntop">
								<select name="selectIndex" autocomplete="off" id="highmode" style="width:100px;">
									<option value="point">Point</option>
									<option value="series">Series</option>
									<option value="cluster">Cluster</option>
							    </select>
							</div>
						</div>
                        <div class="row">
							<div class="col-md-3">
								  Selection Color
							</div>
							<div class="col-md-3 aligntop">
								 @Html.EJ().ColorPicker("colorPicker1").Value("#278787").ClientSideEvents(events => events.Select("onChange1"))
							</div>
						</div>
                        <div class="row" style="margin: 10px 0;">
							<div class="col-md-3">
								  Selection Pattern
							</div>
							<div class="col-md-3 aligntop">
								<select name="selectIndex" autocomplete="off" id="selpattern" style="width:100px;">
									<option value="dots">Dots</option>
									<option value="diagonalForward">Diagonal Forward</option>
									<option value="chessboard">Chessboard</option>
									<option value="none">None</option>
								</select>
							</div>
						</div>
						<div class="row" style="margin: 10px 0;">
							<div class="col-md-3">
								  Selection Mode
							</div>
							<div class="col-md-3 aligntop">
								<select name="selectIndex" autocomplete="off" id="selmode" style="width:100px;">
									<option value="point">Point</option>
									<option value="series">Series</option>
									<option value="cluster">Cluster</option>
								</select>
							</div>
						</div>
                        <div class="row" style="margin: 10px 0;">
                            <div class="col-md-3">
                                Selection Type
                            </div>
                            <div class="col-md-3 aligntop">
                                <select name="selectIndex" autocomplete="off" id="selctionType" style="width:100px;">
                                    <option value="Single">Single</option>
                                    <option value="Multiple">Multiple</option>
                                </select>
                            </div>
                        </div>
					</div>
}
@section ScriptSection
{
    <script>

      
        $('#enablehigh').change(function () {
            $("#Chart1").ejChart("option", { "commonSeriesOptions": {highlightSettings:{enable:$('#enablehigh').is(":checked")}} });

        });
        $('#enablesel').change(function () {
            $("#Chart1").ejChart("option", { "commonSeriesOptions": {selectionSettings:{enable:$('#enablesel').is(":checked")}} });

        });
        $('#enable3d').change(function () {
            var chart = $("#Chart1").ejChart("instance");
            chart.model.enable3D = $('#enable3d').is(":checked");
            chart.model.enableRotation = true;
            chart.model.depth = 40;
            chart.model.wallSize = 2;
            chart.model.tilt = 0;
            chart.model.rotation = 34;
            chart.model.perspectiveAngle = 90;
            chart.model.sideBySideSeriesPlacement = true;
            chart.redraw();

        });
        $('#enablelege').change(function () {
            var chart = $("#Chart1").ejChart("instance");
            chart.model.legend.toggleSeriesVisibility = !$('#enablelege').is(":checked");
            chart.redraw();

        });
        $('#type').change(function () {
            var chart = $("#Chart1").ejChart("instance");
            if ($('#type')[0].value.toLowerCase() == "pie" || $('#type')[0].value.toLowerCase() == "doughnut") {

                chart.model.series[0].type = ($('#type')[0].value);
                chart.model.series[1].type = "column";
                chart.model.series[2].type = "column";
            }
            else {
                chart.model.series[0].type = ($('#type')[0].value);
                chart.model.series[1].type = ($('#type')[0].value);
                chart.model.series[2].type = ($('#type')[0].value);
            }
            chart.redraw();

        });

       
        $('#highpattern').change(function () {
		 $("#Chart1").ejChart("option", { "commonSeriesOptions": {highlightSettings:{pattern:$('#highpattern')[0].value}} });
          
        });
		$('#highmode').change(function () {
            $("#Chart1").ejChart("option", { "commonSeriesOptions": {highlightSettings:{mode:$('#highmode')[0].value}} });

        });

       
        $('#selpattern').change(function () {
            $("#Chart1").ejChart("option", { "commonSeriesOptions": {selectionSettings:{pattern:$('#selpattern')[0].value}} });

        });
        $('#selmode').change(function () {
           $("#Chart1").ejChart("option", { "commonSeriesOptions": {selectionSettings:{mode:$('#selmode')[0].value}} });

        });
        $('#selctionType').change(function () {           
            $("#Chart1").ejChart("option", { "commonSeriesOptions": { selectionSettings: { type: $('#selctionType')[0].value } } });
        });
  	 function onChange(args) {
            var color = args.value;
            var chart = $("#Chart1").ejChart("instance");

            for (var i = 0; i < chart.model.series.length; i++) {
                chart.model.series[i].highlightSettings.color = color;
                              
            }
        }
        function onChange1(args) {
            var color = args.value;
            var chart = $("#Chart1").ejChart("instance");

            for (var i = 0; i < chart.model.series.length; i++) {
                chart.model.series[i].selectionSettings.color = color;

            }
        }
        $("#sampleProperties").ejPropertiesPanel();

    </script>
}




@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">Chart-Error Bar-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates how to render error bar for series points using Syncfusion ASP.NET MVC Chart Control">
}

@section ControlsSection{

    <div>
        @(Html.EJ().Chart("container").PrimaryXAxis(xaxis => xaxis.Title(tl => tl.Text("Months")).EdgeLabelPlacement(EdgeLabelPlacement.Hide))
           .PrimaryYAxis(pr => pr.LabelFormat("{value}C").Range(ra => ra.Min(0).Max(40).Interval(5)).Title(tl => tl.Text("Temperature")))
              .CommonSeriesOptions(cm => cm.EnableAnimation(false).Tooltip(tl=>tl.Visible(true)).Type(SeriesType.Line)
                  .Marker(mr => mr.DataLabel(dt => dt.Visible(false).Shape(ChartShape.Rectangle).Font(fn=>fn.Color("white")).ConnectorLine(cl=>cl.Width(1))).Shape(ChartShape.Circle).Visible(true)))
               .Series(sr =>
               {
                   sr.Points(po =>
                       {

                           po.X("Jan").Y(7.0).Add();
                           po.X("Feb").Y(6.9).Add();
                           po.X("Mar").Y(9.5).Add();
                           po.X("Apr").Y(14.5).Add();
                           po.X("May").Y(18.2).Add();
                           po.X("Jun").Y(21.5).Add();
                           po.X("Jul").Y(25.2).Add();
                           po.X("Aug").Y(26.5).Add();
                           po.X("Sep").Y(23.3).Add();
                           po.X("Oct").Y(18.3).Add();
                           po.X("Nov").Y(13.9).Add();
                           po.X("Dec").Y(9.6).Add();

                       })

                       .ErrorBar(er =>
                           er.Visibility("visible"))
                       .Name("Temperature").Add();

             })
              .Load("loadTheme")
              .Size(sz=>sz.Height("600"))
              .IsResponsive(true)
              .Title(title => title.Text("Temperature Over Months"))
              .Legend(lg => { lg.Visible(false); })
              .EnableCanvasRendering(false))
    </div>
}

@section PropertiesSection
{
    <div class="prop-grid">
        <div class="row">
            <div class="col-md-3">
                Error Bar Visible
            </div>
            <div class="col-md-3 aligntop">
                <input type="checkbox" checked="checked" id="visible" onchange="visible()" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Cap Visible
            </div>
            <div class="col-md-3 aligntop">
                <input type="checkbox" checked="checked" id="cap" onchange="cap()" />
            </div>
        </div>
        <div class="row" style="margin: 10px 0;">
            <div class="col-md-3">
                Error Bar Type
            </div>
            <div class="col-md-3 aligntop">
                <select name="selectIndex" autocomplete="off" id="ErrorBarType" style="width:115px;">
                    <option value="0">Fixed Value</option>
                    <option value="1">Percentage</option>
                    <option value="2">Standard Deviation</option>
                    <option value="3">Standard Error</option>
                    <option value="4">Custom</option>
                </select>
            </div>
        </div>
        <div class="row" style="margin: 10px 0;">
            <div class="col-md-3">
                Drawing Mode:
            </div>
            <div class="col-md-3 aligntop">
                <select name="selectIndex" autocomplete="off" id="mode" style="width:100px;">
                    <option value="0">Vertical</option>
                    <option value="1">Horizontal</option>
                    <option value="2">Both</option>

                </select>
            </div>
        </div>
        <div class="row" style="margin: 10px 0;">
            <div class="col-md-3">
                Direction Mode
            </div>
            <div class="col-md-3 aligntop">
                <select name="selectIndex" autocomplete="off" id="direction" style="width:100px;">
                    <option value="0">Both</option>
                    <option value="1">Minus</option>
                    <option value="2">Plus</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Vertical Value
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().NumericTextbox("vertical").Value(3).Width("50%").MinValue(1).MaxValue(5).ClientSideEvents(s=>s.Change("vertical"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Horizontal Value
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().NumericTextbox("horizontal").Value("1").Width("50%").MinValue(1).MaxValue(5).ClientSideEvents(s => s.Change("horizontal"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Vertical Positive Value
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().NumericTextbox("verticalPositive").Enabled(false).Value("5").Width("50%").MinValue(1).MaxValue(5).ClientSideEvents(s => s.Change("verticalPositive"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Vertical Negative Value
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().NumericTextbox("verticalNegative").Enabled(false).Value("5").Width("50%").MinValue(1).MaxValue(5).ClientSideEvents(s => s.Change("verticalNegative"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Horizontal Positive Value
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().NumericTextbox("horizontalPositive").Enabled(false).Value("1").Width("50%").MinValue(1).MaxValue(5).ClientSideEvents(s => s.Change("horizontalPositive"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Horizontal Negative Value
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().NumericTextbox("horizontalNegative").Enabled(false).Value("1").Width("50%").MinValue(1).MaxValue(5).ClientSideEvents(s => s.Change("horizontalNegative"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Error Bar Fill:
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().ColorPicker("errorbarFill").Value("#000000").ClientSideEvents(s=>s.Select("errorBarColor"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Cap Fill:
            </div>
            <div class="col-md-3 aligntop">
               @Html.EJ().ColorPicker("capFill").Value("#000000").ClientSideEvents(s=>s.Select("errorBarCap"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Cap Length:
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().NumericTextbox("capLength").Value("20").Width("50%").MinValue(10).MaxValue(50).ClientSideEvents(s => s.Change("capLength"))
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Cap width:
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().NumericTextbox("capWidth").Value("1").Width("50%").MinValue(1).MaxValue(5).ClientSideEvents(s => s.Change("capWidth"))
            </div>
        </div>
      
    </div>

}

@section ScriptSection
{
<script>



    $("#visible").click(function () {
        if ($(this).is(':checked')) {
            $("#cap").removeAttr("disabled");
            $("#ErrorBarType").removeAttr("disabled");
            $("#mode").removeAttr("disabled");
            $("#direction").removeAttr("disabled");
            $("#vertical").ejNumericTextbox({ enabled: true });
            $("#horizontal").ejNumericTextbox({ enabled: true });
            $("#verticalPositive").ejNumericTextbox({ enabled: false });
            $("#verticalNegative").ejNumericTextbox({ enabled: false });
            $("#horizontalPositive").ejNumericTextbox({ enabled: false });
            $("#horizontalNegative").ejNumericTextbox({ enabled: false });
            $('#errorbarFill').ejColorPicker({ enabled: true });
            $('#capFill').ejColorPicker({ enabled: true });
            if ($("#cap").is(':checked')) {
                $("#capFill").ejColorPicker({ enabled: true });
                $("#capLength").ejNumericTextbox({ enabled: true });
                $("#capWidth").ejNumericTextbox({ enabled: true });
            }
            else {
                $("#capFill").ejColorPicker({ enabled: false });
                $("#capLength").ejNumericTextbox({ enabled: false });
                $("#capWidth").ejNumericTextbox({ enabled: false });
            }

        }
        else {
            $("#cap").attr("disabled", "disabled");
            $("#ErrorBarType").attr("disabled", "disabled");
            $("#mode").attr("disabled", "disabled");
            $("#direction").attr("disabled", "disabled");
            $("#vertical").ejNumericTextbox({ enabled: false });
            $("#horizontal").ejNumericTextbox({ enabled: false });
            $("#verticalPositive").ejNumericTextbox({ enabled: false });
            $("#verticalNegative").ejNumericTextbox({ enabled: false });
            $("#horizontalPositive").ejNumericTextbox({ enabled: false });
            $("#horizontalNegative").ejNumericTextbox({ enabled: false });
            $('#errorbarFill').ejColorPicker({ enabled: false });
            $("#capFill").ejColorPicker({ enabled: false });
            $("#capLength").ejNumericTextbox({ enabled: false });
            $("#capWidth").ejNumericTextbox({ enabled: false });
        }
    });

    $("#cap").click(function () {
        if ($(this).is(':checked')) {
            $("#capFill").ejColorPicker({ enabled: true });
            $("#capLength").ejNumericTextbox({ enabled: true });
            $("#capWidth").ejNumericTextbox({ enabled: true });
        }
        else {
            $("#capFill").ejColorPicker({ enabled: false });
            $("#capLength").ejNumericTextbox({ enabled: false });
            $("#capWidth").ejNumericTextbox({ enabled: false });
        }
    });

    $('#ErrorBarType').change(function () {

        var dropdownValue = $("#ErrorBarType option:selected").text();
        if (dropdownValue == "Custom") {
            $("#vertical").ejNumericTextbox({ enabled: false });
            $("#horizontal").ejNumericTextbox({ enabled: false });
            $("#verticalPositive").ejNumericTextbox({ enabled: true });
            $("#verticalNegative").ejNumericTextbox({ enabled: true });
            $("#horizontalPositive").ejNumericTextbox({ enabled: true });
            $("#horizontalNegative").ejNumericTextbox({ enabled: true });
        }
        else {
            $("#vertical").ejNumericTextbox({ enabled: true });
            $("#horizontal").ejNumericTextbox({ enabled: true });
            $("#verticalPositive").ejNumericTextbox({ enabled: false });
            $("#verticalNegative").ejNumericTextbox({ enabled: false });
            $("#horizontalPositive").ejNumericTextbox({ enabled: false });
            $("#horizontalNegative").ejNumericTextbox({ enabled: false });
        }
    });

    function visible() {
        var chart = $("#container").ejChart("instance");
        if ($("#visible").is(":checked"))
            chart.model.series[0].errorBar.visibility = "visible";
        else {
            chart.model.series[0].errorBar.visibility = "hidden";
        }
        chart.redraw();
    }


    function cap() {
        var chart = $("#container").ejChart("instance");
        if ($("#cap").is(":checked"))
            chart.model.series[0].errorBar.cap.visible = true;
        else {
            chart.model.series[0].errorBar.cap.visible = false;
        }
        chart.redraw();
    }



    $('#ErrorBarType').change(function () {
        var ErrorType = $("#ErrorBarType option:selected").text();
        var chart = $("#container").ejChart("instance");
        switch (ErrorType) {
            case 'Fixed Value':
                chart.model.series[0].errorBar.type = 'fixedValue';
                chart.redraw();
                break;
            case 'Percentage':
                chart.model.series[0].errorBar.type = 'percentage';
                chart.redraw();
                break;
            case 'Standard Deviation':
                chart.model.series[0].errorBar.type = 'standardDeviation';
                chart.redraw();
                break;
            case 'Standard Error':
                chart.model.series[0].errorBar.type = 'standardError';
                chart.redraw();
                break;
            case 'Custom':
                chart.model.series[0].errorBar.type = 'custom';
                chart.redraw();
                break;
            default:
        }
    });

    function vertical(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.verticalErrorValue = sender.value;
        chart.redraw();
    }

    function horizontal(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.horizontalErrorValue = sender.value;
        chart.redraw();
    }
    function verticalPositive(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.verticalPositiveErrorValue = sender.value;
        chart.redraw();
    }

    function verticalNegative(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.verticalNegativeErrorValue = sender.value;
        chart.redraw();
    }
    function horizontalPositive(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.horizontalPositiveErrorValue = sender.value;
        chart.redraw();
    }

    function horizontalNegative(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.horizontalNegativeErrorValue = sender.value;
        chart.redraw();
    }

    function capLength(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.cap.length = sender.value;
        chart.redraw();
    }


    function capWidth(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.cap.width = sender.value;
        chart.redraw();
    }


    function errorBarColor(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.fill = sender.value;
        chart.redraw();
    }

    function errorBarCap(sender) {
        var chart = $("#container").ejChart("instance");
        chart.model.series[0].errorBar.cap.fill = sender.value;
        chart.redraw();
    }


    $('#mode').change(function () {
        var mode1 = $("#mode option:selected").text();
        var chart = $("#container").ejChart("instance");
        switch (mode1) {
            case 'Vertical':
                chart.model.series[0].errorBar.mode = 'vertical';
                chart.redraw();
                break;
            case 'Horizontal':
                chart.model.series[0].errorBar.mode = 'horizontal';
                chart.redraw();
                break;
            case 'Both':
                chart.model.series[0].errorBar.mode = 'both';
                chart.redraw();
                break;
            default:
        }
    });

    $('#direction').change(function () {
        var direction1 = $("#direction option:selected").text();
        var chart = $("#container").ejChart("instance");
        switch (direction1) {
            case 'Both':
                chart.model.series[0].errorBar.direction = 'both';
                chart.redraw();
                break;
            case 'Minus':
                chart.model.series[0].errorBar.direction = 'minus';
                chart.redraw();
                break;
            case 'Plus':
                chart.model.series[0].errorBar.direction = 'plus';
                chart.redraw();
                break;
            default:
        }
    });

    $("#sampleProperties").ejPropertiesPanel();
    </script>
}






@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">Chart-Trendlines-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates how to render and configure trendlines using Syncfusion ASP.NET MVC Chart Control">
}

@section ControlsSection{
  
    @(Html.EJ().Chart("container")       
        .PrimaryYAxis(pr => pr.Title(tl => tl.Text("Rupees against Dollars")))
        .CommonSeriesOptions(cr => cr.EnableAnimation(true).Tooltip(Tt => Tt.Visible(true)))
        .Series(sr =>
            {
                sr.Name("Rupees").Fill("#0066FF").Type(SeriesType.Scatter)
                    .Trendlines(tr => { tr.Visibility("visible").Fill("#99CCFF").Name("Linear").Add(); }).Add();
            })
        .ChartArea(ca => ca.Border(br => br.Color("transparent")))
        .IsResponsive(true)
        .Load("chartLoad")
                .Title(title => title.Text("Historical Indian Rupee Rate (INR USD)"))
        .Size(sz => sz.Height("600"))
        .Legend(lg => { lg.Visible(true).Shape(ChartShape.SeriesType); }))
}
@section PropertiesSection
{
    <div class="prop-grid">
    <div class="row">
        <div class="col-md-3">
            <div style="padding-top:5px"> Trendline Type: </div>
        </div>
        <div class="col-md-3 aligntop">
            <select style="width:100px" name="Trendline" autocomplete="off" id="trendlineType">
                <option>Linear</option>
                <option>Exponential</option>
                <option>Logarithmic</option>
                <option>Power</option>
                <option>Polynomial</option>
                <option>MovingAverage</option>
            </select>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <div style="padding-top:5px">Forward Forecast: </div>
        </div>
        <div class="col-md-3 aligntop">
            <input type="text" id="forwardForecast" onchange="forwardForecast(this)" style="width:95px; height:22px;" value=0 />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            Backward Forecast:
        </div>
        <div class="col-md-3 aligntop">
            <input type="text" id="backwardForecast" onchange="backwardForecast(this)" style="width:95px; height:22px;" value=0 />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <div style="padding-top:5px">Polynomial Order:</div>
        </div>
        <div class="col-md-3 aligntop">
            <input type="text" id="polynomialOrder" disabled onchange="polynomialOrder(this)" style="width:95px; height:22px;" value=2 />
        </div>
    </div>
        <div class="row">
            <div class="col-md-3">
                <div style="padding-top:5px">Period:</div>
            </div>
            <div class="col-md-3 aligntop">
                <input type="text" id="period" disabled onchange="period(this)" style="width:95px; height:22px;" value=2 />
            </div>
        </div>
</div>
}
@section ScriptSection
{
    <script>
        var powerData = getPowerTrendData();
	    var data = getData();
        function chartLoad(sender) {            
            sender.model.series[0].dataSource = data.Open;
            sender.model.series[0].xName = "XValue";
            sender.model.series[0].yName = "YValue";
        }

        function getData() {
            var series1 = [];
            var yValue = [7.66, 8.03, 8.41, 8.97, 8.77, 8.20, 8.16, 7.89, 8.68, 9.48, 10.11, 11.36, 12.34, 12.60, 12.95, 13.91, 16.21, 17.50, 22.72, 28.14, 31.26, 31.39, 32.43, 35.52, 36.36,
                         41.33, 43.12, 45.00, 47.23, 48.62, 46.60, 45.28, 44.01, 45.17, 41.20, 43.41, 48.32, 45.65, 46.61, 53.34, 58.53];
            var j = 0;
            for (var i = 1973; i <= 2013; i++) {
                var point1 = { XValue: i, YValue: yValue[j] };
                series1.push(point1);
                j = j + 1;
            }
            var data = { Open: series1 };
            return data;
        }
		
 		 function getPowerTrendData(){
		   var data = [
		   { XValue: 1, YValue: 10 },
		   { XValue: 2, YValue: 50 },
		   { XValue: 3, YValue: 80 },
		   { XValue: 4, YValue: 110 },
		   { XValue: 5, YValue: 180 },
		   { XValue: 6, YValue: 220 },
		   { XValue: 7, YValue: 300 },
		   { XValue: 8, YValue: 370 },
		   { XValue: 9, YValue: 490 },
		   { XValue: 10, YValue: 500 }
		              ];
		   return data;
		 }
		 
        //Change trendline type
        $('#trendlineType').change(function () {
            var type = $("#trendlineType option:selected").text();
            var chart = $("#container").ejChart("instance");
		    chart.model.series[0].points = [];
		    if(type.toLowerCase() != "power"){
		      chart.model.series[0].dataSource = data.Open;
			  chart.model.series[0].name = "Rupees";
			  chart.model.series[0].trendlines[0].name = type;
			  chart.model.primaryXAxis.title.text = "Years";
			  chart.model.primaryYAxis.title.text = "Rupees against Dollars";
			  chart.model.title.text = 'Historical Indian Rupee Rate (INR USD)';
			 
		   }
		   else {	 
		      chart.model.series[0].dataSource = powerData;
			  chart.model.series[0].name = "Meters";
			  chart.model.series[0].trendlines[0].name = type + "(Meters)";
			  chart.model.primaryXAxis.title.text = "Seconds";
			  chart.model.primaryYAxis.title.text = "Meters";
			  chart.model.title.text = 'Distance Measurement';
		    }
		  
		    chart.model.series[0].trendlines[0].type = type.toLowerCase();
            if (type == "MovingAverage") {
                $("#forwardForecast").attr("disabled", true);
                $("#backwardForecast").attr("disabled", true);
                $("#polynomialOrder").attr("disabled", true);
                $("#period").attr("disabled", false);
            } else if (type == "Polynomial") {
                $("#forwardForecast").attr("disabled", false);
                $("#backwardForecast").attr("disabled", false);
                $("#polynomialOrder").attr("disabled", false);
                $("#period").attr("disabled", true);
            } else {
                $("#forwardForecast").attr("disabled", false);
                $("#backwardForecast").attr("disabled", false);
                $("#polynomialOrder").attr("disabled", true);
                $("#period").attr("disabled", true);
            }
            chart.redraw()
        });

        function forwardForecast(sender) {
            var chart = $("#container").ejChart("instance");
            var value = (sender.value == "") ? 0 : sender.value;
       chart.model.series[0].trendlines[0].forwardForecast=parseFloat(value);
            chart.redraw();
        }
        function backwardForecast(sender) {
            var chart = $("#container").ejChart("instance");
            var value = (sender.value == "") ? 0 : sender.value;
       chart.model.series[0].trendlines[0].backwardForecast=parseFloat(value);
            chart.redraw();
        }
        function polynomialOrder(sender) {
            var chart = $("#container").ejChart("instance");
            chart.model.series[0].trendlines[0].polynomialOrder = parseInt(sender.value);
            chart.redraw();
        }
        function period(sender) {
            var chart = $("#container").ejChart("instance");
            chart.model.series[0].trendlines[0].period = parseInt(sender.value);
            chart.redraw();
        }

        $("#sampleProperties").ejPropertiesPanel();
        $("#controlarea").css("visibility", "visible");
    </script>
}




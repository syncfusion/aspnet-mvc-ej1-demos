@using Syncfusion.JavaScript.DataVisualization

@section ScriptReferenceSection{
    <script src="~/Scripts/onlinedata.js"></script>
}

@section SampleHeading{<span class="sampleName">Chart-MACD-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates how to render MACD indicator using Syncfusion ASP.NET MVC Chart Control">
}

@section ControlsSection{

    <div>
   @(Html.EJ().Chart("container")
         .Axes(ax =>
                     {
                         ax.Name("yAxis1").OpposedPosition(true).MajorGridLines(mg => mg.Visible(false)).Add();
                     })
        .PrimaryXAxis(pr => pr.Title(tl => tl.Text("Date")).ValueType(AxisValueType.Datetime).LabelFormat("dd,MMM"))
        .PrimaryYAxis(pr => pr.LabelFormat("${value}").Range(ra => ra.Min(55).Max(75).Interval(5)))
        .Series(sr =>
            {
                sr.Name("Hilo").Type(SeriesType.HiloOpenClose).Tooltip(tool => tool.Visible(false)
                  .Format("#point.x#<br/>Open : $#point.open#<br/>High : $#point.high#<br/>Low : $#point.low#<br/>Close : $#point.close#<br/>")).Add();

            })
            .Crosshair(cr => cr.Visible(true).Type(CrosshairType.Trackball))
            .Indicators(ind => ind.Type(ChartIndicatorType.MACD).SeriesName("Hilo").MacdType(MacdType.Both).Period(14).YAxisName("yAxis1")
                 .Fill("blue").Width(2).EnableAnimation(true)
                 .Tooltip(tool => tool.Visible(false).Format("").Fill("transparent").Border(br => br.Color("transparent")))
                 .UpperLine(ul => ul.Fill("red").Width(2))
                 .LowerLine(ll => ll.Fill("green").Width(2))
                 .Histogram(ht => ht.Fill("red").Opacity(0.7).Border(br => br.Color("red").Width(1)))
                 .Add())
        .Load("chartLoad")
        .TrackToolTip("track")
        .CommonSeriesOptions(cr => cr.EnableAnimation(true))
        .IsResponsive(true)
        .Title(title => title.Text("MACD Indicator"))
        .Zooming(zm => zm.Enable(true))
        .Size(sz => sz.Height("600"))
        .Legend(lg => { lg.Visible(false); })
        )
    </div>
}
@section PropertiesSection

{
    <div id="sampleProperties">
        <div class="prop-grid">
            <div class="row">
                <div class="col-md-3">
                    Short Period
                </div>
                <div class="col-md-3 aligntop">
						@Html.EJ().NumericTextbox("shortPeriod").Value(12).Width("80px").MinValue(1).MaxValue(50).ClientSideEvents(s => s.Change("shortperiod"))
                </div>
                <div class="col-md-3">
                    Long Period
                </div>
                <div class="col-md-3 aligntop">
						@Html.EJ().NumericTextbox("longPeriod").Value(26).Width("80px").MinValue(1).MaxValue(50).ClientSideEvents(s => s.Change("longperiod"))
                </div>
                <div class="col-md-3">
                    Trigger
                </div>
                <div class="col-md-3 aligntop">
						@Html.EJ().NumericTextbox("trigger").Value(9).Width("80px").MinValue(1).MaxValue(50).ClientSideEvents(s => s.Change("trigger"))
                </div>
            </div>
            <div class="row">
                <div class="col-md-3">
                    MACD Type
                </div>
                <div class="col-md-3 aligntop">
                    <select name="macdType" autocomplete="off" id="macdType">
                        <option value="0">Both</option>
                        <option value="2">Line</option>
                        <option value="1">Histogram</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
}
@section ScriptSection
{
    <script type="text/javascript" language="javascript">
        function track(sender) {
            sender.data.Location.X = sender.data.Location.X + 1;
            if (sender.data.Series.name == "Hilo") {
                if (this.model.indicators[0].segment.length > 0) {
                    if ((this.model.indicators[0].macdType == "both")) {
                        if (this.model.indicators[0].segment[0].points[sender.data.pointIndex].y != null) {
                            sender.data.currentText = sender.data.currentText + "Histogram : " + "$" +
                            this.model.indicators[0].segment[0].points[sender.data.pointIndex].y.toFixed(2) + "<br/>" + "MACD" + ":" + "$" +
                            this.model.indicators[0].segment[2].points[sender.data.pointIndex].y.toFixed(2) + "<br/>" + "Signal:" + "$" +
                            this.model.indicators[0].segment[1].points[sender.data.pointIndex].y.toFixed(2) + "<br/>" + "<br/>";
                        }
                        else {
                            sender.data.currentText = sender.data.currentText + "Histogram : " + "$" +
                            this.model.indicators[0].segment[0].points[sender.data.pointIndex].y + "<br/>" + "MACD " + " :" + "$" +
                            this.model.indicators[0].segment[2].points[sender.data.pointIndex].y + "<br/>" + "Signal : " + "$" +
                            this.model.indicators[0].segment[1].points[sender.data.pointIndex].y + "<br/>" + "<br/>";
                        }
                    }
                    if ((this.model.indicators[0].macdType == "line")) {
                        if (this.model.indicators[0].segment[1].points[sender.data.pointIndex].y != null) {
                            sender.data.currentText = sender.data.currentText + "MACD " + " :" + "$" +
                            this.model.indicators[0].segment[0].points[sender.data.pointIndex].y.toFixed(2) + "<br/>" + "Signal :" + "$" +
                            this.model.indicators[0].segment[1].points[sender.data.pointIndex].y.toFixed(2) + "<br/>" + "<br/>";
                        }
                        else {
                            sender.data.currentText = sender.data.currentText + "MACD " + " :" + "$" +
                            this.model.indicators[0].segment[0].points[sender.data.pointIndex].y + "<br/>" + "Signal : " + "$" +
                            this.model.indicators[0].segment[1].points[sender.data.pointIndex].y + "<br/>" + "<br/>";
                        }
                    }
                    if ((this.model.indicators[0].macdType == "histogram")) {
                        if (this.model.indicators[0].segment[0].points[sender.data.pointIndex].y != null) {
                            sender.data.currentText = sender.data.currentText + "Histogram : " + "$" +
                            this.model.indicators[0].segment[0].points[sender.data.pointIndex].y.toFixed(2) + "<br/>" + "<br/>";
                        }
                        else {
                            sender.data.currentText = sender.data.currentText + "Histogram : " + "$" +
                            this.model.indicators[0].segment[0].points[sender.data.pointIndex].y + "<br/>" + "<br/>";
                        }
                    }
                }
            }
        }
        $("#controlarea").css("visibility", "visible");

        function chartLoad(sender) {
            loadTheme(sender);
            sender.model.series[0].dataSource = window.chartData;
            sender.model.series[0].xName = "xDate";
            sender.model.series[0].high = "High";
            sender.model.series[0].low = "Low";
            sender.model.series[0].open = "Open";
            sender.model.series[0].close = "Close";
        }
        function shortperiod(sender) {
            var chartObj = $("#container").ejChart("instance");
            chartObj.model.indicators[0].shortPeriod = parseInt(sender.value);
            $("#container").ejChart("redraw");
        }

        function longperiod(sender) {
            var chartObj = $("#container").ejChart("instance");
            chartObj.model.indicators[0].longPeriod = parseInt(sender.value);
            $("#container").ejChart("redraw");
        }
        function trigger(sender) {
            var chartObj = $("#container").ejChart("instance");
            chartObj.model.indicators[0].trigger = parseInt(sender.value);
            $("#container").ejChart("redraw");
        }
        $('#macdType').change(function () {
            var option = $("#macdType option:selected").text();
            var chart = $("#container").ejChart("instance");
            chart.model.indicators[0].macdType = option.toLowerCase();
            $("#container").ejChart("redraw");
        });
        function macdTypeChange(args) {
            if (args.itemId != 0) {
                var chartObj = $("#container").ejChart("instance");
                chartObj.model.indicators[0].macdType = args.text;
                $("#container").ejChart("redraw");
            }
        }
        $("#sampleProperties").ejPropertiesPanel();
    </script>
}


@section StyleSection
{<style class="cssStyles">
     .tooltipDiv table, table th, table tr, table td {
         border: 0px none;
         margin: 0 auto;
     }

     .tooltipDiv {
         border: 2px transparent;
         color: white;
     }

     #Tooltip td {
         color: white;
     }
 </style>
}


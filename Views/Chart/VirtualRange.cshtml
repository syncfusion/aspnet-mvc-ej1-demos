@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">Chart-Lazy Loading-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates how to customize virtual range for axis using Syncfusion ASP.NET MVC Chart Control">
}

@section StyleSection
{
    <style>
        .e-waitpopup-pane {
            background-color: transparent !important;
        }
    </style>
}

@section ControlsSection{
    <div style= "height:600px;">

       @(Html.EJ().Chart("container")

                        .PrimaryXAxis(xaxis => xaxis.Title(tit => tit.Text("Date")).ValueType(AxisValueType.Datetime).LabelFormat("MMM-yy").ScrollbarSettings(sc => sc.Range(ra => ra.Min("2009/1/1").Max("2014/1/1"))))
                                .PrimaryYAxis(yaxis => yaxis.Title(tit => tit.Text("Server Load (MBytes)")).LabelFormat("{value}MB"))
                        .Series(ser =>
                        {
                            ser.Type(SeriesType.Line).EnableAnimation(true).Name("Temperature").Add();
                        })
                        .Crosshair(cr=>cr.Visible(true).Type(CrosshairType.Trackball))
                        .Load("onchartload")                    
                        .CanResize(true)
                        .Title(tt => tt.Text("Network Load"))
                        .ScrollStart("scrollStart")
                        .ScrollEnd("scrollEnd")
                        .Size(sz => sz.Height("600"))
                        .Legend(lg => lg.Visible(false))
        )
            </div>
}
@section PropertiesSection
{
        <div class="prop-grid">
    <div class="row">
        <div class="col-md-3">
            Lazy Load
        </div>
        <div class="col-md-3 aligntop">
            <select name="selectIndex" autocomplete="off" id="type">
                <option value="range">Range</option>
                <option value="length">Points Length</option>
            </select>
        </div>
    </div>
    <div class="row" id="sdt">
        <div class="col-md-3">
            Min
        </div>
        <div class="col-md-3">
            @Html.EJ().DatePicker("startDateTime").Value("1/1/2009").Width("110").MinDate("1/1/2000").MaxDate("1/1/2009").ClientSideEvents(s => s.Change("startChange"))
        </div>
    </div>
    <div class="row" id="edt">
        <div class="col-md-3">
            Max
        </div>
        <div class="col-md-3">
            @Html.EJ().DatePicker("endDateTime").Value("1/1/2014").Width("110").MinDate("1/1/2009").MaxDate("1/1/2019").ClientSideEvents(s => s.Change("endChange"))
        </div>
    </div>
    <div class="row" id="point">
        <div class="col-md-3">
            Points Length
        </div>
        <div class="col-md-3 aligntop">
            @Html.EJ().NumericTextbox("numeric").Value("1000").Enabled(false).Width("110").MinValue(1000).MaxValue(10000000).ClientSideEvents(s => s.Change("startPoints"))
            
        </div>
    </div>
</div>
}
@section ScriptSection{
<script>
    var startDate = "1/1/2009";
			var endDate = "1/1/2014";
			var pointLenght = 1000;
            function startPoints(e) {
			    var chart = $("#container").ejChart('instance');
			    chart.model.primaryXAxis.scrollbarSettings.range.min = null;
			    chart.model.primaryXAxis.scrollbarSettings.range.max = null;
			    chart.model.primaryXAxis.valueType = 'double';
			    chart.model.primaryXAxis.labelFormat = '';
			    pointLenght = e.value;
			    chart.model.primaryXAxis.scrollbarSettings.pointsLength = e.value;
			    var data = GetNumericData(0, 300);
			    chart.model.series[0].dataSource = data.Open;
			    chart.model.series[0].xName = "XValue";
			    chart.model.series[0].yName = "YValue";
			    chart.redraw();
			}

			$('#type').change(function () {
			    var chart = $("#container").ejChart("instance");
			    if ($('#type')[0].value.toLowerCase() == "range") {
			        $('#startDateTime').data('ejDatePicker').enable();
			        $('#endDateTime').data('ejDatePicker').enable();
			        $("#numeric").data("ejNumericTextbox").disable();
			        chart.model.primaryXAxis.scrollbarSettings.range.min = startDate;
			        chart.model.primaryXAxis.scrollbarSettings.range.max = endDate;
			        chart.model.primaryXAxis.valueType = 'datetime';
			        chart.model.primaryXAxis.labelFormat = 'MMM-yy';
			        chart.model.primaryXAxis.scrollbarSettings.pointsLength = null;
			        var data = GetDateTimeData(new Date("1/1/2009"), new Date("10/1/2009"));
			        chart.model.series[0].dataSource = data.Open;
			        chart.model.series[0].xName = "XValue";
			        chart.model.series[0].yName = "YValue";
			    }
			    else {
			        $('#startDateTime').data('ejDatePicker').disable();
			        $('#endDateTime').data('ejDatePicker').disable();
			        $("#numeric").data("ejNumericTextbox").enable();
			        chart.model.primaryXAxis.scrollbarSettings.range.min = null;
			        chart.model.primaryXAxis.scrollbarSettings.range.max = null;
			        chart.model.primaryXAxis.valueType = 'double';
			        chart.model.primaryXAxis.labelFormat = '';
			        chart.model.primaryXAxis.scrollbarSettings.pointsLength = pointLenght;
			        var data = GetNumericData(0, 300);
			        chart.model.series[0].dataSource = data.Open;
			        chart.model.series[0].xName = "XValue";
			        chart.model.series[0].yName = "YValue";
			    }
			    chart.redraw();

			});
			function startChange(e){
			    var chart = $("#container").ejChart('instance');
			    startDate = e.value;
					chart.model.primaryXAxis.scrollbarSettings.range.min = e.value;
					chart.redraw();
			}
			function endChange(e){
			
			    var chart = $("#container").ejChart('instance');
			    endDate = e.value;
					chart.model.primaryXAxis.scrollbarSettings.range.max = e.value;
					chart.redraw();
			
			}
			
			function onchartload(sender) {
				loadTheme(sender);
			    var data = GetDateTimeData(new Date("1/1/2009"), new Date("10/1/2009"));
				sender.model.series[0].dataSource = data.Open;
				sender.model.series[0].xName = "XValue";
				sender.model.series[0].yName = "YValue";
			}
		
			function scrollStart(sender) {
				$("#container").ejWaitingPopup();
				$("#container").ejWaitingPopup("show");
			}
		
			function scrollEnd(sender) {
			    var data;
                if(sender.data.axis.scrollbarSettings.pointsLength != null)
                    data = GetNumericData(sender.data.newRange.start, sender.data.newRange.end);
			    else
                    data = GetDateTimeData(new Date(sender.data.newRange.start), new Date(sender.data.newRange.end));
                sender.model.series[0].dataSource = data.Open;
                $("#container").ejChart("instance").redraw();
                $("#container").ejWaitingPopup("hide");
			}

			function GetNumericData(start, end) {
			    var series1 = [];
			    var value = 30;

			    for (var i = start; i <= end; i++) {
			        if (Math.random() > .5) {
			            value += (Math.random() * 10 - 5);
			        } else {
			            value -= (Math.random() * 10 - 5)
			        }
					if(value < 0)
						value = getRandomInt(20,40);
			        var point = { XValue: i, YValue: Math.round(value) };
			        series1.push(point);
			    }
			    var data = { Open: series1 };

			    return data;
			}
		
			function GetDateTimeData(start, end) {
				var series1 = [], date, data1;
				var value = 30;
	
				for (var i = 0; start <= end; i++) {
					date = Date.parse(start);
					if (Math.random() > .5) {
						value += (Math.random() * 10 - 5);
					} else {
						value -= (Math.random() * 10 - 5)
					}
					if(value < 0){
						value = getRandomInt(20,40);
					}
					var point1 = { XValue: new Date(date), YValue: Math.round(value) };
					new Date(start.setDate(start.getDate() + 1));
					series1.push(point1);
				}
		
				data1 = { Open: series1 };
				return data1;
			}
	
			function getRandomInt(min, max) {
				return Math.floor(Math.random() * (max - min + 1)) + min;
			}
		
			$(window).mouseup(function(){
				$("#container").ejWaitingPopup();
				$("#container").ejWaitingPopup("hide");
			});

    $("#sampleProperties").ejPropertiesPanel();
</script>
    }



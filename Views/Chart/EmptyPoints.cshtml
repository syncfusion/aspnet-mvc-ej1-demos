@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">Chart-Empty Points-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates how to render EMA indicator using Syncfusion ASP.NET MVC Chart Control">
}

@section ControlsSection{
    <div>
   @(Html.EJ().Chart("container")
         .PrimaryXAxis(xaxis => xaxis.RangePadding(ChartRangePadding.Additional).Title(tit => tit.Text("Server Number")))
         .PrimaryYAxis(yaxis => yaxis.Range(rn => rn.Min(0).Max(250).Interval(50)).RangePadding(ChartRangePadding.None)
         .Title(tit => tit.Text("Server Load (M Bytes)")))
         .Series(sr =>
                      {
                          sr.Points(pt =>
                          {
                              pt.X("0").Y(210).Fill("#81B518").Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#81B518").Width(1.5)).Fill("white")).Add();
                              pt.X("1").Y(20).IsEmpty(true).Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#afafaf").Width(1.5)).Fill("white")).Add();
                              pt.X("2").Y(150).Fill("#ccdc00").Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#ccdc00").Width(1.5)).Fill("white")).Add();
                              pt.X("3").Y(200).IsEmpty(true).Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#afafaf").Width(1.5)).Fill("white")).Add();
                              pt.X("4").Y(170).Fill("#a6405a").Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#a6405a").Width(1.5)).Fill("white")).Add();
                              pt.X("5").Y(200).Fill("#60056d").Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#60056d").Width(1.5)).Fill("white")).Add();
                              pt.X("6").Y(140).IsEmpty(true).Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#afafaf").Width(1.5)).Fill("white")).Add();
                              pt.X("7").Y(120).Fill("#01599c").Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#01599c").Width(1.5)).Fill("white")).Add();
                              pt.X("8").Y(140).Fill("#385815").Marker(mk => mk.Shape(ChartShape.Circle).Visible(true).Size(sz => sz.Width(12).Height(12)).Border(b => b.Color("#385815").Width(1.5)).Fill("white")).Add();
                          }).Name("Course").Fill("#f37024").Marker(mk => mk.Shape(ChartShape.Circle).DataLabel(dl => dl.Visible(true).VerticalTextAlignment(Syncfusion.JavaScript.DataVisualization.TextAlignment.Far).EnableContrastColor(true).Shape(ChartShape.Rectangle))
                              .Visible(true).Size(sz => sz.Width(12).Height(12)))
                              .Add();
                      })
            .Load("loadTheme")
            .IsResponsive(true)
            .CommonSeriesOptions(cr => cr.EnableAnimation(true).Type(SeriesType.Spline).EmptyPointSettings(e => e.Visible(true).DisplayMode(ChartEmptyPointMode.Gap).Style(st => st.Color("#afafaf"))))
            .Title(title => title.Text("Network Load"))
            .DisplayTextRendering("textRender")
            .Size(sz => sz.Height("600"))
            .Legend(lg => lg.Visible(false))
            )
        <script>
            $("#controlarea").css("visibility", "visible");
        </script>
    </div>
}
@section PropertiesSection
{
    <div class="prop-grid">
        <div class="row">
            <div class="col-md-3">
                Type
            </div>
            <div class="col-md-3">
                <select name="selectIndex" id="seriestype">
                    <option value="spline">Spline</option>
                    <option value="column">Column</option>
                    <option value="area">Area</option>
                    <option value="pie">Pie</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Empty Point Visible
            </div>
            <div class="col-md-3 aligntop">
                <input type="checkbox" checked="checked" id="visible" />
            </div>
        </div>
        <div class="row" style="margin: 10px 0;">
            <div class="col-md-3">
                Empty Point Mode
            </div>
            <div class="col-md-3 aligntop">
                <select name="selectIndex" autocomplete="off" id="mode" style="width:100px;">
                    <option value="gap">Gap</option>
                    <option value="zero">Zero</option>
                    <option value="average">Average</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                Color
            </div>
            <div class="col-md-3 aligntop">
                @Html.EJ().ColorPicker("colorPicker").Value("#afafaf").ClientSideEvents(events => events.Select("onChange"))
            </div>
        </div>
    </div>
}
@section ScriptSection
{
    <script>


        function textRender(sender) {
            if (sender.model.AreaType == 'none' && sender.data.text == 0)
                sender.data.text = '';
        }
        function onChange(args) {
            var color = args.value;
			var chartInstance = $("#container").ejChart('instance');
			var points = chartInstance.model.series[0].points;
			for (var i = 0; i < points.length; i++) {
				if (points[i].isEmpty)
					points[i].marker.border.color = color;
			}
            $("#container").ejChart("option", { "commonSeriesOptions": { emptyPointSettings: { style: { color: color } } } });
        }

        $('#seriestype').change(function () {
			var chart = $("#container").ejChart('instance');
            var type = $('#seriestype')[0].value;
            chart.model.series[0].type = type;
            var pointsLength = chart.model.series[0].points.length;
            for (var i = 0; i < pointsLength; i++) {
                if (chart.model.series[0].points[i].marker) {
                    if (type == 'column') {
                        chart.model.series[0].points[i].marker.visible = false;
                        chart.model.series[0].marker.visible = false;
                    }
                    else {
                        chart.model.series[0].points[i].marker.visible = true;
                        chart.model.series[0].marker.visible = true;
                    }
                }
            }
            chart.redraw();
        });

        $('#mode').change(function () {
            $("#container").ejChart("option", { "commonSeriesOptions": { emptyPointSettings: { displayMode: $('#mode')[0].value } } });
        });
        $('#visible').change(function () {
            $("#container").ejChart("option", { "commonSeriesOptions": { emptyPointSettings: { visible: $('#visible').is(":checked") } } });
            if ($('#visible').is(":checked"))
                $('#mode').removeAttr('disabled');
            else
                $('#mode').attr('disabled', 'disabled');
        });

        $("#sampleProperties").ejPropertiesPanel();

    </script>
}








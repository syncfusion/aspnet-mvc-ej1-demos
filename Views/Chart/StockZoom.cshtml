@using Syncfusion.JavaScript.DataVisualization

@section SampleHeading{<span class="sampleName">Chart-Stock Zooming-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates stock chart for historical data using Syncfusion ASP.NET MVC Chart Control">
}

@section ControlsSection{
    <div class="row">
        <div id="zoomButtons" style="float:left">
            <div style="display:inline-block;font-size:12px">Zoom</div>
            @Html.EJ().Button("1M").CssClass("monthButton").Text("1M").Height("18").Width("35").Type(ButtonType.Button).ShowRoundedCorner(true).ClientSideEvents(cl => cl.Click("getMonth"))
            @Html.EJ().Button("3M").CssClass("monthButton").Text("3M").Height("18").Width("35").Type(ButtonType.Button).ShowRoundedCorner(true).ClientSideEvents(cl => cl.Click("getMonth"))
            @Html.EJ().Button("6M").CssClass("monthButton").Text("6M").Height("18").Width("35").Type(ButtonType.Button).ShowRoundedCorner(true).ClientSideEvents(cl => cl.Click("getMonth"))
            @Html.EJ().Button("YTD").CssClass("monthButton").Text("YTD").Height("18").Width("35").Type(ButtonType.Button).ShowRoundedCorner(true).ClientSideEvents(cl => cl.Click("getMonth"))
            @Html.EJ().Button("1Y").CssClass("monthButton button-hit").Text("1Y").Height("18").Width("35").Type(ButtonType.Button).ShowRoundedCorner(true).ClientSideEvents(cl => cl.Click("getMonth"))
            @Html.EJ().Button("All").CssClass("monthButton").Text("All").Height("18").Width("35").Type(ButtonType.Button).ShowRoundedCorner(true).ClientSideEvents(cl => cl.Click("getMonth"))
        </div>

        <div style="float:right;">
            <div class="move" style="float:left;padding-top: 2px;font-size:12px;">From</div>
            <div class="move dateStyle" style="float:left;">
                @Html.EJ().DatePicker("startDateTime").Width("100").Height("20").ClientSideEvents(s => s.Change("changeStartDate").Create("datePickLoad"))
            </div>
            <div class="move" style="float:left;margin-left:5px;padding-top: 2px;font-size:12px;">To</div>
            <div class="move dateStyle" style="float:left;">
                @Html.EJ().DatePicker("endDateTime").Width("100").Height("20").ClientSideEvents(s => s.Change("changeEndDate").Create("datePickLoad2"))
            </div>
        </div>
    </div>

    <div>
        @(Html.EJ().Chart("container")
              .PrimaryXAxis(pr => pr.MajorGridLines(mr => mr.Visible(false))
              .ValueType(AxisValueType.Datetime).LabelIntersectAction(LabelIntersectAction.Trim))
              .PrimaryYAxis(pr => pr.LabelFormat("${value}").MajorGridLines(mr => mr.Visible(false)).Range(ra => ra.Min(0).Max(120).Interval(20)))
              .Crosshair(cr => cr.Visible(true).Type(CrosshairType.Trackball).Line(ln => ln.Color("transparent")))
              .Series(sr =>
              {
                  sr.Type(SeriesType.Area).Name("Product X").Border(br => br.Color("rgba(124,181,236,1)").Width(2))
                    .Fill("rgba(124,181,236,0.75)").Add();
              })
              .Load("onchartload")
              .Loaded("chartLoadComplete")
              .Title(title => title.Text("Stock Price History"))
              .Size(sz => sz.Height("300"))
              .Legend(lg => lg.Visible(false))
              .TrackToolTip("trackballTooltip")
        )
        @(Html.EJ().RangeNavigator("scrollcontent")
              .EnableDeferredUpdate(true)
              .SizeSettings(si => si.Height("75"))
              .AllowSnapping(true)
              .IsResponsive(true)
              .LabelSettings(ls => ls.HigherLevel(hl => hl.Visible(true).LabelPlacement(RangeNavigatorLabelPlacement.Inside)).LowerLevel(ll => ll.Visible(false).IntervalType(NavigatorIntervalType.Quarters)))
                  .ValueType(RangeNavigatorValueType.Datetime)
                  .Series(sr =>
                  {
                      sr.Name("Product A").EnableAnimation(false).Type(SeriesType.Line).Fill("#357cd2").Width(1).Add();
                  })
                  .ValueAxisSettings(vl => vl.Range(ra => ra.Min(0).Max(120).Interval(20)))
                  .NavigatorStyleSettings(ns => ns.ThumbColor("#ffffff").UnselectedRegionColor("#999999").SelectedRegionColor("#0f4f4f4")
                  )
                  .Loaded("loadingtheme")
                  .Load("loadingdata")
                  .RangeChanged("onchartloaded")
        )

    </div>
}

@section ScriptSection
{
    <script type="text/javascript" language="javascript">
        var data = allYearData().Open;
        function allYearData() {
            var currentDate = new Date();
            var series1 = [];
            var value = 100;
            for (var i = 0; i < 2555; i++) {

                if (Math.random() > .5) {
                    value += Math.random();
                } else {
                    value -= Math.random();
                }
                if (value >= 110) value = 110;
                if (value <= 20) value = 20;

                var point1 = { XValue: new Date(currentDate.getFullYear(), currentDate.getMonth(), (currentDate.getDate() - i)), YValue: value };
                series1.push(point1);
                if (i == 0) endDate = point1.XValue;
                if (i == 2554) startDate = point1.XValue;
            }

            data = { Open: series1 };
            return data;
        }
        function datePickLoad(args) {
            args.model.value = startDate;
            args.model.minDate = startDate;
            args.model.maxDate = endDate;
        }
        function datePickLoad2(args) {
            args.model.value = endDate;
            args.model.minDate = startDate;
            args.model.maxDate = endDate;
        }
        function onchartload(sender) {
            loadTheme(sender);           
            sender.model.series[0].dataSource = data;
            sender.model.series[0].xName = "XValue";
            sender.model.series[0].yName = "YValue";
        }

        function chartLoadComplete(sender) {
            sender.model.crosshair.line.color = "transparent";
        }

        var rangeNavigator, datePicker1, datePicker2;
        function loadingdata(sender) {
            datePicker1 = $("#datepick").data("ejDatePicker");
            datePicker2 = $("#datepick2").data("ejDatePicker");
            rangeNavigator = $("#scrollcontent").ejRangeNavigator("instance");
            sender.model.series[0].dataSource = data;
            sender.model.series[0].xName = "XValue";
            sender.model.series[0].yName = "YValue";
            sender.model.selectedRangeSettings.start = new Date(endDate.getFullYear(), endDate.getMonth() - 12, endDate.getDate()).toLocaleString();
            sender.model.selectedRangeSettings.end = endDate.toLocaleString();

        }
        function onchartloaded(sender) {
            var chartobj = $("#container").data("ejChart");
            if (chartobj != null) {
                var rangeobj = $("#scrollcontent").data("ejRangeNavigator");
                var datePicker1 = $("#startDateTime").data("ejDatePicker");
                var datePicker2 = $("#endDateTime").data("ejDatePicker");
                chartobj.model.primaryXAxis.zoomPosition = sender.zoomPosition;
                chartobj.model.primaryXAxis.zoomFactor = sender.zoomFactor;
                if (datePicker1 != null && datePicker2 != null) {
                    datePicker1.setModel({ value: sender.selectedRangeSettings.start });
                    datePicker2.setModel({ value: sender.selectedRangeSettings.end });
                    if (!buttonFlag) {
                        $("#" + previousFocusedButton).removeClass("button-hit");
                        buttonFlag = true;
                    }
                }
                $("#container").ejChart("redraw");
            }
        }
        $("#scrollcontent,.dateStyle").mousedown(function (event) {
            buttonFlag = false
        });
        function trackballTooltip(sender) {
            var seriesIndex = sender.data.serIndex;
            var pointIndex = sender.data.pointIndex;
            var point = sender.model.series[seriesIndex].points[pointIndex];
            sender.data.currentText = point.x.toDateString() + "<br/>" + "Stock price : " + "$" + point.y.toFixed(2);
        }

        Date.prototype.subMonths = function (month) {
            var dat = new Date(this.valueOf())
            dat = new Date(dat.getFullYear(), dat.getMonth() - month, dat.getDate());
            return dat;
        }

        var buttonFlag = true;
        var previousFocusedButton = "1Y"

        function getMonth(args) {
            var currentId = args.target.id;
            $("#" + previousFocusedButton).removeClass("button-hit");
            $("#" + currentId).addClass("button-hit")
            previousFocusedButton = currentId;
            var rangeobj = $("#scrollcontent").data("ejRangeNavigator");
            var value = args.target.id;
            var dateStart = rangeobj.model.selectedRangeSettings.start;
            var dateEnd = rangeobj.model.selectedRangeSettings.end;
            var currentMonth = dateEnd.getMonth();
            eDate = new Date(dateEnd);
            if (value == "1M")
                startDate = eDate.subMonths(1);
            else if (value == "3M")
                startDate = eDate.subMonths(3);
            else if (value == "6M")
                startDate = eDate.subMonths(6);
            else if (value == "YTD") {
                var currentYTD = new Date().subMonths(new Date().getMonth());
                startDate = new Date(currentYTD.getFullYear(), 0, 1);
                rangeobj.model.selectedRangeSettings.end = endDate.toString();
            }
            else if (value == "1Y")
                startDate = eDate.subMonths(12);
            else if (value == "All") {
                rangeobj.model.selectedRangeSettings.end = endDate.toString();
                startDate = new Date(eDate.getFullYear(), eDate.getMonth(), (eDate.getDate() - 2553));
            }
            rangeobj.model.selectedRangeSettings.start = startDate.toString();
            rangeobj.redraw();
        }

        function changeStartDate(sender) {
            if (!buttonFlag) {
                $("#" + previousFocusedButton).removeClass("button-hit");
                buttonFlag = true;
            }
            var rangeobj = $("#scrollcontent").data("ejRangeNavigator");
            rangeobj.model.selectedRangeSettings.start = sender.value;
            rangeobj.redraw();
        }

        function changeEndDate(sender) {
            if (!buttonFlag) {
                $("#" + previousFocusedButton).removeClass("button-hit");
                buttonFlag = true;
            }
            var rangeobj = $("#scrollcontent").data("ejRangeNavigator");
            rangeobj.model.selectedRangeSettings.end = sender.value;
            rangeobj.redraw();
        }

        function loadingtheme(sender) {
            if (this.model._themeChanged) this.model.theme = "";
            var theme = window.themestyle + window.themecolor + window.themevarient;
            if (theme) {
                switch (theme) {
                    case "flatazurelight":
                        theme = "azurelight";
                        break;
                    case "flatlimelight":
                        theme = "limelight";
                        break;
                    case "flatsaffronlight":
                        theme = "saffronlight";
                        break;
                    case "gradientazurelight":
                        theme = "gradientazure";
                        break;
                    case "gradientlimelight":
                        theme = "gradientlime";
                        break;
                    case "gradientsaffronlight":
                        theme = "gradientsaffron";
                        break;
                    case "flatazuredark":
                        theme = "azuredark";
                        break;
                    case "flatlimedark":
                        theme = "limedark";
                        break;
                    case "flatsaffrondark":
                        theme = "saffrondark";
                        break;
                    case "gradientazuredark":
                        theme = "gradientazuredark";
                        break;
                    case "gradientlimedark":
                        theme = "gradientlimedark";
                        break;
                    case "gradientsaffrondark":
                        theme = "gradientsaffrondark";
                        break;
                    case "flathigh-contrast-01dark":
                        theme = "highcontrast01";
                        break;
                    case "flathigh-contrast-02dark":
                        theme = "highcontrast02";
                        break;
                    case "flatmateriallight":
                        theme = "material";
                        break;
                    case "flatoffice-365light":
                        theme = "office";
                        break;
                    default:
                        theme = "flatlight";
                        break;
                }
                if (theme == "azuredark" || theme == "limedark" || theme == "saffrondark" || theme == "gradientazuredark" || theme == "gradientlimedark" || theme == "gradientsaffrondark" ||
                    theme == "highcontrast01" || theme == "highcontrast02") {
                    var buttonFont = document.getElementsByClassName("monthButton");
                    for (var i = 0; i < buttonFont.length; i++)
                        buttonFont[i].style.color = "white";
                    sender.model.navigatorStyleSettings.thumbStroke = "#303030";
                    sender.model.tooltipSettings.font.color = "#FFFFFF";
                    sender.model.tooltipSettings.backgroundColor = "#303030";
                }
                else {
                    var buttonFont = document.getElementsByClassName("monthButton");
                    for (var i = 0; i < buttonFont.length; i++)
                        buttonFont[i].style.color = "black";
                }
                sender.model.navigatorStyleSettings.thumbColor = "#ffffff";
                sender.model.navigatorStyleSettings.unselectedRegionColor = "#999999";
                sender.model.navigatorStyleSettings.unselectedRegionOpacity = 0.4;
                sender.model.navigatorStyleSettings.selectedRegionColor = "#0f4f4f4";


            }
        }

    </script>
    <style>
        .move {
            padding-left: 2px;
        }

        .button-hit {
            border: 1px solid #357cd2 !important;
        }

        .monthButton, .e-datepicker {
            font-size: 12px !important;
            padding-top: 2px;
            border-radius:4px;
        }
    </style>
}




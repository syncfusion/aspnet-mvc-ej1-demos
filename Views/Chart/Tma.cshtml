@using Syncfusion.JavaScript.DataVisualization

@section ScriptReferenceSection{
    <script src="~/Scripts/onlinedata.js"></script>
}

@section SampleHeading{<span class="sampleName">Chart-TMA-ASP.NET MVC-SYNCFUSION</span>}

@section MetaTags{
    <meta name="description" content="This sample demonstrates how to render TMA indicator using Syncfusion ASP.NET MVC Chart Control">
}

@section ControlsSection{

    <div>
  @(Html.EJ().Chart("container")
        .Axes(ax =>
              {
                  ax.Name("yAxis1").Orientation("vertical").OpposedPosition(true).LabelFormat("${value}")
                    .Range(ra => ra.Max(75).Min(55).Interval(5)).Add();
              })
        .PrimaryXAxis(pr => pr.Title(tl => tl.Text("Date")).LabelFormat("dd,MMM"))
        .PrimaryYAxis(pr => pr.LabelFormat("${value}").Range(ra => ra.Max(75).Min(55).Interval(5)))
        .Series(sr =>
             {
                 sr.Name("Candle").Type(SeriesType.HiloOpenClose).EnableAnimation(true)
                   .Tooltip(tool => tool.Visible(false)
                   .Format("#point.x#<br/>Open : $#point.open#<br/>High : $#point.high#<br/>Low : $#point.low#<br/>Close : $#point.close#<br/>"))
                   .Add();

             })

        .Indicators(ind =>
             {
                 ind.Type(ChartIndicatorType.TMA).SeriesName("Candle").Period(14).YAxisName("yAxis1")
                 .Tooltip(tool => tool.Visible(false).Format("").Fill("transparent").Border(br => br.Color("transparent")))
                 .Fill("blue").Width(1).EnableAnimation(true)
                 .Add();
             })
        .Load("onchartload")
        .IsResponsive(true)
        .TrackToolTip("track")
        .Title(title => title.Text("Triangular Moving Average Indicator"))
        .Legend(lg => { lg.Visible(false); })
        .Size(sz => sz.Height("600"))
        .Crosshair(cr => cr.Visible(true).Type(CrosshairType.Trackball))
        .Zooming(zz => zz.Enable(true))
    )
    </div>
}

@section PropertiesSection

{
    <div id="sampleProperties">
        <div class="prop-grid">
            <div class="row">
                <div class="col-md-3">
                    Period:
                </div>
                <div class="col-md-3">
                    @Html.EJ().NumericTextbox("period").Value(14).Width("80px").MinValue(1).MaxValue(50).ClientSideEvents(s => s.Change("period"))
                </div>
                <div class="col-md-3">
                    Signal Line Stroke:
                </div>
                <div class="col-md-3">
                    <select name="List" autocomplete="off" id="signalLine">
                        <option value="blue">Blue</option>
                        <option value="green">Green</option>
                        <option value="yellow">Yellow</option>
                        <option value="red">Red</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
}

@section ScriptSection
{
    <script type="text/javascript" language="javascript">
        function track(sender) {
            sender.data.Location.X = sender.data.Location.X + 1;
            if (sender.data.Series.name == "Candle") {
                if (this.model.indicators[0].segment.length > 0) {
                    if (this.model.indicators[0].segment[0].points[sender.data.pointIndex].y != null)
                        sender.data.currentText = sender.data.currentText + "Signal Line " + " :" + "  $" +
                            this.model.indicators[0].segment[0].points[sender.data.pointIndex].y.toFixed(2) + "<br/>" + "<br/>";
                    else
                        sender.data.currentText = sender.data.currentText + "Signal Line " + " :" + "  $" +
                            this.model.indicators[0].segment[0].points[sender.data.pointIndex].y + "<br/>" + "<br/>";
                }
            }
        }
        function getColorValue(name) {
            var val;
            switch (name) {
                case "Red":
                    val = "#FF0000";
                    break;
                case "Green":
                    val = "#009900";
                    break;
                case "Yellow":
                    val = "#D8B213";
                    break;
                case "Blue":
                    val = "#0000FF";
                    break;
            }
            return val;
        }

        $('#signalLine').change(function () {
            var option = $("#signalLine option:selected").text();
            var chart = $("#container").ejChart("instance");
            var value = getColorValue(option);
            chart.model.indicators[0].fill = value;
            $("#container").ejChart("redraw");
        });
        $("#period").change(function () {
            var chart = $("#container").ejChart("instance");
            var num = parseInt(period.value);
            chart.model.indicators[0].period = num;
            chart.redraw();
        });
        function onchartload(sender) {
            loadTheme(sender);
            sender.model.series[0].dataSource = window.chartData;
            sender.model.series[0].xName = "xDate";
            sender.model.series[0].open = "Open";
            sender.model.series[0].high = "High";
            sender.model.series[0].low = "Low";
            sender.model.series[0].close = "Close";
        }
        $("#sampleProperties").ejPropertiesPanel();
        $("#controlarea").css("visibility", "visible");
    </script>
}


@section MetaTags{
   <meta name="description" content="This example demonstrates the various methods like show, hide, enable, getValue and disable in a ASP.NET MVC ColorPicker">
}

@section SampleHeading{<span class="sampleName">ColorPicker-Methods-ASP.NET MVC-SYNCFUSION</span>}
@section ControlsSection{
    <div class="frame">
        <div class="control">
            <div class="element">
                <label class="fadetext"> Choose a color </label>
                    @Html.EJ().ColorPicker("colorPicker").Value("#278787")
            </div>
        </div>
    </div>
}
@section PropertiesSection{
    <div class="row">
        <div class="col-md-3 col-xs-4">
            Value (prefix with '#')
        </div>
        <div class="col-md-3 col-xs-4">
            <input type="text" id="color-value" class="input ejinputtext" onchange="onValueChange()" placeholder="Value" />
        </div>
    </div>
<div class="row">
    <div class="col-md-3 col-xs-4">
        Enable Preview
    </div>
    <div class="col-md-3 col-xs-4">
        @Html.EJ().ToggleButton("preview").Width("95px").DefaultText("False").ActiveText("True").ClientSideEvents(s => s.Change("onPreview"))
    </div>
</div>
<div class="row">
    <div class="col-md-3 col-xs-4">
        Opacity Value
    </div>
    <div class="col-md-3 col-xs-4">
        @Html.EJ().NumericTextbox("opacityValue").ShowSpinButton(false).MinValue(0).MaxValue(100).WatermarkText("Opacity Value").EnableStrictMode(true).ClientSideEvents(s => s.Change("onOpacityValue"))
    </div>
</div>
<div class="row">
    <div class="col-md-3 col-xs-4">
        Enable Opacity
    </div>
    <div class="col-md-3 col-xs-4">
        @Html.EJ().ToggleButton("opacity").Width("95px").DefaultText("False").ActiveText("True").ClientSideEvents(s => s.Change("onEnableOpacity"))
    </div>
</div>
<div class="row">
    <div class="col-md-3 col-xs-4">
        Show Recent Color
    </div>
    <div class="col-md-3 col-xs-4">
        @Html.EJ().ToggleButton("recentColor").Width("95px").DefaultText("True").ActiveText("False").ClientSideEvents(events => events.Change("onRecentColor"))
    </div>
</div>
<div class="row">
    <div class="col-md-3 col-xs-4">
        Enabled
    </div>
    <div class="col-md-3 col-xs-4">
        @Html.EJ().ToggleButton("enabled").Width("95px").DefaultText("False").ActiveText("True").ClientSideEvents(events => events.Change("onEnabled"))
    </div>
</div>
<div class="row">
    <div class="col-md-3 col-xs-4">
        Show Switcher
    </div>
    <div class="col-md-3 col-xs-4">
        @Html.EJ().ToggleButton("switcher").Width("95px").DefaultText("False").ActiveText("True").ClientSideEvents(events => events.Change("onSwitcher"))
    </div>
</div>
<div class="row">
    <div class="col-md-3 col-xs-4">
        Show Buttons
    </div>
    <div class="col-md-3 col-xs-4">
        @Html.EJ().ToggleButton("showButton").Width("95px").DefaultText("False").ActiveText("True").ClientSideEvents(events => events.Change("onShowButton"))
    </div>
</div>
<div class="row">
    <div class="col-md-3 col-xs-4">
        Get HexCode
    </div>
    <div class="col-md-3 col-xs-4">
        <input type="button" class="e-btn e-select" id="hexCode" value="Value" onclick="getHexCode()" />
    </div>
</div>
}
@section ScriptSection{
<script type="text/javascript">
    var ColorObj;
    $(function () {
        ColorObj = $("#colorPicker").data('ejColorPicker');
        $("#sampleProperties").ejPropertiesPanel();
    });
    $("#color-value").keypress(function (event) {
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if (keycode == '13') {
            if ($("#color-value").val() !== "") {
                if ($("#color-value").val().length == 4 || $("#color-value").val().length == 7)
                    ColorObj.option('value', $("#color-value").val());
            }
        }
    });
    $("#opacityValue").keypress(function (event) {
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if (keycode == '13')
            ColorObj.option('opacityValue', $("#opacityValue").val());
    });
    function onValueChange() {
        if ($("#color-value").val() !== "") {
            if ($("#color-value").val().length == 4 || $("#color-value").val().length == 7)
                ColorObj.option('value', $("#color-value").val());
        }
    }
    function onSwitcher(args) {
        var ColorObj = $("#colorPicker").data('ejColorPicker');
        if (args.isChecked) ColorObj.option('showSwitcher', false);
        else ColorObj.option('showSwitcher', true);
    }
    function onShowButton(args) {
        var ColorObj = $("#colorPicker").data('ejColorPicker');
        if (args.isChecked) ColorObj.option('showApplyCancel', false);
        else ColorObj.option('showApplyCancel', true);
    }
    function onOpacityValue(args) {
        args.value !== "" && ColorObj.option('opacityValue', args.value);
    }
    function onEnabled(args) {
        var ColorObj = $("#colorPicker").data('ejColorPicker');
        if (args.isChecked) {
            ColorObj.option('enabled', false);
            $(".fadetext").addClass("e-disable");
        }
        else {
            ColorObj.option('enabled', true);
            $(".fadetext").removeClass("e-disable");
        }
    }
    function onRecentColor(args) {
        var ColorObj = $("#colorPicker").data('ejColorPicker');
        if (args.isChecked) ColorObj.option('showRecentColors', true);
        else ColorObj.option('showRecentColors', false);
    }
    function onEnableOpacity(args) {
        var ColorObj = $("#colorPicker").data('ejColorPicker');
        var numericObj = $("#opacityValue").data('ejNumericTextbox');
        if (args.isChecked) {
            ColorObj.option('enableOpacity', false);
            numericObj.disable();
        }
        else {
            ColorObj.option('enableOpacity', true);
            numericObj.enable();
        }
    }
    function onPreview(args) {
        var ColorObj = $("#colorPicker").data('ejColorPicker');
        if (args.isChecked) ColorObj.option('showPreview', false);
        else ColorObj.option('showPreview', true);
    }
    function getHexCode() {
        var ColorObj = $("#colorPicker").data('ejColorPicker');
        setTimeout(function () { alert("The Colorpicker value : " + ColorObj.getValue()); }, 250);
    }

</script>
}
@section StyleSection{
    <style>
        .frame .control {
            margin-left: 40%;
        }

        .cols-sample-area .frame {
            margin-left: 30%;
            padding: 50px 60px 65px;
            width: 206px;
        }

        .prop-grid .row .e-btn.e-select {
            width: 95px;
        }

        .row #hexCode {
            width: 95px;
            height: 30px;
        }

        .e-bootstrap .row #hexCode {
            height: 34px;
        }

        .input.ejinputtext {
            text-indent: 10px;
            width: 93px;
            height: 26px;
        }

        .e-btn {
            height: 30px;
        }

        .e-bootstrap .input.ejinputtext {
            height: 30px;
        }

        .row .e-widget.e-numeric {
            width: 95px;
        }
    </style>
}

